import ServiceBase from "./ServiceBase";
import {
  AccountProfile,
  AddWebhookRequest,
  AddWebhookResponse,
  CreateEcosystemRequest,
  CreateEcosystemResponse,
  DeleteWebhookRequest,
  DeleteWebhookResponse,
  EcosystemInfoRequest,
  EcosystemInfoResponse,
  GenerateTokenRequest,
  GenerateTokenResponse,
  GetAuthorizationsRequest,
  GetAuthorizationsResponse,
  GetEventTokenRequest,
  GetEventTokenResponse,
  GetOberonKeyRequest,
  GetOberonKeyResponse,
  GrantAuthorizationRequest,
  GrantAuthorizationResponse,
  InvitationStatusRequest,
  InvitationStatusResponse,
  InviteRequest,
  InviteResponse,
  ProviderDefinition,
  RevokeAuthorizationRequest,
  RevokeAuthorizationResponse,
  ServiceOptions,
  UpdateEcosystemRequest,
  UpdateEcosystemResponse,
} from "./proto";

import type { Client as BrowserClient } from "nice-grpc-web";
import { Base64 } from "js-base64";

export class ProviderService extends ServiceBase {
  client: BrowserClient<typeof ProviderDefinition>;

  constructor(options?: ServiceOptions) {
    super(options);

    this.client = this.createClient(ProviderDefinition);
  }

  public async createEcosystem(
    request: CreateEcosystemRequest
  ): Promise<CreateEcosystemResponse> {
    const response =
      request.name?.trim() || request.details?.email?.trim()
        ? await this.client.createEcosystem(request, {
            metadata: await this.buildMetadata(
              CreateEcosystemRequest.encode(request).finish()
            ),
          })
        : await this.client.createEcosystem(request);

    const authToken = Base64.fromUint8Array(
      (AccountProfile.encode(response.profile!).finish()),
      true
    );
    this.options.authToken = authToken;
    return response;
  }
// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\web\src\ProviderService.ts

  public async updateEcosystem(
    request: UpdateEcosystemRequest
  ): Promise<UpdateEcosystemResponse> {
    return this.client.updateEcosystem(request, {
      metadata: await this.buildMetadata(UpdateEcosystemRequest.encode(request).finish())
    });
  }
  public async grantAuthorization(
    request: GrantAuthorizationRequest
  ): Promise<GrantAuthorizationResponse> {
    return this.client.grantAuthorization(request, {
      metadata: await this.buildMetadata(GrantAuthorizationRequest.encode(request).finish())
    });
  }
  public async revokeAuthorization(
    request: RevokeAuthorizationRequest
  ): Promise<RevokeAuthorizationResponse> {
    return this.client.revokeAuthorization(request, {
      metadata: await this.buildMetadata(RevokeAuthorizationRequest.encode(request).finish())
    });
  }
  public async getAuthorizations(
    request: GetAuthorizationsRequest
  ): Promise<GetAuthorizationsResponse> {
    return this.client.getAuthorizations(request, {
      metadata: await this.buildMetadata(GetAuthorizationsRequest.encode(request).finish())
    });
  }
  public async addWebhook(
    request: AddWebhookRequest
  ): Promise<AddWebhookResponse> {
    return this.client.addWebhook(request, {
      metadata: await this.buildMetadata(AddWebhookRequest.encode(request).finish())
    });
  }
  public async deleteWebhook(
    request: DeleteWebhookRequest
  ): Promise<DeleteWebhookResponse> {
    return this.client.deleteWebhook(request, {
      metadata: await this.buildMetadata(DeleteWebhookRequest.encode(request).finish())
    });
  }
  public async ecosystemInfo(
    request: EcosystemInfoRequest
  ): Promise<EcosystemInfoResponse> {
    return this.client.ecosystemInfo(request, {
      metadata: await this.buildMetadata(EcosystemInfoRequest.encode(request).finish())
    });
  }
  public async generateToken(
    request: GenerateTokenRequest
  ): Promise<GenerateTokenResponse> {
    return this.client.generateToken(request, {
      metadata: await this.buildMetadata(GenerateTokenRequest.encode(request).finish())
    });
  }
  public async invite(
    request: InviteRequest
  ): Promise<InviteResponse> {
    return this.client.invite(request, {
      metadata: await this.buildMetadata(InviteRequest.encode(request).finish())
    });
  }
  public async invitationStatus(
    request: InvitationStatusRequest
  ): Promise<InvitationStatusResponse> {
    return this.client.invitationStatus(request, {
      metadata: await this.buildMetadata(InvitationStatusRequest.encode(request).finish())
    });
  }
  public async getOberonKey(
    request: GetOberonKeyRequest
  ): Promise<GetOberonKeyResponse> {
    return this.client.getOberonKey(request, {
      metadata: await this.buildMetadata()
    });
  }
  public async getEventToken(
    request: GetEventTokenRequest
  ): Promise<GetEventTokenResponse> {
    return this.client.getEventToken(request, {
      metadata: await this.buildMetadata(GetEventTokenRequest.encode(request).finish())
    });
  }
  public async retrieveVerificationRecord(
    request: RetrieveVerificationRecordRequest
  ): Promise<RetrieveVerificationRecordResponse> {
    return this.client.retrieveVerificationRecord(request, {
      metadata: await this.buildMetadata(RetrieveVerificationRecordRequest.encode(request).finish())
    });
  }
  public async refreshVerificationStatus(
    request: RefreshVerificationStatusRequest
  ): Promise<RefreshVerificationStatusResponse> {
    return this.client.refreshVerificationStatus(request, {
      metadata: await this.buildMetadata(RefreshVerificationStatusRequest.encode(request).finish())
    });
  }
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
