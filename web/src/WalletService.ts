import ServiceBase from "./ServiceBase";
import {
    SearchRequest,
    SearchResponse,
    ServiceOptions,
    UniversalWalletDefinition,
} from "./proto";
import * as proto from "./proto";

import type { Client as BrowserClient } from "nice-grpc-web";

export class WalletService extends ServiceBase {
    client: BrowserClient<typeof UniversalWalletDefinition>;

    constructor(options?: ServiceOptions) {
        super(options);

        this.client = this.createClient(UniversalWalletDefinition);
    }

    public async searchWallet(
        request: SearchRequest = SearchRequest.fromPartial({
            query: "SELECT c.id, c.type, c.data FROM c OFFSET 0 LIMIT 100",
        })
    ): Promise<SearchResponse> {
        return this.search(request);
    }
// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\web\src\WalletService.ts

  /** Retrieve an item from the wallet with a given item identifier */
  public async getItem(request: proto.GetItemRequest): Promise<proto.GetItemResponse> {
    
    return this.client.getItem(request, {
      metadata: await this.buildMetadata(proto.GetItemRequest.encode(request).finish())
    });
  }
  /** Search the wallet using a SQL syntax */
  public async search(request: proto.SearchRequest): Promise<proto.SearchResponse> {
    
    return this.client.search(request, {
      metadata: await this.buildMetadata(proto.SearchRequest.encode(request).finish())
    });
  }
  /** Insert an item into the wallet */
  public async insertItem(request: proto.InsertItemRequest): Promise<proto.InsertItemResponse> {
    
    return this.client.insertItem(request, {
      metadata: await this.buildMetadata(proto.InsertItemRequest.encode(request).finish())
    });
  }
  /** Update an item in the wallet */
  public async updateItem(request: proto.UpdateItemRequest): Promise<proto.UpdateItemResponse> {
    
    return this.client.updateItem(request, {
      metadata: await this.buildMetadata(proto.UpdateItemRequest.encode(request).finish())
    });
  }
  /** Delete an item from the wallet permanently */
  public async deleteItem(request: proto.DeleteItemRequest): Promise<proto.DeleteItemResponse> {
    
    return this.client.deleteItem(request, {
      metadata: await this.buildMetadata(proto.DeleteItemRequest.encode(request).finish())
    });
  }
  /** Delete a wallet and its credentials */
  public async deleteWallet(request: proto.DeleteWalletRequest): Promise<proto.DeleteWalletResponse> {
    
    return this.client.deleteWallet(request, {
      metadata: await this.buildMetadata(proto.DeleteWalletRequest.encode(request).finish())
    });
  }
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
