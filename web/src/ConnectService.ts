import ServiceBase from "./ServiceBase";

import type { Client as BrowserClient } from "nice-grpc-web";
import { ConnectDefinition, TrinsicOptions } from "./proto";
import * as proto from "./proto";
import {OidcClient, SigninRequest} from "oidc-client-ts";

export class VerifiablePresentationRequest {
    ecosystem: string;
    schema: string;
    issuer: string | undefined;
    challenge: string | undefined;
    domain: string | undefined;

    constructor(ecosystem: string, schema: string, issuer: string | undefined, challenge: string | undefined, domain: string | undefined) {
        this.ecosystem = ecosystem;
        this.schema = schema;
        this.issuer = issuer;
        this.challenge = challenge;
        this.domain = domain;
    }

}

export class VerifiablePresentation {
    data: any
    // TODO - Handle other dictionary-esque types?
    constructor(data: any) {
        this.data = data;
    }

    public jsonString(): string {
        // TODO - Any other escaping issues?
        return JSON.stringify(this.data);
    }
}

function ecosysteName(name: string): string {
    name = name.replace("urn:trinsic:ecosystem:", "").replace("urn:ecosystems:","");
    return name;
}

export class ConnectService extends ServiceBase {
    client: BrowserClient<typeof ConnectDefinition>;
    oidcClient: OidcClient;

    constructor(options?: TrinsicOptions) {
        super(options);

        this.client = this.createClient(ConnectDefinition);
        // TODO - Figure out proper values
        this.oidcClient = new OidcClient({authority: "", client_id: "https://example.com", redirect_uri: ""});
    }

    public async requestVerifiableCredential(request: VerifiablePresentationRequest): Promise<VerifiablePresentation> {
        const ecosystem = ecosysteName(request.ecosystem);
        const issuerUrl = `https://${ecosystem}.connect.trinsic.cloud`;
        // Build authentication request

        const session = await this.oidcClient.createSigninRequest({
            scope: "openid scope openid",
            redirect_uri: "com.example://oauth2redirect",
            response_type: "code",
            extraQueryParams: {
                "trinsic:ecosystem": ecosystem,
                "trinsic:schema": request.schema
            },
        });
        const response = await this.oidcClient.processSigninResponse(session.url);
        await this.oidcClient.useRefreshToken({state: {
            refresh_token: response.refresh_token!,
                scope: "openid scope openid",
                data: {},
                profile: {},
            }});

        throw new Error("Not Implemented!");
    }

    // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    // target: C:\work\sdk\web\src\ConnectService.ts

    /** Create an IDVSession */
    public async createSession(
        request: proto.CreateSessionRequest,
    ): Promise<proto.CreateSessionResponse> {
        return this.client.createSession(request, {
            metadata: await this.buildMetadata(
                proto.CreateSessionRequest.encode(request).finish(),
            ),
        });
    }
    /** Cancel an IDVSession */
    public async cancelSession(
        request: proto.CancelSessionRequest,
    ): Promise<proto.CancelSessionResponse> {
        return this.client.cancelSession(request, {
            metadata: await this.buildMetadata(
                proto.CancelSessionRequest.encode(request).finish(),
            ),
        });
    }
    /** Get an IDVSession */
    public async getSession(
        request: proto.GetSessionRequest,
    ): Promise<proto.GetSessionResponse> {
        return this.client.getSession(request, {
            metadata: await this.buildMetadata(
                proto.GetSessionRequest.encode(request).finish(),
            ),
        });
    }
    // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
