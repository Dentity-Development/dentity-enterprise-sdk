import ServiceBase from "./ServiceBase";
import {
    CheckStatusRequest,
    CheckStatusResponse,
    CreateProofRequest,
    CreateProofResponse,
    IssueFromTemplateRequest,
    IssueFromTemplateResponse,
    IssueRequest,
    IssueResponse,
    SendRequest,
    SendResponse,
    ServiceOptions,
    UpdateStatusRequest,
    UpdateStatusResponse,
    VerifiableCredentialDefinition,
    VerifyProofRequest,
    VerifyProofResponse,
} from "./proto";

import type { Client as BrowserClient } from "nice-grpc-web";

export class CredentialService extends ServiceBase {
    client: BrowserClient<typeof VerifiableCredentialDefinition>;

    constructor(options?: ServiceOptions) {
        super(options);

        this.client = this.createClient(VerifiableCredentialDefinition);
    }
    // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    // target: /home/runner/work/sdk/sdk/web/src/CredentialService.ts

    /** Sign and issue a verifiable credential from a submitted document.
     * The document must be a valid JSON-LD document. */
    public async issue(request: IssueRequest): Promise<IssueResponse> {
        return this.client.issue(request, {
            metadata: await this.buildMetadata(
                IssueRequest.encode(request).finish()
            ),
        });
    }
    /** Sign and issue a verifiable credential from a pre-defined template.
     * This process will also add schema validation and
     * revocation registry values to the credential. */
    public async issueFromTemplate(
        request: IssueFromTemplateRequest
    ): Promise<IssueFromTemplateResponse> {
        return this.client.issueFromTemplate(request, {
            metadata: await this.buildMetadata(
                IssueFromTemplateRequest.encode(request).finish()
            ),
        });
    }
    /** Check credential status in the revocation registry */
    public async checkStatus(
        request: CheckStatusRequest
    ): Promise<CheckStatusResponse> {
        return this.client.checkStatus(request, {
            metadata: await this.buildMetadata(
                CheckStatusRequest.encode(request).finish()
            ),
        });
    }
    /** Update credential status by setting the revocation value */
    public async updateStatus(
        request: UpdateStatusRequest
    ): Promise<UpdateStatusResponse> {
        return this.client.updateStatus(request, {
            metadata: await this.buildMetadata(
                UpdateStatusRequest.encode(request).finish()
            ),
        });
    }
    /** Create a proof from a signed document that is a valid
     * verifiable credential and contains a signature from which a proof can be derived. */
    public async createProof(
        request: CreateProofRequest
    ): Promise<CreateProofResponse> {
        return this.client.createProof(request, {
            metadata: await this.buildMetadata(
                CreateProofRequest.encode(request).finish()
            ),
        });
    }
    /** Verifies a proof by checking the signature value, and if possible schema validation,
     * revocation status, and issuer status against a trust registry */
    public async verifyProof(
        request: VerifyProofRequest
    ): Promise<VerifyProofResponse> {
        return this.client.verifyProof(request, {
            metadata: await this.buildMetadata(
                VerifyProofRequest.encode(request).finish()
            ),
        });
    }
    /** Sends a document directly to a user's email within the given ecosystem */
    public async send(request: SendRequest): Promise<SendResponse> {
        return this.client.send(request, {
            metadata: await this.buildMetadata(
                SendRequest.encode(request).finish()
            ),
        });
    }
    // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
