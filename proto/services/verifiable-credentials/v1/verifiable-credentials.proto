syntax = "proto3";
package services.verifiablecredentials.v1;

option csharp_namespace = "Trinsic.Services.VerifiableCredentials.V1";
option go_package = "github.com/trinsic-id/sdk";
option java_package = "trinsic.services.verifiablecredentials.v1";
option objc_class_prefix = "TrinsicServices";

import "services/common/v1/common.proto";

message IssueRequest {
    services.common.v1.JsonPayload document = 1;
}

message IssueResponse {
    services.common.v1.JsonPayload document = 1;
}

message IssueFromTemplateRequest {
    string template_id = 1;
    string values_json = 2;
}

message IssueFromTemplateResponse {
    string document_json = 1;
}

// Create Proof
message CreateProofRequest {
    services.common.v1.JsonPayload reveal_document = 1;
    string document_id = 2;
}

message CreateProofResponse {
    services.common.v1.JsonPayload proof_document = 1;
}

// Verify Proof
message VerifyProofRequest {
    services.common.v1.JsonPayload proof_document = 1;
}

message VerifyProofResponse {
    bool valid = 1;
}

message SendRequest {
    oneof delivery_method {
        string email = 1;
        string did_uri = 2;
        services.common.v1.JsonPayload didcomm_invitation = 3;
    }

    services.common.v1.JsonPayload document = 100;
}

message SendResponse {
    services.common.v1.ResponseStatus status = 1;
}

// request object to update the status of the revocation entry
message UpdateStatusRequest {
    // the credential status id
    string credential_status_id = 1;
    // indicates if the status is revoked
    bool revoked = 2;
}

// response object for update of status of revocation entry
message UpdateStatusResponse {
    services.common.v1.ResponseStatus status = 1;
}

// request object to update the status of the revocation entry
message CheckStatusRequest {
    // the credential status id
    string credential_status_id = 1;
}

// response object for update of status of revocation entry
message CheckStatusResponse {
    // indicates if the status is revoked
    bool revoked = 1;
}

service VerifiableCredential {
    rpc Issue(IssueRequest) returns (IssueResponse);

    rpc IssueFromTemplate(IssueFromTemplateRequest) returns (IssueFromTemplateResponse);

    // Check credential status by setting the revocation value
    rpc CheckStatus(CheckStatusRequest) returns (CheckStatusResponse);

    // Update credential status by setting the revocation value
    rpc UpdateStatus(UpdateStatusRequest) returns (UpdateStatusResponse);

    rpc CreateProof(CreateProofRequest) returns (CreateProofResponse);

    rpc VerifyProof(VerifyProofRequest) returns (VerifyProofResponse);

    rpc Send(SendRequest) returns (SendResponse);
}
