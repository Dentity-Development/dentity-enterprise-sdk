syntax = "proto3";

package services.verifiablecredentials.templates.v1;
option csharp_namespace = "Trinsic.Services.VerifiableCredentials.Templates.V1";
option java_package = "trinsic.services.verifiablecredentials.templates.v1";
option go_package = "github.com/trinsic-id/sdk";

message GetCredentialTemplateRequest {
  string id = 1;
}

message GetCredentialTemplateResponse {
  TemplateData template = 1;
}

message SearchCredentialTemplatesRequest {
  string query = 1; // SELECT * FROM c WHERE c.name = 'Diploma'
  string continuation_token = 2;
}

message SearchCredentialTemplatesResponse {
  string items_json = 1;
  bool has_more = 2;
  int32 count = 3;
  string continuation_token = 4;
}

message ListCredentialTemplatesRequest {
  string query = 1; // SELECT * FROM c WHERE c.name = 'Diploma'
  string continuation_token = 2;
}

message ListCredentialTemplatesResponse {
  repeated TemplateData templates = 1;
  bool has_more_results = 2;
  string continuation_token = 3;
}

message DeleteCredentialTemplateRequest {
  string id = 1;
}

message DeleteCredentialTemplateResponse {}

service CredentialTemplates {
  rpc Create(CreateCredentialTemplateRequest) returns (CreateCredentialTemplateResponse);
  rpc Get(GetCredentialTemplateRequest) returns (GetCredentialTemplateResponse);
  rpc List(ListCredentialTemplatesRequest) returns (ListCredentialTemplatesResponse);
  rpc Search(SearchCredentialTemplatesRequest) returns (SearchCredentialTemplatesResponse);
  rpc Delete(DeleteCredentialTemplateRequest) returns (DeleteCredentialTemplateResponse);
}

// Request to create new template
message CreateCredentialTemplateRequest {
  string name = 1;
  map<string, TemplateField> fields = 2;
  bool allow_additional_fields = 3;
}
message CreateCredentialTemplateResponse {
  TemplateData data = 1;
}

message TemplateField {
  string description = 2;
  bool optional = 3;
  FieldType type = 4;
}

enum FieldType {
  STRING = 0;
  NUMBER = 1;
  BOOL = 2;
  DATETIME = 4;
}

message GetTemplateRequest {
  string id = 1;
}
message GetTemplateResponse {
  TemplateData data = 1;
}
message ListTemplatesRequest {}
message ListTemplatesResponse {
  repeated TemplateData templates = 1;
}

message TemplateData {
  string id = 1           [json_name="id"];
  string name = 2;
  int32 version = 3;
  map<string, TemplateField> fields = 4;
  bool allow_additional_fields = 5;
  string schema_uri = 6;
  string context_uri = 7;
  string ecosystem_id = 8 [json_name="_ecosystemId"];
  string type = 9         [json_name="type"];
}