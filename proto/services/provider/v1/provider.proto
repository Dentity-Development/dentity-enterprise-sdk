syntax = "proto3";

package services.provider.v1;

option csharp_namespace = "Trinsic.Services.Provider.V1";
option go_package = "github.com/trinsic-id/sdk";
option java_package = "trinsic.services.common.v1";

import "services/common/v1/common.proto";
import "services/account/v1/account.proto";

message Invite {
    string id = 1;
    string code = 2;
    string created = 3;
    string accepted = 4;
    string expires = 5;
}

message InviteRequest {
    ParticipantType participant = 1;
    string description = 2;
    services.account.v1.AccountDetails details = 3;

    message DidCommInvitation {}
}
enum ParticipantType {
    participant_type_individual = 0;
    participant_type_organization = 1;
}

message InviteResponse {
    services.common.v1.ResponseStatus status = 1;

    string invitation_id = 10;
        
    // Invitation Code that must be passed with the account 'SignIn' request
    // to correlate this user with the invitation sent.
    string invitation_code = 11;
}

// Request details for the status of onboarding
// an individual or organization.
// The reference_id passed is the response from the
// `Onboard` method call
message InvitationStatusRequest {
    string invitation_id = 1;
}

message InvitationStatusResponse {
    enum Status {
        // Onboarding resulted in error
        Error = 0;

        // The participant has been invited
        InvitationSent = 1;

        // The participant has been onboarded
        Completed = 2;

        // The invite has expired
        Expired = 3;
    }

    Status status = 1;
    string status_details = 2;
}

message Ecosystem {
    string id = 1;
    string name = 2;
    string description = 3;
    string uri = 4;
}

message CreateEcosystemRequest {
    // Globally unique name for the Ecosystem. This name will be
    // part of the ecosystem specific URLs and namespaces.
    // Allowed characters are lowercase letters, numbers, underscore and hyphen.
    string name = 1;
    // Ecosystem description.
    // This field is optional.
    string description = 2;
    // External URL associated with your organization or ecosystem entity.
    // This field is optional
    string uri = 3;
    // The account details of the owner of the ecosystem
    services.account.v1.AccountDetails details = 4;
}

message CreateEcosystemResponse {
    // Details of the created ecosystem
    Ecosystem ecosystem = 1;
    // Account profile for auth of the owner of the ecosystem
    services.account.v1.AccountProfile profile = 2;
    // Indicates if confirmation of account is required.
    // This settings is configured globally by the server administrator.
    services.account.v1.ConfirmationMethod confirmation_method = 3;
}

message GenerateTokenRequest {
    // Optional description to identify this token
    string description = 1;
}
message GenerateTokenResponse {
    // Account authentication profile that contains unprotected token
    services.account.v1.AccountProfile profile = 1;
}

service Provider {
    // Create new ecosystem and assign the authenticated user as owner
    rpc CreateEcosystem(CreateEcosystemRequest) returns (CreateEcosystemResponse);

    // Generates an unprotected authentication token that can be used to
    // configure server side applications
    rpc GenerateToken(GenerateTokenRequest) returns (GenerateTokenResponse);

    // Invite a user to the ecosystem
    rpc Invite(InviteRequest) returns (InviteResponse);

    // Check the invitation status
    rpc InvitationStatus(InvitationStatusRequest) returns (InvitationStatusResponse);
}