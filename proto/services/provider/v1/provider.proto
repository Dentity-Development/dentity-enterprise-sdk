syntax = "proto3";

package services.provider.v1;

option csharp_namespace = "Trinsic.Services.Provider.V1";
option go_package = "services/provider/v1/provider";
option java_package = "trinsic.services.provider.v1";
option java_multiple_files = true;

import "services/account/v1/account.proto";
import "services/options/field-options.proto";

// Request to invite a participant to an ecosystem
message InviteRequest {
    // Type of participant being invited (individual/organization)
    ParticipantType participant = 1;

    // Description of invitation
    string description = 2 [(options.optional)=true];

    // Account details of invitee
    services.account.v1.AccountDetails details = 3 [(options.optional)=true];

    message DidCommInvitation {}
}

// Type of participant being invited to ecosystem
enum ParticipantType {
    // Participant is an individual
    participant_type_individual = 0;

    // Participant is an organization
    participant_type_organization = 1;
}

// Response to `InviteRequest`
message InviteResponse {
    // ID of created invitation
    string invitation_id = 10;

    // Invitation code -- must be passed back in `LoginRequest`
    string invitation_code = 11;
}

// Request details for the status of an invitation
message InvitationStatusRequest {
    // ID of invitation, received from `InviteResponse`
    string invitation_id = 1;
}

// Response to `InvitationStatusRequest`
message InvitationStatusResponse {
    enum Status {
        // Onboarding resulted in error
        Error = 0;

        // The participant has been invited
        InvitationSent = 1;

        // The participant has been onboarded
        Completed = 2;

        // The invite has expired
        Expired = 3;
    }

    // Status of invitation
    Status status = 1;

    // Human-readable string with details about invitation status
    string status_details = 2;
}

// Details of an ecosystem
message Ecosystem {
    // URN of the ecosystem
    string id = 1;

    // Globally unique name for the ecosystem
    string name = 2;

    // Ecosystem description
    string description = 3;

    // External URL associated with the organization or ecosystem entity
    string uri = 4;

    // Configured webhooks, if any
    repeated WebhookConfig webhooks = 5;
}

// Webhook configured on an ecosystem
message WebhookConfig {
    // UUID of the webhook
    string id = 1;

    // HTTPS URL to POST webhook calls to
    string destination_url = 2;

    // Events the webhook is subscribed to
    repeated string events = 4;

    // Last known status of webhook (whether or not Trinsic can successfully reach destination)
    string status = 5;
}

// A grant authorizing `actions` on a `resourceId`
message Grant {
    // the urn of the resource
    string resourceId = 1;

     // list of actions that are allowed
    repeated string actions = 2;
    
    // any child grants
    repeated Grant child_grants = 3;
}

// Request to create an ecosystem
message CreateEcosystemRequest {
    // Globally unique name for the Ecosystem. This name will be
    // part of the ecosystem-specific URLs and namespaces.
    // Allowed characters are lowercase letters, numbers, underscore and hyphen.
    // If not passed, ecosystem name will be auto-generated.
    string name = 1 [(options.optional)=true];

    // Ecosystem description
    string description = 2 [(options.optional)=true];

    // External URL associated with your organization or ecosystem entity
    string uri = 3 [(options.optional)=true];

    // The account details of the owner of the ecosystem
    services.account.v1.AccountDetails details = 4;
}

// Response to `CreateEcosystemRequest`
message CreateEcosystemResponse {
    // Details of the created ecosystem
    Ecosystem ecosystem = 1;
    // Account profile for auth of the owner of the ecosystem
    services.account.v1.AccountProfile profile = 2;
    // Indicates if confirmation of account is required.
    services.account.v1.ConfirmationMethod confirmation_method = 3;
}

// Request to update an ecosystem's metadata
message UpdateEcosystemRequest {
    // New description of the ecosystem
    string description = 1;
    // New external URL associated with the organization or ecosystem entity
    string uri = 2;
}

// Response to `UpdateEcosystemRequest`
message UpdateEcosystemResponse {
    // Current ecosystem metadata, post-update
    Ecosystem Ecosystem = 1;
}

// Request to add a webhook to an ecosystem
message AddWebhookRequest {
    // Destination to post webhook calls to.
    // Must be a reachable HTTPS URL.
    string destination_url = 1;

    // Secret string used for HMAC-SHA256 signing of webhook payloads
    // to verify that a webhook comes from Trinsic
    string secret = 2;

    // Events to subscribe to. Default is "*" (all events)
    repeated string events = 3;
}

// Response to `AddWebhookRequest`
message AddWebhookResponse {
    // Ecosystem data with new webhook
    Ecosystem ecosystem = 1;
}

// Request to delete a webhook from an ecosystem
message DeleteWebhookRequest {
    // ID of webhook to delete
    string webhook_id = 1;
}

// Response to `DeleteWebhookRequest`
message DeleteWebhookResponse {
    // Ecosystem data after removal of webhook
    Ecosystem ecosystem = 1;
}

// Request to fetch information about an ecosystem
message EcosystemInfoRequest {}

// Response to `InfoRequest`
message EcosystemInfoResponse {
    // Ecosystem corresponding to requested `ecosystem_id`
    Ecosystem ecosystem = 1;
}

// Request to generate an authentication token for the current account
message GenerateTokenRequest {
    // Description to identify this token
    string description = 1 [(options.optional)=true];
}

// Response to `GenerateTokenRequest`
message GenerateTokenResponse {
    // Account authentication profile that contains unprotected token
    services.account.v1.AccountProfile profile = 1;
}


// Request to fetch the Trinsic public key used
// to verify authentication token validity
message GetOberonKeyRequest {
}

// Response to `GetOberonKeyRequest`
message GetOberonKeyResponse {
    // Oberon Public Key as RAW base64-url encoded string
    string key = 1; 
}

// Generates an events token bound to the provided ed25519 public key.
message GetEventTokenRequest {
    // Raw public key to generate event token for
    bytes pk = 1;
}

// Response message containing a token (JWT) that can be used
// to connect directly to the message streaming architecture
message GetEventTokenResponse {
    // JWT bound to the public key provided in `GetEventTokenRequest`
    string token = 1; 
}

// Grant permissions to a resource or path in the ecosystem
message GrantAuthorizationRequest {
    oneof account {
        // Email address of account being granted permission.
        // Mutually exclusive with `walletId`.
        string email = 1;
    
        // Wallet ID of account being granted permission.
        // Mutually exclusive with `email`.
        string walletId = 2;
    }

    // Resource string that account is receiving permissions for.
    // Resources are specified as a RESTful path: /{ecoId}/{resource type}/{resource id}. `ecoId` may be omitted.
    string resource = 3; 

    // Action to authorize. Default is "*" (all)
    string action = 4; 
}


// Response to `GrantAuthorizationRequest`
message GrantAuthorizationResponse {
}

// Revoke permissions to a resource or path in the ecosystem
message RevokeAuthorizationRequest {
    oneof account {
        // Email address of account having permission revoked.
        // Mutually exclusive with `walletId`.
        string email = 1;
    
        // Wallet ID of account having permission revoked.
        // Mutually exclusive with `email`.
        string walletId = 2;
    }

     // Resource string that account is losing permissions for.
    // Resources are specified as a RESTful path: /{ecoId}/{resource type}/{resource id}. `ecoId` may be omitted.
    string resource = 3;

    // Action to revoke. Default is "*" (all)
    string action = 4; 
}

// Response to `RevokeAuthorizationRequest`
message RevokeAuthorizationResponse {
}

// Fetch list of grants that the current account has access to
// in its ecosystem
message GetAuthorizationsRequest{
}

// Response to `GetAuthorizationsRequest`
message GetAuthorizationsResponse {
    // Grants attached to account
    repeated Grant grants = 1;
}


service Provider {
    // Create new ecosystem and assign the authenticated user as owner
    rpc CreateEcosystem(CreateEcosystemRequest) returns (CreateEcosystemResponse);

    // Update an existing ecosystem
    rpc UpdateEcosystem(UpdateEcosystemRequest) returns (UpdateEcosystemResponse);

    // Grant user authorization to ecosystem resources
    rpc GrantAuthorization(GrantAuthorizationRequest) returns (GrantAuthorizationResponse);
    
    // Revoke user authorization to ecosystem resources
    rpc RevokeAuthorization(RevokeAuthorizationRequest) returns (RevokeAuthorizationResponse);

    // Retreive the list of permissions for this particular account/ecosystem
    rpc GetAuthorizations(GetAuthorizationsRequest) returns (GetAuthorizationsResponse);

    // Add a webhook endpoint to the ecosystem
    rpc AddWebhook(AddWebhookRequest) returns (AddWebhookResponse);

    // Delete a webhook endpoint from the ecosystem
    rpc DeleteWebhook(DeleteWebhookRequest) returns (DeleteWebhookResponse);

    // Get ecosystem information
    rpc EcosystemInfo(EcosystemInfoRequest) returns (EcosystemInfoResponse);

    // Generates an unprotected authentication token that can be used to
    // configure server side applications
    rpc GenerateToken(GenerateTokenRequest) returns (GenerateTokenResponse);

    // Invite a user to the ecosystem
    rpc Invite(InviteRequest) returns (InviteResponse);

    // Check the status of an invitation
    rpc InvitationStatus(InvitationStatusRequest) returns (InvitationStatusResponse);

    // Returns the public key being used to create/verify oberon tokens
    rpc GetOberonKey(GetOberonKeyRequest) returns (GetOberonKeyResponse);

    // Generate a signed token (JWT) that can be used to connect to the message bus
    rpc GetEventToken(GetEventTokenRequest) returns (GetEventTokenResponse);
}
