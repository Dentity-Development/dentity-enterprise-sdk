syntax = "proto3";

package services.provider.v1;

option csharp_namespace = "Trinsic.Services.Provider.V1";
option go_package = "services/provider/v1/provider";
option java_package = "trinsic.services.common.v1";

import "services/account/v1/account.proto";
import "services/options/field-options.proto";

message Invite {
    string id = 1;
    string code = 2;
    string created = 3;
    string accepted = 4;
    string expires = 5;
}

message InviteRequest {
    // Type of participant being invited (individual/organization)
    ParticipantType participant = 1;

    // Description of invitation
    string description = 2 [(options.optional)=true];

    // Account details of invitee
    services.account.v1.AccountDetails details = 3 [(options.optional)=true];

    message DidCommInvitation {}
}
enum ParticipantType {
    participant_type_individual = 0;
    participant_type_organization = 1;
}

message InviteResponse {
    // ID of created invitation
    string invitation_id = 10;
        
    // Invitation Code that must be passed with the account 'SignIn' request
    // to correlate this user with the invitation sent.
    string invitation_code = 11;
}

// Request details for the status of onboarding
// an individual or organization.
// The reference_id passed is the response from the
// `Onboard` method call
message InvitationStatusRequest {
    // ID of invitation
    string invitation_id = 1;
}

message InvitationStatusResponse {
    enum Status {
        // Onboarding resulted in error
        Error = 0;

        // The participant has been invited
        InvitationSent = 1;

        // The participant has been onboarded
        Completed = 2;

        // The invite has expired
        Expired = 3;
    }

    // Status of invitation
    Status status = 1;

    // Human-readable string with details about invitation status
    string status_details = 2;
}

message Ecosystem {
    // URN of the ecosystem
    string id = 1;

    // Globally unique name for the ecosystem
    string name = 2;

    // Ecosystem description
    string description = 3;

    // External URL associated with the organization or ecosystem entity
    string uri = 4;

    // Configured webhooks, if any
    repeated WebhookConfig webhooks = 5;
}

message WebhookConfig {
    // UUID of the webhook
    string id = 1;

    // Destination to post webhook calls to
    string destination_url = 2;

    // Events the webhook is subscribed to
    repeated string events = 4;

    // Whether we are able to sucessfully send events to the webhook
    string status = 5;
}

message CreateEcosystemRequest {
    // Globally unique name for the Ecosystem. This name will be
    // part of the ecosystem specific URLs and namespaces.
    // Allowed characters are lowercase letters, numbers, underscore and hyphen.
    string name = 1;
    // Ecosystem description
    string description = 2 [(options.optional)=true];
    // External URL associated with your organization or ecosystem entity
    string uri = 3 [(options.optional)=true];
    // The account details of the owner of the ecosystem
    services.account.v1.AccountDetails details = 4;
}

message CreateEcosystemResponse {
    // Details of the created ecosystem
    Ecosystem ecosystem = 1;
    // Account profile for auth of the owner of the ecosystem
    services.account.v1.AccountProfile profile = 2;
    // Indicates if confirmation of account is required.
    // This setting is configured globally by the server administrator.
    services.account.v1.ConfirmationMethod confirmation_method = 3;
}

// Request to update an ecosystem
message UpdateEcosystemRequest {
    // ID of the ecosystem to update
    string ecosystem_id = 1;

    // Description of the ecosystem
    string description = 2;

    // External URL associated with the organization or ecosystem entity
    string uri = 3;
}

// Response to `UpdateEcosystemRequest`
message UpdateEcosystemResponse {
    Ecosystem Ecosystem = 1;
}

// Request to add a webhook to an ecosystem
message AddWebhookRequest {
     // ID of ecosystem to add webhook to
    string ecosystem_id = 1;
    
    // Destination to post webhook calls to
    string destination_url = 2;

    // HMAC secret for webhook validation
    string secret = 3;

    // Events to subscribe to. Default is "*" (all events)
    repeated string events = 4;
}

// Response to `AddWebhookRequest`
message AddWebhookResponse {
     // Ecosystem with new webhook
    Ecosystem ecosystem = 1;
}

// Request to delete a webhook from an ecosystem
message DeleteWebhookRequest {
    // ID of ecosystem from which to delete webhook
    string ecosystem_id = 1;
    
    // ID of webhook to delete
    string webhook_id = 2;
}

// Response to `DeleteWebhookRequest`
message DeleteWebhookResponse {
     // Ecosystem after removal of webhook
    Ecosystem ecosystem = 1;
}

// Request to fetch information about an ecosystem
message EcosystemInfoRequest {
    // ID of ecosystem to fetch information about
    string ecosystem_id = 1;
}

// Response to `InfoRequest`
message EcosystemInfoResponse {
    // Ecosystem corresponding to requested `ecosystem_id`
    Ecosystem ecosystem = 1;
}

message GenerateTokenRequest {
    // Description to identify this token
    string description = 1 [(options.optional)=true];
}
message GenerateTokenResponse {
    // Account authentication profile that contains unprotected token
    services.account.v1.AccountProfile profile = 1;
}


// request message for GetOberonKey
message GetOberonKeyRequest {
}

// response message for GetOberonKey
message GetOberonKeyResponse {
    string key = 1; // Oberon Public Key as RAW base64 URL encoded string
}

// generates an events token bound to the provided ed25519 pk
message GetEventTokenRequest{
    bytes pk = 1; // 
}

// response message containing a token (JWT) that can be used
// to connect directly to the message streaming architecture
message GetEventTokenResponse{
    string token = 1; // a JWT bound to the PK provided in the request
}

service Provider {
    // Create new ecosystem and assign the authenticated user as owner
    rpc CreateEcosystem(CreateEcosystemRequest) returns (CreateEcosystemResponse);
    
    // Update an existing ecosystem
    rpc UpdateEcosystem(UpdateEcosystemRequest) returns (UpdateEcosystemResponse);

    // Add a webhook endpoint to the ecosystem
    rpc AddWebhook(AddWebhookRequest) returns (AddWebhookResponse);

    // Delete a webhook endpoint from the ecosystem
    rpc DeleteWebhook(DeleteWebhookRequest) returns (DeleteWebhookResponse);

    // Get ecosystem information
    rpc EcosystemInfo(EcosystemInfoRequest) returns (EcosystemInfoResponse);

    // Generates an unprotected authentication token that can be used to
    // configure server side applications
    rpc GenerateToken(GenerateTokenRequest) returns (GenerateTokenResponse);

    // Invite a user to the ecosystem
    rpc Invite(InviteRequest) returns (InviteResponse);

    // Check the invitation status
    rpc InvitationStatus(InvitationStatusRequest) returns (InvitationStatusResponse);

    // Returns the public key being used to create/verify oberon tokens
    rpc GetOberonKey(GetOberonKeyRequest) returns (GetOberonKeyResponse);

    // Generate a signed token (JWT) that can be used to connect to the message bus
    rpc GetEventToken(GetEventTokenRequest) returns (GetEventTokenResponse);
}