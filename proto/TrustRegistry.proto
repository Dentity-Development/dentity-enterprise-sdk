syntax = "proto3";
package trinsic.services;

import "CoreService.proto";

message AddGovernanceFrameworkRequest {
    GovernanceFramework governance_framework = 1;
}

message AddGovernanceFrameworkResponse {
    ResponseStatus status = 1;
}

message RemoveGovernanceFrameworkRequest {
    GovernanceFramework governance_framework = 1;
}

message RemoveGovernanceFrameworkResponse {
    ResponseStatus status = 1;
}

message ListGovernanceFrameworksRequest {}

message ListGovernanceFrameworksResponse {
    repeated GovernanceFramework governance_frameworks = 1;
}

message GovernanceFramework {
    string governance_framework_uri = 1;
    string description = 3;
}

message RegisterAuthorityRequest {
    oneof authority {
        string did_uri = 1;
        string x509_cert = 2;
    }

    string credential_type_uri = 10;
    repeated AuthorityAction action = 20;
}

message RegisterAuthorityResponse {
    ResponseStatus status = 1;

    JsonPayload authority_credential = 2;
}

message UnregisterAuthorityRequest {
    oneof authority {
        string did_uri = 1;
        string x509_cert = 2;
    }

    oneof template {
        string template_uri = 10;
        string context_uri = 11;
    }
}

message UnregisterAuthorityResponse {
    ResponseStatus status = 1;
}

message CheckAuthorityRequest {
    string authority = 1;
    // Optional. If not specified, default EGF will be used
    string trust_registry = 2;
    AuthorityAction action = 3;
    // Optional. If not specified, will return all authorized templates for this issuer
    // under the specified EGF
    string template_url = 4;
}

enum AuthorityAction {
    ISSUE = 0;
    VERIFY = 1;
}

message CheckAuthorityResponse {
    string authority = 1;
    repeated AuthorityEntry result = 2;
}

message AuthorityEntry {
    string template_url = 1;
    AuthorityAction action = 2;
}

service TrustRegistry {
    // Adds a trust registry defintion to the ecosystem
    rpc AddGovernanceFramework(AddGovernanceFrameworkRequest) returns (AddGovernanceFrameworkResponse);

    rpc RemoveGovernanceFramework(RemoveGovernanceFrameworkRequest) returns (RemoveGovernanceFrameworkResponse);

    rpc ListGovernanceFrameworks(ListGovernanceFrameworksRequest) returns (ListGovernanceFrameworksResponse);

    // Registers an authoritative issuer with a credential template
    rpc RegisterAuthority(RegisterAuthorityRequest) returns (RegisterAuthorityResponse);

    // Removes an authoritative issuer with a credential template from the trust registry
    rpc UnregisterAuthority(UnregisterAuthorityRequest) returns (UnregisterAuthorityResponse);

    rpc CheckAuthority(CheckAuthorityRequest) returns (CheckAuthorityResponse);
}