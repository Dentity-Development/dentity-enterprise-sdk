syntax = "proto3";
package trinsic.services;

import "CoreService.proto";

message AddFrameworkRequest {
    GovernanceFramework governance_framework = 1;
}

message AddFrameworkResponse {
    ResponseStatus status = 1;
}

message RemoveFrameworkRequest {
    GovernanceFramework governance_framework = 1;
}

message RemoveFrameworkResponse {
    ResponseStatus status = 1;
}

message SearchRegistryRequest {
    string query = 1; // SELECT c from c where c.type == 'GovernanceFramework'
    string continuation_token = 2;

    RequestOptions options = 5;
}

message SearchRegistryResponse {
    repeated JsonPayload items = 1;
    bool has_more = 2;
    int32 count = 3;
    string continuation_token = 4;
}

message GovernanceFramework {
    string governance_framework_uri = 1;
    string trust_registry_uri = 2;
    string description = 3;
}

message RegisterIssuerRequest {
    oneof authority {
        string did_uri = 1;
        string x509_cert = 2;
    }

    string credential_type_uri = 10;
    uint64 valid_from_utc = 11;
    uint64 valid_until_utc = 12;
    string governance_framework_uri = 20;

    RequestOptions options = 100;
}

message RegisterIssuerResponse {
    ResponseStatus status = 1;

    JsonPayload response_data = 2;
}

message RegisterVerifierRequest {
    oneof authority {
        string did_uri = 1;
        string x509_cert = 2;
    }

    string presentation_type_uri = 10;
    uint64 valid_from_utc = 11;
    uint64 valid_until_utc = 12;
    string governance_framework_uri = 20;

    RequestOptions options = 100;
}

message RegisterVerifierResponse {
    ResponseStatus status = 1;

    JsonPayload response_data = 2;
}

message UnregisterMemberRequest {
    oneof member {
        string did_uri = 1;
        string x509_cert = 2;
    }

    oneof template {
        string template_uri = 10;
        string context_uri = 11;
    }
}

message UnregisterMemberResponse {
    ResponseStatus status = 1;
}

message GetMemberStatusRequest {
    string governance_framework_uri = 1;
    MemberRole role = 2;
    // Optional. If not specified, will return all authorized templates for this issuer
    // under the specified EGF
    string credential_type_uri = 3;
}

enum RegistrationStatus {
    CURRENT = 0; // - the entity is currently authorized, as of time of the query.
    EXPIRED = 1; // - entity rights have expired.
    TERMINATED = 2; // - entity has voluntarily ceased Issuer role under the specific EGF.
    REVOKED = 3; // - entity authority under specific EGF was terminated by the governing authority.
}

enum MemberRole {
    ISSUER = 0;
    VERIFIER = 1;
}

message GetMemberStatusResponse {
    string governance_framework_uri = 1;
    oneof member {
        string did_uri = 2;
        string x509_cert = 3;
    }
    repeated MemberEntry result = 4;
}

message MemberEntry {
    string credential_type_uri = 1;
    MemberRole role = 2;
}

message FetchDataRequest {
    string governance_framework_uri = 1;
}

message FetchDataResponse {}

service TrustRegistry {
    // Adds a trust registry defintion to the ecosystem
    rpc AddFramework(AddFrameworkRequest) returns (AddFrameworkResponse);

    rpc RemoveFramework(RemoveFrameworkRequest) returns (RemoveFrameworkResponse);

    rpc SearchRegistry(SearchRegistryRequest) returns (SearchRegistryResponse);

    // Registers an authoritative issuer with a credential template
    rpc RegisterIssuer(RegisterIssuerRequest) returns (RegisterIssuerResponse);
    rpc RegisterVerifier(RegisterVerifierRequest) returns (RegisterVerifierResponse);

    // Removes an authoritative issuer with a credential template from the trust registry
    rpc UnregisterMember(UnregisterMemberRequest) returns (UnregisterMemberResponse);

    rpc GetMemberStatus(GetMemberStatusRequest) returns (GetMemberStatusResponse);

    rpc FetchData(FetchDataRequest) returns (stream FetchDataResponse);
}