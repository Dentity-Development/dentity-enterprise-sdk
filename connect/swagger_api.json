{
  "openapi": "3.0.1",
  "info": {
    "title": "Connect API",
    "version": "v1",
    "x-swaggerexclude": "External"
  },
  "servers": [
    {
      "url": "https://connect.trinsic.id",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/v1/attachments/fetch": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Exchange an Attachment Access Key (from `IdentityData.Attachments`) for the raw contents of the linked resource.\r\n            \r\nUse this API to fetch document (front, back, portrait) or other (selfie) images from a verification, if relevant.",
        "operationId": "GetAttachment",
        "parameters": [
          {
            "name": "attachmentAccessKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/network/providers": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "List all identity providers available for use",
        "operationId": "ListProviders",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListProvidersResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProvidersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProvidersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/network/identities/{phoneNumber}": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Query the availability of an identity in the Trinsic Network by phone number",
        "operationId": "IdentityLookup",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityLookupResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityLookupResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityLookupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "List Sessions created by your account",
        "operationId": "ListSessions",
        "parameters": [
          {
            "name": "OrderBy",
            "in": "query",
            "description": "The field by which sessions should be ordered",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SessionOrdering"
                }
              ],
              "example": "Created"
            },
            "example": "Created"
          },
          {
            "name": "OrderDirection",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OrderDirection"
                }
              ],
              "example": "Descending"
            },
            "example": "Descending"
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The number of items to return per page -- must be between `1` and `10`",
            "schema": {
              "maximum": 10,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "example": 10
          },
          {
            "name": "Page",
            "in": "query",
            "description": "The page number to return -- starts at `1`",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListSessionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSessionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSessionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create a Session to verify a user's identity",
        "operationId": "CreateSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSessionRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSessionRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSessionRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionId}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get a Session by its ID",
        "operationId": "GetSession",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionId}/results": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Exchange a Results Access Key for Identity Data",
        "operationId": "ExchangeResultsKey",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExchangeResultsKeyRequest"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExchangeResultsKeyRequest"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExchangeResultsKeyRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeResultsKeyResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeResultsKeyResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeResultsKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionId}/cancel": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Cancel a Session by its ID",
        "operationId": "CancelSession",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSessionResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSessionResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/sessions/{sessionId}/redact": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Redact a Session, removing all identity data from Trinsic's servers.\r\n            \r\nIdentity data that a user has chosen to save in their passkey-protected wallet will not be deleted.",
        "operationId": "RedactSession",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "line3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "fullAddress": {
            "type": "string",
            "description": "The full address as a single string"
          }
        },
        "additionalProperties": false,
        "description": "Address information for an individual"
      },
      "Attachments": {
        "type": "object",
        "properties": {
          "selfie": {
            "type": "string",
            "description": "Key to access the selfie image (if relevant) for this verification"
          },
          "documentFront": {
            "type": "string",
            "description": "Key to access the document front image (if relevant) for this verification"
          },
          "documentBack": {
            "type": "string",
            "description": "Key to access the document back image (if relevant) for this verification"
          },
          "documentPortrait": {
            "type": "string",
            "description": "Key to access the document portrait image (if relevant and available) for this verification.\r\n            \r\nSpecifically, this is a cropped version of the document front image which includes only the portrait on the document."
          }
        },
        "additionalProperties": false,
        "description": "Attachment Access Keys for attachments (eg document / selfie images)"
      },
      "CancelSessionResponse": {
        "required": [
          "session"
        ],
        "type": "object",
        "properties": {
          "session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CreateSessionRequest": {
        "type": "object",
        "properties": {
          "direct": {
            "type": "boolean",
            "description": "Whether to create this Session in Direct mode.\r\n            \r\nDirect mode is used to execute a verification against a specific identity provider.\r\nUsers will not be shown the Connect Widget; therefore, reuse of Connect credentials, selection of an identity provider, and saving a verification for future reuse\r\nare not available to the end user in direct mode.\r\n            \r\nSessions created in direct mode must be created with a `RedirectUrl` specified, and cannot be invoked using the frontend SDK at this time."
          },
          "redirectUrl": {
            "type": "string",
            "description": "The URL to redirect to after the user has completed the identity verification process.\r\n            \r\nIf `Direct` is set to `true`, this field is required."
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of allowed identity providers. If not specified, all available providers will be allowed.\r\n            \r\nIf `Direct` is `true`, this field must be set, and must have only a single entry.\r\nIf `Direct` is not specified or is `false`, this field may have any number of entries."
          },
          "disclosedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisclosedFieldsRequest"
              }
            ],
            "description": "Specific identity attributes to request. If not provided, all available attributes will be requested."
          }
        }
      },
      "CreateSessionResponse": {
        "required": [
          "session"
        ],
        "type": "object",
        "properties": {
          "session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ],
            "description": "The created Acceptance Session"
          },
          "launchUrl": {
            "type": "string",
            "description": "The URL that should be used to invoke the Acceptance Session on your user's device.\r\n            \r\nIf the Session was created in `direct` mode, you should redirect your user's browser to this URL. The frontend SDK cannot presently be used to\r\ninvoke direct mode Sessions.\r\n            \r\nIf the Session was not created in `direct` mode, you should pass this URL to your user's frontend and use the frontend SDK to invoke the Session.\r\n            \r\nThis URL is sensitive and as such can only be obtained once. If you need to obtain it again, you will need to create a new Acceptance Session.",
            "example": "https://connect.trinsic.id/api/session/launch?clientToken=..."
          }
        },
        "additionalProperties": false
      },
      "DisclosedFields": {
        "required": [
          "address",
          "country",
          "dateOfBirth",
          "documentBack",
          "documentFront",
          "documentPortrait",
          "expirationDate",
          "familyName",
          "givenName",
          "idNumber",
          "issueDate",
          "selfie"
        ],
        "type": "object",
        "properties": {
          "idNumber": {
            "type": "boolean"
          },
          "givenName": {
            "type": "boolean"
          },
          "familyName": {
            "type": "boolean"
          },
          "address": {
            "type": "boolean"
          },
          "dateOfBirth": {
            "type": "boolean"
          },
          "country": {
            "type": "boolean"
          },
          "issueDate": {
            "type": "boolean"
          },
          "expirationDate": {
            "type": "boolean"
          },
          "documentFront": {
            "type": "boolean"
          },
          "documentBack": {
            "type": "boolean"
          },
          "documentPortrait": {
            "type": "boolean"
          },
          "selfie": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DisclosedFieldsRequest": {
        "type": "object",
        "properties": {
          "idNumber": {
            "type": "boolean"
          },
          "givenName": {
            "type": "boolean"
          },
          "familyName": {
            "type": "boolean"
          },
          "address": {
            "type": "boolean"
          },
          "dateOfBirth": {
            "type": "boolean"
          },
          "country": {
            "type": "boolean"
          },
          "issueDate": {
            "type": "boolean"
          },
          "expirationDate": {
            "type": "boolean"
          },
          "documentFront": {
            "type": "boolean"
          },
          "documentBack": {
            "type": "boolean"
          },
          "documentPortrait": {
            "type": "boolean"
          },
          "selfie": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DocumentData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "issueDate": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          },
          "issuingCountry": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExchangeResultsKeyRequest": {
        "required": [
          "resultsAccessKey"
        ],
        "type": "object",
        "properties": {
          "resultsAccessKey": {
            "type": "string",
            "description": "The Results Access Key to exchange"
          }
        }
      },
      "ExchangeResultsKeyResponse": {
        "required": [
          "session"
        ],
        "type": "object",
        "properties": {
          "session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          },
          "identityData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityData"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "FailureMessage": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetSessionResponse": {
        "required": [
          "session"
        ],
        "type": "object",
        "properties": {
          "session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "IdentityData": {
        "type": "object",
        "properties": {
          "originatingProviderId": {
            "type": "string",
            "description": "The ID of the integration from which this data originated (eg \"yoti\", \"clear\")"
          },
          "person": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PersonData"
              }
            ],
            "description": "Identity data of the individual who was verified"
          },
          "document": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DocumentData"
              }
            ],
            "description": "Identity data of the document involved in verification, if relevant"
          },
          "attachments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Attachments"
              }
            ],
            "description": "Access keys for attachments (eg document/selfie images)"
          }
        },
        "additionalProperties": false
      },
      "IdentityLookupResponse": {
        "required": [
          "identityInNetwork"
        ],
        "type": "object",
        "properties": {
          "identityInNetwork": {
            "type": "boolean",
            "description": "Whether the given phone number is known to have an identity in the network."
          }
        },
        "additionalProperties": false
      },
      "Integration": {
        "required": [
          "id",
          "logoUrl",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the integration",
            "example": "yoti | clear | ..."
          },
          "name": {
            "type": "string",
            "description": "The friendly, human-readable name of the integration",
            "example": "Yoti | CLEAR | ..."
          },
          "logoUrl": {
            "type": "string",
            "description": "A URL pointing to the integration's logo"
          }
        },
        "additionalProperties": false,
        "description": "An Integration that can be specified when creating a `VerificationSession`"
      },
      "ListProvidersResponse": {
        "required": [
          "integrations"
        ],
        "type": "object",
        "properties": {
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            },
            "description": "The list of integrations available to your account"
          }
        },
        "additionalProperties": false
      },
      "ListSessionsResponse": {
        "required": [
          "more",
          "sessions",
          "total"
        ],
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of sessions tied to your account",
            "format": "int32",
            "example": 101
          },
          "more": {
            "type": "boolean",
            "description": "Whether there are additional pages of sessions to retrieve",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "OrderDirection": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "PersonData": {
        "type": "object",
        "properties": {
          "givenName": {
            "type": "string",
            "description": "Given (first) name of the individual",
            "example": "John"
          },
          "familyName": {
            "type": "string",
            "description": "Family (last) name of the individual",
            "example": "Doe"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the individual",
            "example": "Jacob"
          },
          "fullName": {
            "type": "string",
            "description": "The individual's full name as a single string.\r\n            \r\nUseful for names which do not fit into a \"first middle last\" structure.",
            "example": "John Jacob de Doe"
          },
          "nationality": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Address information for an individual"
          },
          "dateOfBirth": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Identity information for the individual being verified"
      },
      "Session": {
        "required": [
          "created",
          "disclosedFields",
          "id",
          "state",
          "updated",
          "verification"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "urn:trinsic:idvsession:678c1ff6-2178-49e7-81d2-548afb6f85ec"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionState"
              }
            ],
            "description": "The state of the session"
          },
          "failCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionFailCode"
              }
            ],
            "description": "If the session is in state `IdvFailed`, this field contains the reason for failure."
          },
          "verification": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Verification"
              }
            ],
            "description": "The underlying verification for this Session"
          },
          "disclosedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisclosedFields"
              }
            ],
            "description": "The fields that were requested to be disclosed when the Session was created"
          },
          "created": {
            "type": "integer",
            "description": "The unix timestamp, in seconds, when this session was created",
            "format": "int64",
            "example": 1722526411
          },
          "updated": {
            "type": "integer",
            "description": "The unix timestamp, in seconds, when this session's state last changed",
            "format": "int64",
            "example": 1722526722
          }
        },
        "additionalProperties": false
      },
      "SessionFailCode": {
        "enum": [
          "SessionFailNone",
          "SessionFailInternal",
          "SessionFailVerificationFailed",
          "SessionFailAuthentication",
          "SessionFailExpired",
          "SessionFailUserCanceled",
          "SessionFailRpCanceled"
        ],
        "type": "string"
      },
      "SessionOrdering": {
        "enum": [
          "Created",
          "Updated",
          "State"
        ],
        "type": "string"
      },
      "SessionState": {
        "enum": [
          "IdvCreated",
          "IdvInitiated",
          "IdvAuthenticating",
          "IdvInProgress",
          "IdvSuccess",
          "IdvFailed"
        ],
        "type": "string"
      },
      "ValidationResult": {
        "required": [
          "memberNames"
        ],
        "type": "object",
        "properties": {
          "memberNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "errorMessage": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Verification": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The identity provider that was used to perform the Verification, if any"
          },
          "failCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationFailCode"
              }
            ],
            "description": "If the Verification is in state `VerificationFailed`, this field contains the reason for failure"
          }
        },
        "additionalProperties": false,
        "description": "A Verification contained within a Session"
      },
      "VerificationFailCode": {
        "enum": [
          "VerificationFailNone",
          "VerificationFailInternal",
          "VerificationFailInvalidImage",
          "VerificationFailInauthentic",
          "VerificationFailUnsupportedDocument"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Trinsic Connect API Key",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}