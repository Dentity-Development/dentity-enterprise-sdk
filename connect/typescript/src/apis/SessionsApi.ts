/* tslint:disable */
/* eslint-disable */
/**
 * Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    CancelSessionResponse,
    CreateSessionRequest,
    CreateSessionResponse,
    ExchangeResultsKeyRequest,
    ExchangeResultsKeyResponse,
    FailureMessage,
    GetSessionResponse,
    ListSessionsResponse,
    OrderDirection,
    SessionOrdering,
    ValidationResult,
} from "../models/index";
import {
    CancelSessionResponseFromJSON,
    CancelSessionResponseToJSON,
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    CreateSessionResponseFromJSON,
    CreateSessionResponseToJSON,
    ExchangeResultsKeyRequestFromJSON,
    ExchangeResultsKeyRequestToJSON,
    ExchangeResultsKeyResponseFromJSON,
    ExchangeResultsKeyResponseToJSON,
    FailureMessageFromJSON,
    FailureMessageToJSON,
    GetSessionResponseFromJSON,
    GetSessionResponseToJSON,
    ListSessionsResponseFromJSON,
    ListSessionsResponseToJSON,
    OrderDirectionFromJSON,
    OrderDirectionToJSON,
    SessionOrderingFromJSON,
    SessionOrderingToJSON,
    ValidationResultFromJSON,
    ValidationResultToJSON,
} from "../models/index";

export interface CancelSessionRequest {
    sessionId: string;
}

export interface CreateSessionOperationRequest {
    createSessionRequest?: CreateSessionRequest;
}

export interface ExchangeResultsKeyOperationRequest {
    sessionId: string;
    exchangeResultsKeyRequest?: ExchangeResultsKeyRequest;
}

export interface GetSessionRequest {
    sessionId: string;
}

export interface ListSessionsRequest {
    orderBy?: SessionOrdering;
    orderDirection?: OrderDirection;
    pageSize?: number;
    page?: number;
}

export interface RedactSessionRequest {
    sessionId: string;
}

/**
 *
 */
export class SessionsApi extends runtime.BaseAPI {
    /**
     * Cancel a Session by its ID
     */
    async cancelSessionRaw(
        requestParameters: CancelSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CancelSessionResponse>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError(
                "sessionId",
                'Required parameter "sessionId" was null or undefined when calling cancelSession().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/sessions/{sessionId}/cancel`.replace(
                    `{${"sessionId"}}`,
                    encodeURIComponent(String(requestParameters["sessionId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CancelSessionResponseFromJSON(jsonValue),
        );
    }

    /**
     * Cancel a Session by its ID
     */
    async cancelSession(
        requestParameters: CancelSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CancelSessionResponse> {
        const response = await this.cancelSessionRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Create a Session to verify a user\'s identity
     */
    async createSessionRaw(
        requestParameters: CreateSessionOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CreateSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/sessions`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: CreateSessionRequestToJSON(
                    requestParameters["createSessionRequest"],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CreateSessionResponseFromJSON(jsonValue),
        );
    }

    /**
     * Create a Session to verify a user\'s identity
     */
    async createSession(
        requestParameters: CreateSessionOperationRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CreateSessionResponse> {
        const response = await this.createSessionRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Exchange a Results Access Key for Identity Data
     */
    async exchangeResultsKeyRaw(
        requestParameters: ExchangeResultsKeyOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ExchangeResultsKeyResponse>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError(
                "sessionId",
                'Required parameter "sessionId" was null or undefined when calling exchangeResultsKey().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/sessions/{sessionId}/results`.replace(
                    `{${"sessionId"}}`,
                    encodeURIComponent(String(requestParameters["sessionId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ExchangeResultsKeyRequestToJSON(
                    requestParameters["exchangeResultsKeyRequest"],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ExchangeResultsKeyResponseFromJSON(jsonValue),
        );
    }

    /**
     * Exchange a Results Access Key for Identity Data
     */
    async exchangeResultsKey(
        requestParameters: ExchangeResultsKeyOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ExchangeResultsKeyResponse> {
        const response = await this.exchangeResultsKeyRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Get a Session by its ID
     */
    async getSessionRaw(
        requestParameters: GetSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSessionResponse>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError(
                "sessionId",
                'Required parameter "sessionId" was null or undefined when calling getSession().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/sessions/{sessionId}`.replace(
                    `{${"sessionId"}}`,
                    encodeURIComponent(String(requestParameters["sessionId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GetSessionResponseFromJSON(jsonValue),
        );
    }

    /**
     * Get a Session by its ID
     */
    async getSession(
        requestParameters: GetSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSessionResponse> {
        const response = await this.getSessionRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * List Sessions created by your account
     */
    async listSessionsRaw(
        requestParameters: ListSessionsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ListSessionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters["orderBy"] != null) {
            queryParameters["OrderBy"] = requestParameters["orderBy"];
        }

        if (requestParameters["orderDirection"] != null) {
            queryParameters["OrderDirection"] =
                requestParameters["orderDirection"];
        }

        if (requestParameters["pageSize"] != null) {
            queryParameters["PageSize"] = requestParameters["pageSize"];
        }

        if (requestParameters["page"] != null) {
            queryParameters["Page"] = requestParameters["page"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/sessions`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ListSessionsResponseFromJSON(jsonValue),
        );
    }

    /**
     * List Sessions created by your account
     */
    async listSessions(
        requestParameters: ListSessionsRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ListSessionsResponse> {
        const response = await this.listSessionsRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Redact a Session, removing all identity data from Trinsic\'s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted.
     */
    async redactSessionRaw(
        requestParameters: RedactSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["sessionId"] == null) {
            throw new runtime.RequiredError(
                "sessionId",
                'Required parameter "sessionId" was null or undefined when calling redactSession().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/sessions/{sessionId}/redact`.replace(
                    `{${"sessionId"}}`,
                    encodeURIComponent(String(requestParameters["sessionId"])),
                ),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redact a Session, removing all identity data from Trinsic\'s servers.                Identity data that a user has chosen to save in their passkey-protected wallet will not be deleted.
     */
    async redactSession(
        requestParameters: RedactSessionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.redactSessionRaw(requestParameters, initOverrides);
    }
}
