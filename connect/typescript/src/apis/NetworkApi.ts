/* tslint:disable */
/* eslint-disable */
/**
 * Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    FailureMessage,
    IdentityLookupResponse,
    ListProvidersResponse,
    ValidationResult,
} from "../models/index";
import {
    FailureMessageFromJSON,
    FailureMessageToJSON,
    IdentityLookupResponseFromJSON,
    IdentityLookupResponseToJSON,
    ListProvidersResponseFromJSON,
    ListProvidersResponseToJSON,
    ValidationResultFromJSON,
    ValidationResultToJSON,
} from "../models/index";

export interface IdentityLookupRequest {
    phoneNumber: string;
}

/**
 *
 */
export class NetworkApi extends runtime.BaseAPI {
    /**
     * Query the availability of an identity in the Trinsic Network by phone number
     */
    async identityLookupRaw(
        requestParameters: IdentityLookupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<IdentityLookupResponse>> {
        if (requestParameters["phoneNumber"] == null) {
            throw new runtime.RequiredError(
                "phoneNumber",
                'Required parameter "phoneNumber" was null or undefined when calling identityLookup().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/network/identities/{phoneNumber}`.replace(
                    `{${"phoneNumber"}}`,
                    encodeURIComponent(
                        String(requestParameters["phoneNumber"]),
                    ),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            IdentityLookupResponseFromJSON(jsonValue),
        );
    }

    /**
     * Query the availability of an identity in the Trinsic Network by phone number
     */
    async identityLookup(
        requestParameters: IdentityLookupRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<IdentityLookupResponse> {
        const response = await this.identityLookupRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * List all identity providers available for use
     */
    async listProvidersRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ListProvidersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/api/v1/network/providers`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ListProvidersResponseFromJSON(jsonValue),
        );
    }

    /**
     * List all identity providers available for use
     */
    async listProviders(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ListProvidersResponse> {
        const response = await this.listProvidersRaw(initOverrides);
        return await response.value();
    }
}
