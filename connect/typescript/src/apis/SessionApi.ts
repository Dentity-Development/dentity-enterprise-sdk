/* tslint:disable */
/* eslint-disable */
/**
 * Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    CancelSessionResponse,
    CreateSessionRequest,
    CreateSessionResponse,
    FailureMessage,
    GetSessionResponseV1,
    ListSessionsRequest,
    ListSessionsResponseV1,
    ValidationResult,
} from "../models/index";
import {
    CancelSessionResponseFromJSON,
    CancelSessionResponseToJSON,
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    CreateSessionResponseFromJSON,
    CreateSessionResponseToJSON,
    FailureMessageFromJSON,
    FailureMessageToJSON,
    GetSessionResponseV1FromJSON,
    GetSessionResponseV1ToJSON,
    ListSessionsRequestFromJSON,
    ListSessionsRequestToJSON,
    ListSessionsResponseV1FromJSON,
    ListSessionsResponseV1ToJSON,
    ValidationResultFromJSON,
    ValidationResultToJSON,
} from "../models/index";

export interface CancelSessionAsyncRequest {
    sessionId?: string;
}

export interface CreateSessionAsyncRequest {
    createSessionRequest?: CreateSessionRequest;
}

export interface GetSessionAsyncRequest {
    sessionId?: string;
}

export interface ListSessionsAsyncRequest {
    listSessionsRequest?: ListSessionsRequest;
}

/**
 *
 */
export class SessionApi extends runtime.BaseAPI {
    /**
     */
    async cancelSessionAsyncRaw(
        requestParameters: CancelSessionAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CancelSessionResponse>> {
        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["sessionId"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/v1/sessions/cancel`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CancelSessionResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async cancelSessionAsync(
        requestParameters: CancelSessionAsyncRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CancelSessionResponse> {
        const response = await this.cancelSessionAsyncRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async createSessionAsyncRaw(
        requestParameters: CreateSessionAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<CreateSessionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/v1/sessions/create`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: CreateSessionRequestToJSON(
                    requestParameters["createSessionRequest"],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            CreateSessionResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async createSessionAsync(
        requestParameters: CreateSessionAsyncRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<CreateSessionResponse> {
        const response = await this.createSessionAsyncRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async getSessionAsyncRaw(
        requestParameters: GetSessionAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSessionResponseV1>> {
        const queryParameters: any = {};

        if (requestParameters["sessionId"] != null) {
            queryParameters["sessionId"] = requestParameters["sessionId"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/v1/sessions/get`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GetSessionResponseV1FromJSON(jsonValue),
        );
    }

    /**
     */
    async getSessionAsync(
        requestParameters: GetSessionAsyncRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSessionResponseV1> {
        const response = await this.getSessionAsyncRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async listSessionsAsyncRaw(
        requestParameters: ListSessionsAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ListSessionsResponseV1>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/v1/sessions/list`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ListSessionsRequestToJSON(
                    requestParameters["listSessionsRequest"],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ListSessionsResponseV1FromJSON(jsonValue),
        );
    }

    /**
     */
    async listSessionsAsync(
        requestParameters: ListSessionsAsyncRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ListSessionsResponseV1> {
        const response = await this.listSessionsAsyncRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}
