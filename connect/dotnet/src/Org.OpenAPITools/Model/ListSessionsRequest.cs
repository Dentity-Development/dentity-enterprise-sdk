/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ListSessionsRequest
    /// </summary>
    [DataContract(Name = "ListSessionsRequest")]
    public partial class ListSessionsRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets OrderBy
        /// </summary>
        [DataMember(Name = "orderBy", IsRequired = true, EmitDefaultValue = true)]
        public SessionOrdering OrderBy { get; set; }

        /// <summary>
        /// Gets or Sets OrderDirection
        /// </summary>
        [DataMember(Name = "orderDirection", IsRequired = true, EmitDefaultValue = true)]
        public OrderDirection OrderDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSessionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListSessionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListSessionsRequest" /> class.
        /// </summary>
        /// <param name="orderBy">orderBy (required).</param>
        /// <param name="orderDirection">orderDirection (required).</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="page">page.</param>
        public ListSessionsRequest(SessionOrdering orderBy = default(SessionOrdering), OrderDirection orderDirection = default(OrderDirection), int pageSize = default(int), int page = default(int))
        {
            this.OrderBy = orderBy;
            this.OrderDirection = orderDirection;
            this.PageSize = pageSize;
            this.Page = page;
        }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "pageSize", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListSessionsRequest {\n");
            sb.Append("  OrderBy: ").Append(OrderBy).Append("\n");
            sb.Append("  OrderDirection: ").Append(OrderDirection).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PageSize (int) maximum
            if (this.PageSize > (int)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value less than or equal to 10.", new [] { "PageSize" });
            }

            // PageSize (int) minimum
            if (this.PageSize < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 1.", new [] { "PageSize" });
            }

            // Page (int) maximum
            if (this.Page > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value less than or equal to 2147483647.", new [] { "Page" });
            }

            // Page (int) minimum
            if (this.Page < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Page, must be a value greater than or equal to 1.", new [] { "Page" });
            }

            yield break;
        }
    }

}
