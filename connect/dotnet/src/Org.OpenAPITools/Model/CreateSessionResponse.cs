/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Org.OpenAPITools.Model;

/// <summary>
/// CreateSessionResponse
/// </summary>
[DataContract(Name = "CreateSessionResponse")]
public partial class CreateSessionResponse : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="CreateSessionResponse" /> class.
    /// </summary>
    /// <param name="session">session.</param>
    public CreateSessionResponse(Session session = default(Session))
    {
        Session = session;
    }

    /// <summary>
    /// Gets or Sets Session
    /// </summary>
    [DataMember(Name = "session", EmitDefaultValue = false)]
    public Session Session { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CreateSessionResponse {\n");
        sb.Append("  Session: ").Append(Session).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
