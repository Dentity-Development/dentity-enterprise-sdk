/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISessionApiSync : IApiAccessor
{
    #region Synchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CancelSessionResponse</returns>
    CancelSessionResponse SessionCancelSession(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CancelSessionResponse</returns>
    ApiResponse<CancelSessionResponse> SessionCancelSessionWithHttpInfo(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0);
    /// <summary>
    /// 
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CreateSessionResponse</returns>
    CreateSessionResponse SessionCreateSession(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CreateSessionResponse</returns>
    ApiResponse<CreateSessionResponse> SessionCreateSessionWithHttpInfo(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0);
    /// <summary>
    /// 
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>GetSessionResponseV1</returns>
    GetSessionResponseV1 SessionGetSession(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of GetSessionResponseV1</returns>
    ApiResponse<GetSessionResponseV1> SessionGetSessionWithHttpInfo(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0);
    /// <summary>
    /// 
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ListSessionsResponseV1</returns>
    ListSessionsResponseV1 SessionListSessions(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of ListSessionsResponseV1</returns>
    ApiResponse<ListSessionsResponseV1> SessionListSessionsWithHttpInfo(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0);
    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISessionApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CancelSessionResponse</returns>
    System.Threading.Tasks.Task<CancelSessionResponse> SessionCancelSessionAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CancelSessionResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CancelSessionResponse>> SessionCancelSessionWithHttpInfoAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreateSessionResponse</returns>
    System.Threading.Tasks.Task<CreateSessionResponse> SessionCreateSessionAsync(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CreateSessionResponse>> SessionCreateSessionWithHttpInfoAsync(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSessionResponseV1</returns>
    System.Threading.Tasks.Task<GetSessionResponseV1> SessionGetSessionAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetSessionResponseV1)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetSessionResponseV1>> SessionGetSessionWithHttpInfoAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSessionsResponseV1</returns>
    System.Threading.Tasks.Task<ListSessionsResponseV1> SessionListSessionsAsync(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListSessionsResponseV1)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListSessionsResponseV1>> SessionListSessionsWithHttpInfoAsync(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISessionApi : ISessionApiSync, ISessionApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class SessionApi : ISessionApi
{
    private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionApi"/> class.
    /// </summary>
    /// <returns></returns>
    public SessionApi() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionApi"/> class.
    /// </summary>
    /// <returns></returns>
    public SessionApi(string basePath)
    {
        Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
            Org.OpenAPITools.Client.GlobalConfiguration.Instance,
            new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
        );
        Client = new Org.OpenAPITools.Client.ApiClient(Configuration.BasePath);
        AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(Configuration.BasePath);
        ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public SessionApi(Org.OpenAPITools.Client.Configuration configuration)
    {
        if (configuration == null)
        {
            throw new ArgumentNullException("configuration");
        }

        Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
            Org.OpenAPITools.Client.GlobalConfiguration.Instance,
            configuration
        );
        Client = new Org.OpenAPITools.Client.ApiClient(Configuration.BasePath);
        AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(Configuration.BasePath);
        ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SessionApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public SessionApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
    {
        Client = client ?? throw new ArgumentNullException("client");
        AsynchronousClient = asyncClient ?? throw new ArgumentNullException("asyncClient");
        Configuration = configuration ?? throw new ArgumentNullException("configuration");
        ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }

            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CancelSessionResponse</returns>
    public CancelSessionResponse SessionCancelSession(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0)
    {
        var localVarResponse = SessionCancelSessionWithHttpInfo(trinsicAuthorization, sessionId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CancelSessionResponse</returns>
    public Org.OpenAPITools.Client.ApiResponse<CancelSessionResponse> SessionCancelSessionWithHttpInfo(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0)
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionCancelSession");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (sessionId != null)
        {
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sessionId", sessionId));
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter

        localVarRequestOptions.Operation = "SessionApi.SessionCancelSession";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<CancelSessionResponse>("/v1/sessions/cancel", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionCancelSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CancelSessionResponse</returns>
    public async System.Threading.Tasks.Task<CancelSessionResponse> SessionCancelSessionAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await SessionCancelSessionWithHttpInfoAsync(trinsicAuthorization, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CancelSessionResponse)</returns>
    public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CancelSessionResponse>> SessionCancelSessionWithHttpInfoAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionCancelSession");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (sessionId != null)
        {
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sessionId", sessionId));
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter

        localVarRequestOptions.Operation = "SessionApi.SessionCancelSession";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<CancelSessionResponse>("/v1/sessions/cancel", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionCancelSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CreateSessionResponse</returns>
    public CreateSessionResponse SessionCreateSession(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0)
    {
        var localVarResponse = SessionCreateSessionWithHttpInfo(trinsicAuthorization, createSessionRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CreateSessionResponse</returns>
    public Org.OpenAPITools.Client.ApiResponse<CreateSessionResponse> SessionCreateSessionWithHttpInfo(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0)
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionCreateSession");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter
        localVarRequestOptions.Data = createSessionRequest;

        localVarRequestOptions.Operation = "SessionApi.SessionCreateSession";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<CreateSessionResponse>("/v1/sessions", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionCreateSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreateSessionResponse</returns>
    public async System.Threading.Tasks.Task<CreateSessionResponse> SessionCreateSessionAsync(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await SessionCreateSessionWithHttpInfoAsync(trinsicAuthorization, createSessionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="createSessionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateSessionResponse)</returns>
    public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateSessionResponse>> SessionCreateSessionWithHttpInfoAsync(string trinsicAuthorization, CreateSessionRequest? createSessionRequest = default(CreateSessionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionCreateSession");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter
        localVarRequestOptions.Data = createSessionRequest;

        localVarRequestOptions.Operation = "SessionApi.SessionCreateSession";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<CreateSessionResponse>("/v1/sessions", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionCreateSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>GetSessionResponseV1</returns>
    public GetSessionResponseV1 SessionGetSession(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0)
    {
        var localVarResponse = SessionGetSessionWithHttpInfo(trinsicAuthorization, sessionId);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of GetSessionResponseV1</returns>
    public Org.OpenAPITools.Client.ApiResponse<GetSessionResponseV1> SessionGetSessionWithHttpInfo(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0)
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionGetSession");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (sessionId != null)
        {
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sessionId", sessionId));
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter

        localVarRequestOptions.Operation = "SessionApi.SessionGetSession";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Get<GetSessionResponseV1>("/v1/sessions/get", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionGetSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSessionResponseV1</returns>
    public async System.Threading.Tasks.Task<GetSessionResponseV1> SessionGetSessionAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await SessionGetSessionWithHttpInfoAsync(trinsicAuthorization, sessionId, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="sessionId"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetSessionResponseV1)</returns>
    public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSessionResponseV1>> SessionGetSessionWithHttpInfoAsync(string trinsicAuthorization, string? sessionId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionGetSession");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        if (sessionId != null)
        {
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sessionId", sessionId));
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter

        localVarRequestOptions.Operation = "SessionApi.SessionGetSession";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.GetAsync<GetSessionResponseV1>("/v1/sessions/get", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionGetSession", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ListSessionsResponseV1</returns>
    public ListSessionsResponseV1 SessionListSessions(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0)
    {
        var localVarResponse = SessionListSessionsWithHttpInfo(trinsicAuthorization, listSessionsRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of ListSessionsResponseV1</returns>
    public Org.OpenAPITools.Client.ApiResponse<ListSessionsResponseV1> SessionListSessionsWithHttpInfo(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0)
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionListSessions");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter
        localVarRequestOptions.Data = listSessionsRequest;

        localVarRequestOptions.Operation = "SessionApi.SessionListSessions";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = Client.Post<ListSessionsResponseV1>("/v1/sessions/list", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionListSessions", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSessionsResponseV1</returns>
    public async System.Threading.Tasks.Task<ListSessionsResponseV1> SessionListSessionsAsync(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        var localVarResponse = await SessionListSessionsWithHttpInfoAsync(trinsicAuthorization, listSessionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  
    /// </summary>
    /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="trinsicAuthorization">Bearer token. Can be left empty on anonymous endpoints</param>
    /// <param name="listSessionsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListSessionsResponseV1)</returns>
    public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListSessionsResponseV1>> SessionListSessionsWithHttpInfoAsync(string trinsicAuthorization, ListSessionsRequest? listSessionsRequest = default(ListSessionsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
        // verify the required parameter 'trinsicAuthorization' is set
        if (trinsicAuthorization == null)
        {
            throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'trinsicAuthorization' when calling SessionApi->SessionListSessions");
        }

        var localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

        var _contentTypes = new string[] {
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new string[] {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.HeaderParameters.Add("TrinsicAuthorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trinsicAuthorization)); // header parameter
        localVarRequestOptions.Data = listSessionsRequest;

        localVarRequestOptions.Operation = "SessionApi.SessionListSessions";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // bearer authentication required
        if (!string.IsNullOrEmpty(Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<ListSessionsResponseV1>("/v1/sessions/list", localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("SessionListSessions", localVarResponse);
            if (_exception != null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
