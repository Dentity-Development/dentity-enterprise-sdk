/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Trinsic.Connect.Model;

/// <summary>
/// A Verification contained within a Session
/// </summary>
[DataContract(Name = "Verification")]
public partial class Verification
{

    /// <summary>
    /// If the Verification is in state &#x60;VerificationFailed&#x60;, this field contains the reason for failure
    /// </summary>
    /// <value>If the Verification is in state &#x60;VerificationFailed&#x60;, this field contains the reason for failure</value>
    [DataMember(Name = "failCode", EmitDefaultValue = false)]
    public VerificationFailCode? FailCode { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="Verification" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Verification() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Verification" /> class.
    /// </summary>
    /// <param name="failCode">If the Verification is in state &#x60;VerificationFailed&#x60;, this field contains the reason for failure.</param>
    /// <param name="reused">Whether the Verification was completed by reusing a Trinsic Connect identity credential (&#x60;true&#x60;) or via a fresh verification (&#x60;false&#x60;) (required).</param>
    /// <param name="disclosedFields">The fields that were requested to be disclosed when the Session for this Verification was created (required).</param>
    /// <param name="identityData">The results of the Verification. Only present if the Session&#39;s &#x60;state&#x60; is &#x60;IdvSuccess&#x60;..</param>
    public Verification(VerificationFailCode? failCode = default(VerificationFailCode?), bool reused = default(bool), DisclosedFields disclosedFields = default(DisclosedFields), IdentityData identityData = default(IdentityData))
    {
        Reused = reused;
        DisclosedFields = disclosedFields ?? throw new ArgumentNullException("disclosedFields is a required property for Verification and cannot be null");
        FailCode = failCode;
        IdentityData = identityData;
    }

    /// <summary>
    /// Whether the Verification was completed by reusing a Trinsic Connect identity credential (&#x60;true&#x60;) or via a fresh verification (&#x60;false&#x60;)
    /// </summary>
    /// <value>Whether the Verification was completed by reusing a Trinsic Connect identity credential (&#x60;true&#x60;) or via a fresh verification (&#x60;false&#x60;)</value>
    [DataMember(Name = "reused", IsRequired = true, EmitDefaultValue = true)]
    public bool Reused { get; set; }

    /// <summary>
    /// The fields that were requested to be disclosed when the Session for this Verification was created
    /// </summary>
    /// <value>The fields that were requested to be disclosed when the Session for this Verification was created</value>
    [DataMember(Name = "disclosedFields", IsRequired = true, EmitDefaultValue = true)]
    public DisclosedFields DisclosedFields { get; set; }

    /// <summary>
    /// The results of the Verification. Only present if the Session&#39;s &#x60;state&#x60; is &#x60;IdvSuccess&#x60;.
    /// </summary>
    /// <value>The results of the Verification. Only present if the Session&#39;s &#x60;state&#x60; is &#x60;IdvSuccess&#x60;.</value>
    [DataMember(Name = "identityData", EmitDefaultValue = false)]
    public IdentityData IdentityData { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Verification {\n");
        sb.Append("  FailCode: ").Append(FailCode).Append("\n");
        sb.Append("  Reused: ").Append(Reused).Append("\n");
        sb.Append("  DisclosedFields: ").Append(DisclosedFields).Append("\n");
        sb.Append("  IdentityData: ").Append(IdentityData).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }
}
