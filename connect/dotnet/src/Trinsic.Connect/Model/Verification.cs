/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Trinsic.Connect.Model;

/// <summary>
/// Verification
/// </summary>
[DataContract(Name = "Verification")]
public partial class Verification
{

    /// <summary>
    /// Gets or Sets State
    /// </summary>
    [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
    public VerificationState State { get; set; }

    /// <summary>
    /// Gets or Sets FailCode
    /// </summary>
    [DataMember(Name = "failCode", EmitDefaultValue = false)]
    public VerificationFailCode? FailCode { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="Verification" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Verification() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Verification" /> class.
    /// </summary>
    /// <param name="id">id (required).</param>
    /// <param name="state">state (required).</param>
    /// <param name="failCode">failCode.</param>
    /// <param name="reused">reused (required).</param>
    /// <param name="updated">updated (required).</param>
    /// <param name="governmentIdOptions">governmentIdOptions (required).</param>
    /// <param name="normalizedGovernmentIdData">normalizedGovernmentIdData.</param>
    public Verification(string id = default(string), VerificationState state = default(VerificationState), VerificationFailCode? failCode = default(VerificationFailCode?), bool reused = default(bool), long updated = default(long), GovernmentIDOptions governmentIdOptions = default(GovernmentIDOptions), NormalizedIdentityData normalizedGovernmentIdData = default(NormalizedIdentityData))
    {
        Id = id ?? throw new ArgumentNullException("id is a required property for Verification and cannot be null");
        State = state;
        Reused = reused;
        Updated = updated;
        GovernmentIdOptions = governmentIdOptions ?? throw new ArgumentNullException("governmentIdOptions is a required property for Verification and cannot be null");
        FailCode = failCode;
        NormalizedGovernmentIdData = normalizedGovernmentIdData;
    }

    /// <summary>
    /// Gets or Sets Id
    /// </summary>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
    public string Id { get; set; }

    /// <summary>
    /// Gets or Sets Reused
    /// </summary>
    [DataMember(Name = "reused", IsRequired = true, EmitDefaultValue = true)]
    public bool Reused { get; set; }

    /// <summary>
    /// Gets or Sets Updated
    /// </summary>
    [DataMember(Name = "updated", IsRequired = true, EmitDefaultValue = true)]
    public long Updated { get; set; }

    /// <summary>
    /// Gets or Sets GovernmentIdOptions
    /// </summary>
    [DataMember(Name = "governmentIdOptions", IsRequired = true, EmitDefaultValue = true)]
    public GovernmentIDOptions GovernmentIdOptions { get; set; }

    /// <summary>
    /// Gets or Sets NormalizedGovernmentIdData
    /// </summary>
    [DataMember(Name = "normalizedGovernmentIdData", EmitDefaultValue = false)]
    public NormalizedIdentityData NormalizedGovernmentIdData { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Verification {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  State: ").Append(State).Append("\n");
        sb.Append("  FailCode: ").Append(FailCode).Append("\n");
        sb.Append("  Reused: ").Append(Reused).Append("\n");
        sb.Append("  Updated: ").Append(Updated).Append("\n");
        sb.Append("  GovernmentIdOptions: ").Append(GovernmentIdOptions).Append("\n");
        sb.Append("  NormalizedGovernmentIdData: ").Append(NormalizedGovernmentIdData).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }
}
