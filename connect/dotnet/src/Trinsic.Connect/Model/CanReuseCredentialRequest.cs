/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Trinsic.Connect.Model;

/// <summary>
/// CanReuseCredentialRequest
/// </summary>
[DataContract(Name = "CanReuseCredentialRequest")]
public partial class CanReuseCredentialRequest
{
    /// <summary>
    /// Initializes a new instance of the <see cref="CanReuseCredentialRequest" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected CanReuseCredentialRequest() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="CanReuseCredentialRequest" /> class.
    /// </summary>
    /// <param name="phoneNumber">phoneNumber (required).</param>
    public CanReuseCredentialRequest(string phoneNumber = default(string))
    {
        PhoneNumber = phoneNumber ?? throw new ArgumentNullException("phoneNumber is a required property for CanReuseCredentialRequest and cannot be null");
    }

    /// <summary>
    /// Gets or Sets PhoneNumber
    /// </summary>
    [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
    public string PhoneNumber { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CanReuseCredentialRequest {\n");
        sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }
}
