/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Trinsic.Connect.Model;

/// <summary>
/// CreateSessionRequest
/// </summary>
[DataContract(Name = "CreateSessionRequest")]
public partial class CreateSessionRequest
{
    /// <summary>
    /// Initializes a new instance of the <see cref="CreateSessionRequest" /> class.
    /// </summary>
    /// <param name="fields">Specific identity attributes to request. If not provided, all available attributes will be requested..</param>
    public CreateSessionRequest(DisclosedFieldsRequest fields = default(DisclosedFieldsRequest))
    {
        Fields = fields;
        AdditionalProperties = new Dictionary<string, object>();
    }

    /// <summary>
    /// Specific identity attributes to request. If not provided, all available attributes will be requested.
    /// </summary>
    /// <value>Specific identity attributes to request. If not provided, all available attributes will be requested.</value>
    [DataMember(Name = "fields", EmitDefaultValue = false)]
    public DisclosedFieldsRequest Fields { get; set; }

    /// <summary>
    /// Gets or Sets additional properties
    /// </summary>
    [JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CreateSessionRequest {\n");
        sb.Append("  Fields: ").Append(Fields).Append("\n");
        sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }
}
