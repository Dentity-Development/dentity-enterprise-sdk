/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Runtime.Serialization;
using System.Text;

namespace Trinsic.Connect.Model;

/// <summary>
/// Identity information for the individual being verified
/// </summary>
[DataContract(Name = "PersonData")]
public partial class PersonData
{
    /// <summary>
    /// Initializes a new instance of the <see cref="PersonData" /> class.
    /// </summary>
    /// <param name="givenName">Given (first) name of the individual.</param>
    /// <param name="familyName">Family (last) name of the individual.</param>
    /// <param name="middleName">Middle name of the individual.</param>
    /// <param name="fullName">The individual&#39;s full name as a single string.                Useful for names which do not fit into a \&quot;first middle last\&quot; structure..</param>
    /// <param name="nationality">nationality.</param>
    /// <param name="gender">gender.</param>
    /// <param name="phoneNumber">phoneNumber.</param>
    /// <param name="address">Address information for an individual.</param>
    /// <param name="dateOfBirth">dateOfBirth.</param>
    public PersonData(string givenName = default(string), string familyName = default(string), string middleName = default(string), string fullName = default(string), string nationality = default(string), string gender = default(string), string phoneNumber = default(string), Address address = default(Address), string dateOfBirth = default(string))
    {
        GivenName = givenName;
        FamilyName = familyName;
        MiddleName = middleName;
        FullName = fullName;
        Nationality = nationality;
        Gender = gender;
        PhoneNumber = phoneNumber;
        Address = address;
        DateOfBirth = dateOfBirth;
    }

    /// <summary>
    /// Given (first) name of the individual
    /// </summary>
    /// <value>Given (first) name of the individual</value>
    /// <example>John</example>
    [DataMember(Name = "givenName", EmitDefaultValue = false)]
    public string GivenName { get; set; }

    /// <summary>
    /// Family (last) name of the individual
    /// </summary>
    /// <value>Family (last) name of the individual</value>
    /// <example>Doe</example>
    [DataMember(Name = "familyName", EmitDefaultValue = false)]
    public string FamilyName { get; set; }

    /// <summary>
    /// Middle name of the individual
    /// </summary>
    /// <value>Middle name of the individual</value>
    /// <example>Jacob</example>
    [DataMember(Name = "middleName", EmitDefaultValue = false)]
    public string MiddleName { get; set; }

    /// <summary>
    /// The individual&#39;s full name as a single string.                Useful for names which do not fit into a \&quot;first middle last\&quot; structure.
    /// </summary>
    /// <value>The individual&#39;s full name as a single string.                Useful for names which do not fit into a \&quot;first middle last\&quot; structure.</value>
    /// <example>John Jacob de Doe</example>
    [DataMember(Name = "fullName", EmitDefaultValue = false)]
    public string FullName { get; set; }

    /// <summary>
    /// Gets or Sets Nationality
    /// </summary>
    [DataMember(Name = "nationality", EmitDefaultValue = false)]
    public string Nationality { get; set; }

    /// <summary>
    /// Gets or Sets Gender
    /// </summary>
    [DataMember(Name = "gender", EmitDefaultValue = false)]
    public string Gender { get; set; }

    /// <summary>
    /// Gets or Sets PhoneNumber
    /// </summary>
    [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
    public string PhoneNumber { get; set; }

    /// <summary>
    /// Address information for an individual
    /// </summary>
    /// <value>Address information for an individual</value>
    [DataMember(Name = "address", EmitDefaultValue = false)]
    public Address Address { get; set; }

    /// <summary>
    /// Gets or Sets DateOfBirth
    /// </summary>
    [DataMember(Name = "dateOfBirth", EmitDefaultValue = false)]
    public string DateOfBirth { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PersonData {\n");
        sb.Append("  GivenName: ").Append(GivenName).Append("\n");
        sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
        sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
        sb.Append("  FullName: ").Append(FullName).Append("\n");
        sb.Append("  Nationality: ").Append(Nationality).Append("\n");
        sb.Append("  Gender: ").Append(Gender).Append("\n");
        sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
        sb.Append("  Address: ").Append(Address).Append("\n");
        sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }
}
