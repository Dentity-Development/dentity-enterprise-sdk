/*
 * Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Trinsic.Connect.Model;

/// <summary>
/// ExchangeTokenRequest
/// </summary>
[DataContract(Name = "ExchangeTokenRequest")]
public partial class ExchangeTokenRequest
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ExchangeTokenRequest" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ExchangeTokenRequest() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="ExchangeTokenRequest" /> class.
    /// </summary>
    /// <param name="token">The &#x60;exchangeToken&#x60; provided via the &#x60;exchangeToken&#x60; query parameter on your return URL (required).</param>
    public ExchangeTokenRequest(string token = default(string))
    {
        Token = token ?? throw new ArgumentNullException("token is a required property for ExchangeTokenRequest and cannot be null");
    }

    /// <summary>
    /// The &#x60;exchangeToken&#x60; provided via the &#x60;exchangeToken&#x60; query parameter on your return URL
    /// </summary>
    /// <value>The &#x60;exchangeToken&#x60; provided via the &#x60;exchangeToken&#x60; query parameter on your return URL</value>
    [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
    public string Token { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ExchangeTokenRequest {\n");
        sb.Append("  Token: ").Append(Token).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }
}
