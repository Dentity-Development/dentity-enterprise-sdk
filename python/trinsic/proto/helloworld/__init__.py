# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: helloworld.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class HelloRequest(betterproto.Message):
    """The request message containing the user's name."""

    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class HelloReply(betterproto.Message):
    """The response message containing the greetings"""

    message: str = betterproto.string_field(1)


class GreeterStub(betterproto.ServiceStub):
    async def say_hello(self, *, name: str = "") -> "HelloReply":

        request = HelloRequest()
        request.name = name

        return await self._unary_unary(
            "/helloworld.Greeter/SayHello", request, HelloReply
        )

    async def say_hello_again(self, *, name: str = "") -> "HelloReply":

        request = HelloRequest()
        request.name = name

        return await self._unary_unary(
            "/helloworld.Greeter/SayHelloAgain", request, HelloReply
        )


class GreeterBase(ServiceBase):
    async def say_hello(self, name: str) -> "HelloReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def say_hello_again(self, name: str) -> "HelloReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_say_hello(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "name": request.name,
        }

        response = await self.say_hello(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_say_hello_again(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "name": request.name,
        }

        response = await self.say_hello_again(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/helloworld.Greeter/SayHello": grpclib.const.Handler(
                self.__rpc_say_hello,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloReply,
            ),
            "/helloworld.Greeter/SayHelloAgain": grpclib.const.Handler(
                self.__rpc_say_hello_again,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloReply,
            ),
        }
