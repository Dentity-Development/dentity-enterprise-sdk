# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: services/universal-wallet/v1/universal-wallet.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class SearchRequest(betterproto.Message):
    """Request to search items in wallet"""

    # SQL Query to execute against items in wallet
    query: str = betterproto.string_field(1)
    # Token provided by previous `SearchResponse` if more data is available for
    # query
    continuation_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SearchResponse(betterproto.Message):
    """Response to `SearchRequest`"""

    # Array of query results, as JSON strings
    items: List[str] = betterproto.string_field(1)
    # Whether more results are available for this query via `continuation_token`
    has_more: bool = betterproto.bool_field(2)
    # Token to fetch next set of results via `SearchRequest`
    continuation_token: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetItemRequest(betterproto.Message):
    """Request to fetch an item from wallet"""

    # ID of item in wallet
    item_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetItemResponse(betterproto.Message):
    """Response to `GetItemRequest`"""

    # Item data as a JSON string
    item_json: str = betterproto.string_field(1)
    # Type of item specified when item was inserted into wallet
    item_type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateItemRequest(betterproto.Message):
    """Request to update item in wallet"""

    # ID of item in wallet
    item_id: str = betterproto.string_field(1)
    # Item type (ex. "VerifiableCredential")
    item_type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UpdateItemResponse(betterproto.Message):
    """Response to `UpdateItemRequest`"""

    pass


@dataclass(eq=False, repr=False)
class InsertItemRequest(betterproto.Message):
    """Request to insert a JSON document into a wallet"""

    # Document to insert; must be stringified JSON
    item_json: str = betterproto.string_field(1)
    # Item type (ex. "VerifiableCredential")
    item_type: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class InsertItemResponse(betterproto.Message):
    """Response to `InsertItemRequest`"""

    # ID of item inserted into wallet
    item_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeleteItemRequest(betterproto.Message):
    """Request to delete an item in a wallet"""

    # ID of item to delete
    item_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteItemResponse(betterproto.Message):
    """Response to `DeleteItemRequest`"""

    pass


class UniversalWalletStub(betterproto.ServiceStub):
    async def get_item(self, *, item_id: str = "") -> "GetItemResponse":

        request = GetItemRequest()
        request.item_id = item_id

        return await self._unary_unary(
            "/services.universalwallet.v1.UniversalWallet/GetItem",
            request,
            GetItemResponse,
        )

    async def search(
        self, *, query: str = "", continuation_token: str = ""
    ) -> "SearchResponse":

        request = SearchRequest()
        request.query = query
        request.continuation_token = continuation_token

        return await self._unary_unary(
            "/services.universalwallet.v1.UniversalWallet/Search",
            request,
            SearchResponse,
        )

    async def insert_item(
        self, *, item_json: str = "", item_type: str = ""
    ) -> "InsertItemResponse":

        request = InsertItemRequest()
        request.item_json = item_json
        request.item_type = item_type

        return await self._unary_unary(
            "/services.universalwallet.v1.UniversalWallet/InsertItem",
            request,
            InsertItemResponse,
        )

    async def update_item(
        self, *, item_id: str = "", item_type: str = ""
    ) -> "UpdateItemResponse":

        request = UpdateItemRequest()
        request.item_id = item_id
        request.item_type = item_type

        return await self._unary_unary(
            "/services.universalwallet.v1.UniversalWallet/UpdateItem",
            request,
            UpdateItemResponse,
        )

    async def delete_item(self, *, item_id: str = "") -> "DeleteItemResponse":

        request = DeleteItemRequest()
        request.item_id = item_id

        return await self._unary_unary(
            "/services.universalwallet.v1.UniversalWallet/DeleteItem",
            request,
            DeleteItemResponse,
        )


class UniversalWalletBase(ServiceBase):
    async def get_item(self, item_id: str) -> "GetItemResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search(self, query: str, continuation_token: str) -> "SearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def insert_item(self, item_json: str, item_type: str) -> "InsertItemResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_item(self, item_id: str, item_type: str) -> "UpdateItemResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_item(self, item_id: str) -> "DeleteItemResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_item(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "item_id": request.item_id,
        }

        response = await self.get_item(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_search(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "query": request.query,
            "continuation_token": request.continuation_token,
        }

        response = await self.search(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_insert_item(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "item_json": request.item_json,
            "item_type": request.item_type,
        }

        response = await self.insert_item(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_update_item(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "item_id": request.item_id,
            "item_type": request.item_type,
        }

        response = await self.update_item(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete_item(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "item_id": request.item_id,
        }

        response = await self.delete_item(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/services.universalwallet.v1.UniversalWallet/GetItem": grpclib.const.Handler(
                self.__rpc_get_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetItemRequest,
                GetItemResponse,
            ),
            "/services.universalwallet.v1.UniversalWallet/Search": grpclib.const.Handler(
                self.__rpc_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchRequest,
                SearchResponse,
            ),
            "/services.universalwallet.v1.UniversalWallet/InsertItem": grpclib.const.Handler(
                self.__rpc_insert_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                InsertItemRequest,
                InsertItemResponse,
            ),
            "/services.universalwallet.v1.UniversalWallet/UpdateItem": grpclib.const.Handler(
                self.__rpc_update_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateItemRequest,
                UpdateItemResponse,
            ),
            "/services.universalwallet.v1.UniversalWallet/DeleteItem": grpclib.const.Handler(
                self.__rpc_delete_item,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteItemRequest,
                DeleteItemResponse,
            ),
        }
