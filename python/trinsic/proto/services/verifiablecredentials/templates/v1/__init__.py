# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: services/verifiable-credentials/templates/v1/templates.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class FieldType(betterproto.Enum):
    """Valid types for credential fields"""

    STRING = 0
    NUMBER = 1
    BOOL = 2
    DATETIME = 4


@dataclass(eq=False, repr=False)
class GetCredentialTemplateRequest(betterproto.Message):
    """Request to fetch a template by ID"""

    # ID of template to fetch
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCredentialTemplateResponse(betterproto.Message):
    """Response to `GetCredentialTemplateRequest`"""

    # Template fetched by ID
    template: "TemplateData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SearchCredentialTemplatesRequest(betterproto.Message):
    """Request to search templates using a SQL query"""

    # SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
    query: str = betterproto.string_field(1)
    # Token provided by previous `SearchCredentialTemplatesResponse` if more data
    # is available for query
    continuation_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SearchCredentialTemplatesResponse(betterproto.Message):
    """Response to `SearchCredentialTemplatesRequest`"""

    # Raw JSON data returned from query
    items_json: str = betterproto.string_field(1)
    # Whether more results are available for this query via `continuation_token`
    has_more: bool = betterproto.bool_field(2)
    # Token to fetch next set of results via `SearchCredentialTemplatesRequest`
    continuation_token: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ListCredentialTemplatesRequest(betterproto.Message):
    """Request to list templates using a SQL query"""

    # SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
    query: str = betterproto.string_field(1)
    # Token provided by previous `ListCredentialTemplatesResponse` if more data
    # is available for query
    continuation_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListCredentialTemplatesResponse(betterproto.Message):
    """Response to `ListCredentialTemplatesRequest`"""

    # Templates found by query
    templates: List["TemplateData"] = betterproto.message_field(1)
    # Whether more results are available for this query via `continuation_token`
    has_more_results: bool = betterproto.bool_field(2)
    # Token to fetch next set of resuts via `ListCredentialTemplatesRequest`
    continuation_token: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DeleteCredentialTemplateRequest(betterproto.Message):
    """Request to delete a template by ID"""

    # ID of template to delete
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteCredentialTemplateResponse(betterproto.Message):
    """Response to `DeleteCredentialTemplateRequest`"""

    pass


@dataclass(eq=False, repr=False)
class CreateCredentialTemplateRequest(betterproto.Message):
    """Request to create a new template"""

    # Name of new template
    name: str = betterproto.string_field(1)
    # Fields which compose the template
    fields: Dict[str, "TemplateField"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # Whether credentials may be issued against this template which have fields
    # not specified in `fields`
    allow_additional_fields: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CreateCredentialTemplateResponse(betterproto.Message):
    """Response to `CreateCredentialTemplateRequest`"""

    # Created template
    data: "TemplateData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TemplateField(betterproto.Message):
    """A field defined in a template"""

    # Human-readable description of the field
    description: str = betterproto.string_field(2)
    # Whether this field may be omitted when a credential is issued against the
    # template
    optional: bool = betterproto.bool_field(3)
    # The type of the field
    type: "FieldType" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class GetTemplateRequest(betterproto.Message):
    """Unused"""

    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTemplateResponse(betterproto.Message):
    """Unused"""

    data: "TemplateData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListTemplatesRequest(betterproto.Message):
    """Unused"""

    pass


@dataclass(eq=False, repr=False)
class ListTemplatesResponse(betterproto.Message):
    """Unused"""

    templates: List["TemplateData"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TemplateData(betterproto.Message):
    """Credential Template"""

    # Template ID
    id: str = betterproto.string_field(1)
    # Template name
    name: str = betterproto.string_field(2)
    # Template version number
    version: int = betterproto.int32_field(3)
    # Fields defined for the template
    fields: Dict[str, "TemplateField"] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    # Whether credentials issued against this template may  contain fields not
    # defined by template
    allow_additional_fields: bool = betterproto.bool_field(5)
    # URI pointing to template JSON schema document
    schema_uri: str = betterproto.string_field(6)
    # URI pointing to template JSON-LD context document
    context_uri: str = betterproto.string_field(7)
    # ID of ecosystem in which template resides
    ecosystem_id: str = betterproto.string_field(8)
    # Template type (`VerifiableCredential`)
    type: str = betterproto.string_field(9)
    # ID of template creator
    created_by: str = betterproto.string_field(10)


class CredentialTemplatesStub(betterproto.ServiceStub):
    async def create(
        self, create_credential_template_request: "CreateCredentialTemplateRequest"
    ) -> "CreateCredentialTemplateResponse":
        return await self._unary_unary(
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Create",
            create_credential_template_request,
            CreateCredentialTemplateResponse,
        )

    async def get(
        self, get_credential_template_request: "GetCredentialTemplateRequest"
    ) -> "GetCredentialTemplateResponse":
        return await self._unary_unary(
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Get",
            get_credential_template_request,
            GetCredentialTemplateResponse,
        )

    async def list(
        self, list_credential_templates_request: "ListCredentialTemplatesRequest"
    ) -> "ListCredentialTemplatesResponse":
        return await self._unary_unary(
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/List",
            list_credential_templates_request,
            ListCredentialTemplatesResponse,
        )

    async def search(
        self, search_credential_templates_request: "SearchCredentialTemplatesRequest"
    ) -> "SearchCredentialTemplatesResponse":
        return await self._unary_unary(
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Search",
            search_credential_templates_request,
            SearchCredentialTemplatesResponse,
        )

    async def delete(
        self, delete_credential_template_request: "DeleteCredentialTemplateRequest"
    ) -> "DeleteCredentialTemplateResponse":
        return await self._unary_unary(
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Delete",
            delete_credential_template_request,
            DeleteCredentialTemplateResponse,
        )


class CredentialTemplatesBase(ServiceBase):
    async def create(
        self, create_credential_template_request: "CreateCredentialTemplateRequest"
    ) -> "CreateCredentialTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get(
        self, get_credential_template_request: "GetCredentialTemplateRequest"
    ) -> "GetCredentialTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list(
        self, list_credential_templates_request: "ListCredentialTemplatesRequest"
    ) -> "ListCredentialTemplatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search(
        self, search_credential_templates_request: "SearchCredentialTemplatesRequest"
    ) -> "SearchCredentialTemplatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete(
        self, delete_credential_template_request: "DeleteCredentialTemplateRequest"
    ) -> "DeleteCredentialTemplateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.create(request)
        await stream.send_message(response)

    async def __rpc_get(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.get(request)
        await stream.send_message(response)

    async def __rpc_list(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.list(request)
        await stream.send_message(response)

    async def __rpc_search(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.search(request)
        await stream.send_message(response)

    async def __rpc_delete(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()
        response = await self.delete(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Create": grpclib.const.Handler(
                self.__rpc_create,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateCredentialTemplateRequest,
                CreateCredentialTemplateResponse,
            ),
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCredentialTemplateRequest,
                GetCredentialTemplateResponse,
            ),
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/List": grpclib.const.Handler(
                self.__rpc_list,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListCredentialTemplatesRequest,
                ListCredentialTemplatesResponse,
            ),
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Search": grpclib.const.Handler(
                self.__rpc_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchCredentialTemplatesRequest,
                SearchCredentialTemplatesResponse,
            ),
            "/services.verifiablecredentials.templates.v1.CredentialTemplates/Delete": grpclib.const.Handler(
                self.__rpc_delete,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteCredentialTemplateRequest,
                DeleteCredentialTemplateResponse,
            ),
        }
