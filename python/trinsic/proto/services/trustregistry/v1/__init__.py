# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: services/trust-registry/v1/trust-registry.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


class RegistrationStatus(betterproto.Enum):
    CURRENT = 0
    EXPIRED = 1
    TERMINATED = 2
    REVOKED = 3
    NOT_FOUND = 10


@dataclass(eq=False, repr=False)
class AddFrameworkRequest(betterproto.Message):
    """Register new ecosystem governance framework"""

    governance_framework_uri: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AddFrameworkResponse(betterproto.Message):
    # Unique framework identifier
    id: str = betterproto.string_field(1)
    governing_authority: str = betterproto.string_field(2)
    trust_registry: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RemoveFrameworkRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RemoveFrameworkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SearchRegistryRequest(betterproto.Message):
    query: str = betterproto.string_field(1)
    continuation_token: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SearchRegistryResponse(betterproto.Message):
    items_json: str = betterproto.string_field(1)
    has_more: bool = betterproto.bool_field(2)
    continuation_token: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GovernanceFramework(betterproto.Message):
    governance_framework_uri: str = betterproto.string_field(1)
    trust_registry_uri: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RegisterMemberRequest(betterproto.Message):
    did_uri: str = betterproto.string_field(1, group="member")
    wallet_id: str = betterproto.string_field(3, group="member")
    email: str = betterproto.string_field(4, group="member")
    schema_uri: str = betterproto.string_field(10)
    valid_from_utc: int = betterproto.uint64_field(11)
    valid_until_utc: int = betterproto.uint64_field(12)
    # the id of the governance framework
    framework_id: str = betterproto.string_field(30)


@dataclass(eq=False, repr=False)
class RegisterMemberResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class UnregisterMemberRequest(betterproto.Message):
    did_uri: str = betterproto.string_field(1, group="member")
    wallet_id: str = betterproto.string_field(3, group="member")
    email: str = betterproto.string_field(4, group="member")
    schema_uri: str = betterproto.string_field(10)
    framework_id: str = betterproto.string_field(20)


@dataclass(eq=False, repr=False)
class UnregisterMemberResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMembershipStatusRequest(betterproto.Message):
    governance_framework_uri: str = betterproto.string_field(1)
    did_uri: str = betterproto.string_field(2, group="member")
    x509_cert: str = betterproto.string_field(3, group="member")
    schema_uri: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetMembershipStatusResponse(betterproto.Message):
    status: "RegistrationStatus" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class FetchDataRequest(betterproto.Message):
    governance_framework_uri: str = betterproto.string_field(1)
    query: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FetchDataResponse(betterproto.Message):
    response_json: str = betterproto.string_field(1)
    has_more_results: bool = betterproto.bool_field(2)
    continuation_token: str = betterproto.string_field(3)


class TrustRegistryStub(betterproto.ServiceStub):
    async def add_framework(
        self,
        *,
        governance_framework_uri: str = "",
        name: str = "",
        description: str = ""
    ) -> "AddFrameworkResponse":

        request = AddFrameworkRequest()
        request.governance_framework_uri = governance_framework_uri
        request.name = name
        request.description = description

        return await self._unary_unary(
            "/services.trustregistry.v1.TrustRegistry/AddFramework",
            request,
            AddFrameworkResponse,
        )

    async def remove_framework(self, *, id: str = "") -> "RemoveFrameworkResponse":

        request = RemoveFrameworkRequest()
        request.id = id

        return await self._unary_unary(
            "/services.trustregistry.v1.TrustRegistry/RemoveFramework",
            request,
            RemoveFrameworkResponse,
        )

    async def search_registry(
        self, *, query: str = "", continuation_token: str = ""
    ) -> "SearchRegistryResponse":

        request = SearchRegistryRequest()
        request.query = query
        request.continuation_token = continuation_token

        return await self._unary_unary(
            "/services.trustregistry.v1.TrustRegistry/SearchRegistry",
            request,
            SearchRegistryResponse,
        )

    async def register_member(
        self,
        *,
        did_uri: str = "",
        wallet_id: str = "",
        email: str = "",
        schema_uri: str = "",
        valid_from_utc: int = 0,
        valid_until_utc: int = 0,
        framework_id: str = ""
    ) -> "RegisterMemberResponse":

        request = RegisterMemberRequest()
        request.did_uri = did_uri
        request.wallet_id = wallet_id
        request.email = email
        request.schema_uri = schema_uri
        request.valid_from_utc = valid_from_utc
        request.valid_until_utc = valid_until_utc
        request.framework_id = framework_id

        return await self._unary_unary(
            "/services.trustregistry.v1.TrustRegistry/RegisterMember",
            request,
            RegisterMemberResponse,
        )

    async def unregister_member(
        self,
        *,
        did_uri: str = "",
        wallet_id: str = "",
        email: str = "",
        schema_uri: str = "",
        framework_id: str = ""
    ) -> "UnregisterMemberResponse":

        request = UnregisterMemberRequest()
        request.did_uri = did_uri
        request.wallet_id = wallet_id
        request.email = email
        request.schema_uri = schema_uri
        request.framework_id = framework_id

        return await self._unary_unary(
            "/services.trustregistry.v1.TrustRegistry/UnregisterMember",
            request,
            UnregisterMemberResponse,
        )

    async def get_membership_status(
        self,
        *,
        governance_framework_uri: str = "",
        did_uri: str = "",
        x509_cert: str = "",
        schema_uri: str = ""
    ) -> "GetMembershipStatusResponse":

        request = GetMembershipStatusRequest()
        request.governance_framework_uri = governance_framework_uri
        request.did_uri = did_uri
        request.x509_cert = x509_cert
        request.schema_uri = schema_uri

        return await self._unary_unary(
            "/services.trustregistry.v1.TrustRegistry/GetMembershipStatus",
            request,
            GetMembershipStatusResponse,
        )

    async def fetch_data(
        self, *, governance_framework_uri: str = "", query: str = ""
    ) -> AsyncIterator["FetchDataResponse"]:

        request = FetchDataRequest()
        request.governance_framework_uri = governance_framework_uri
        request.query = query

        async for response in self._unary_stream(
            "/services.trustregistry.v1.TrustRegistry/FetchData",
            request,
            FetchDataResponse,
        ):
            yield response


class TrustRegistryBase(ServiceBase):
    async def add_framework(
        self, governance_framework_uri: str, name: str, description: str
    ) -> "AddFrameworkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_framework(self, id: str) -> "RemoveFrameworkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_registry(
        self, query: str, continuation_token: str
    ) -> "SearchRegistryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register_member(
        self,
        did_uri: str,
        wallet_id: str,
        email: str,
        schema_uri: str,
        valid_from_utc: int,
        valid_until_utc: int,
        framework_id: str,
    ) -> "RegisterMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unregister_member(
        self,
        did_uri: str,
        wallet_id: str,
        email: str,
        schema_uri: str,
        framework_id: str,
    ) -> "UnregisterMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_membership_status(
        self,
        governance_framework_uri: str,
        did_uri: str,
        x509_cert: str,
        schema_uri: str,
    ) -> "GetMembershipStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_data(
        self, governance_framework_uri: str, query: str
    ) -> AsyncIterator["FetchDataResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_framework(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "governance_framework_uri": request.governance_framework_uri,
            "name": request.name,
            "description": request.description,
        }

        response = await self.add_framework(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_remove_framework(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "id": request.id,
        }

        response = await self.remove_framework(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_search_registry(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "query": request.query,
            "continuation_token": request.continuation_token,
        }

        response = await self.search_registry(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_register_member(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "did_uri": request.did_uri,
            "wallet_id": request.wallet_id,
            "email": request.email,
            "schema_uri": request.schema_uri,
            "valid_from_utc": request.valid_from_utc,
            "valid_until_utc": request.valid_until_utc,
            "framework_id": request.framework_id,
        }

        response = await self.register_member(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_unregister_member(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "did_uri": request.did_uri,
            "wallet_id": request.wallet_id,
            "email": request.email,
            "schema_uri": request.schema_uri,
            "framework_id": request.framework_id,
        }

        response = await self.unregister_member(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_get_membership_status(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "governance_framework_uri": request.governance_framework_uri,
            "did_uri": request.did_uri,
            "x509_cert": request.x509_cert,
            "schema_uri": request.schema_uri,
        }

        response = await self.get_membership_status(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_fetch_data(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "governance_framework_uri": request.governance_framework_uri,
            "query": request.query,
        }

        await self._call_rpc_handler_server_stream(
            self.fetch_data,
            stream,
            request_kwargs,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/services.trustregistry.v1.TrustRegistry/AddFramework": grpclib.const.Handler(
                self.__rpc_add_framework,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddFrameworkRequest,
                AddFrameworkResponse,
            ),
            "/services.trustregistry.v1.TrustRegistry/RemoveFramework": grpclib.const.Handler(
                self.__rpc_remove_framework,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFrameworkRequest,
                RemoveFrameworkResponse,
            ),
            "/services.trustregistry.v1.TrustRegistry/SearchRegistry": grpclib.const.Handler(
                self.__rpc_search_registry,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchRegistryRequest,
                SearchRegistryResponse,
            ),
            "/services.trustregistry.v1.TrustRegistry/RegisterMember": grpclib.const.Handler(
                self.__rpc_register_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterMemberRequest,
                RegisterMemberResponse,
            ),
            "/services.trustregistry.v1.TrustRegistry/UnregisterMember": grpclib.const.Handler(
                self.__rpc_unregister_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnregisterMemberRequest,
                UnregisterMemberResponse,
            ),
            "/services.trustregistry.v1.TrustRegistry/GetMembershipStatus": grpclib.const.Handler(
                self.__rpc_get_membership_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMembershipStatusRequest,
                GetMembershipStatusResponse,
            ),
            "/services.trustregistry.v1.TrustRegistry/FetchData": grpclib.const.Handler(
                self.__rpc_fetch_data,
                grpclib.const.Cardinality.UNARY_STREAM,
                FetchDataRequest,
                FetchDataResponse,
            ),
        }
