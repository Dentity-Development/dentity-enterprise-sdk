# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: services/provider/v1/provider.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import services.common.v1.common_pb2
import services.account.v1.account_pb2
import services.provider.v1.provider_pb2


class ProviderBase(abc.ABC):

    @abc.abstractmethod
    async def CreateEcosystem(self, stream: 'grpclib.server.Stream[services.provider.v1.provider_pb2.CreateEcosystemRequest, services.provider.v1.provider_pb2.CreateEcosystemResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GenerateToken(self, stream: 'grpclib.server.Stream[services.provider.v1.provider_pb2.GenerateTokenRequest, services.provider.v1.provider_pb2.GenerateTokenResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Invite(self, stream: 'grpclib.server.Stream[services.provider.v1.provider_pb2.InviteRequest, services.provider.v1.provider_pb2.InviteResponse]') -> None:
        pass

    @abc.abstractmethod
    async def InvitationStatus(self, stream: 'grpclib.server.Stream[services.provider.v1.provider_pb2.InvitationStatusRequest, services.provider.v1.provider_pb2.InvitationStatusResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/services.provider.v1.Provider/CreateEcosystem': grpclib.const.Handler(
                self.CreateEcosystem,
                grpclib.const.Cardinality.UNARY_UNARY,
                services.provider.v1.provider_pb2.CreateEcosystemRequest,
                services.provider.v1.provider_pb2.CreateEcosystemResponse,
            ),
            '/services.provider.v1.Provider/GenerateToken': grpclib.const.Handler(
                self.GenerateToken,
                grpclib.const.Cardinality.UNARY_UNARY,
                services.provider.v1.provider_pb2.GenerateTokenRequest,
                services.provider.v1.provider_pb2.GenerateTokenResponse,
            ),
            '/services.provider.v1.Provider/Invite': grpclib.const.Handler(
                self.Invite,
                grpclib.const.Cardinality.UNARY_UNARY,
                services.provider.v1.provider_pb2.InviteRequest,
                services.provider.v1.provider_pb2.InviteResponse,
            ),
            '/services.provider.v1.Provider/InvitationStatus': grpclib.const.Handler(
                self.InvitationStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                services.provider.v1.provider_pb2.InvitationStatusRequest,
                services.provider.v1.provider_pb2.InvitationStatusResponse,
            ),
        }


class ProviderStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateEcosystem = grpclib.client.UnaryUnaryMethod(
            channel,
            '/services.provider.v1.Provider/CreateEcosystem',
            services.provider.v1.provider_pb2.CreateEcosystemRequest,
            services.provider.v1.provider_pb2.CreateEcosystemResponse,
        )
        self.GenerateToken = grpclib.client.UnaryUnaryMethod(
            channel,
            '/services.provider.v1.Provider/GenerateToken',
            services.provider.v1.provider_pb2.GenerateTokenRequest,
            services.provider.v1.provider_pb2.GenerateTokenResponse,
        )
        self.Invite = grpclib.client.UnaryUnaryMethod(
            channel,
            '/services.provider.v1.Provider/Invite',
            services.provider.v1.provider_pb2.InviteRequest,
            services.provider.v1.provider_pb2.InviteResponse,
        )
        self.InvitationStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/services.provider.v1.Provider/InvitationStatus',
            services.provider.v1.provider_pb2.InvitationStatusRequest,
            services.provider.v1.provider_pb2.InvitationStatusResponse,
        )
