from trinsic.proto.services.universalwallet.v1 import *
from trinsic.trinsic_service import TrinsicService
from trinsic.trinsic_util import trinsic_config

# BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
# target: C:\work\sdk\python\samples\universalwallet_service_examples.py

# createUniversalWalletService() {
trinsic_service = TrinsicService(
    server_config=trinsic_config(auth_token="YOUR-AUTH-TOKEN")
)
universal_wallet_service = trinsic_service.universal_wallet
# }

# universalWalletGetItem() {
get_item_response = await universal_wallet_service.get_item(
    request=GetItemRequest(item_id="YOUR-ITEM-ID")
)
# }

# universalWalletSearch() {
search_response = await universal_wallet_service.search(
    request=SearchRequest(
        query="YOUR-QUERY", continuation_token="YOUR-CONTINUATION-TOKEN"
    )
)
# }

# universalWalletInsertItem() {
insert_item_response = await universal_wallet_service.insert_item(
    request=InsertItemRequest(item_json="YOUR-ITEM-JSON", item_type="YOUR-ITEM-TYPE")
)
# }

# universalWalletUpdateItem() {
update_item_response = await universal_wallet_service.update_item(
    request=UpdateItemRequest(item_id="YOUR-ITEM-ID", item_type="YOUR-ITEM-TYPE")
)
# }

# universalWalletDeleteItem() {
delete_item_response = await universal_wallet_service.delete_item(
    request=DeleteItemRequest(item_id="YOUR-ITEM-ID")
)
# }

# universalWalletDeleteWallet() {
delete_wallet_response = await universal_wallet_service.delete_wallet(
    request=DeleteWalletRequest(
        email="YOUR-EMAIL", wallet_id="YOUR-WALLET-ID", did_uri="YOUR-DID-URI"
    )
)
# }

# universalWalletCreateWallet() {
create_wallet_response = await universal_wallet_service.create_wallet(
    request=CreateWalletRequest(
        ecosystem_id="YOUR-ECOSYSTEM-ID", description="YOUR-DESCRIPTION"
    )
)
# }

# universalWalletGetWalletInfo() {
get_wallet_info_response = await universal_wallet_service.get_wallet_info(
    request=GetWalletInfoRequest(wallet_id="YOUR-WALLET-ID")
)
# }

# universalWalletGetMyInfo() {
get_my_info_response = await universal_wallet_service.get_my_info(
    request=GetMyInfoRequest()
)
# }

# universalWalletGenerateAuthToken() {
generate_auth_token_response = await universal_wallet_service.generate_auth_token(
    request=GenerateAuthTokenRequest(
        wallet_id="YOUR-WALLET-ID", token_description="YOUR-TOKEN-DESCRIPTION"
    )
)
# }

# universalWalletRevokeAuthToken() {
revoke_auth_token_response = await universal_wallet_service.revoke_auth_token(
    request=RevokeAuthTokenRequest(wallet_id="YOUR-WALLET-ID", token_id="YOUR-TOKEN-ID")
)
# }

# universalWalletAddExternalIdentityInit() {
add_external_identity_init_response = (
    await universal_wallet_service.add_external_identity_init(
        request=AddExternalIdentityInitRequest(
            identity="YOUR-IDENTITY", provider=IdentityProvider.UNKNOWN
        )
    )
)
# }

# universalWalletAddExternalIdentityConfirm() {
add_external_identity_confirm_response = (
    await universal_wallet_service.add_external_identity_confirm(
        request=AddExternalIdentityConfirmRequest(
            challenge="YOUR-CHALLENGE", response="YOUR-RESPONSE"
        )
    )
)
# }

# universalWalletAuthenticateInit() {
authenticate_init_response = await universal_wallet_service.authenticate_init(
    request=AuthenticateInitRequest(
        identity="YOUR-IDENTITY",
        provider=IdentityProvider.UNKNOWN,
        ecosystem_id="YOUR-ECOSYSTEM-ID",
    )
)
# }

# universalWalletAuthenticateConfirm() {
authenticate_confirm_response = await universal_wallet_service.authenticate_confirm(
    request=AuthenticateConfirmRequest(
        challenge="YOUR-CHALLENGE", response="YOUR-RESPONSE"
    )
)
# }

# universalWalletListWallets() {
list_wallets_response = await universal_wallet_service.list_wallets(
    request=ListWalletsRequest(filter="YOUR-FILTER")
)
# }

# END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
