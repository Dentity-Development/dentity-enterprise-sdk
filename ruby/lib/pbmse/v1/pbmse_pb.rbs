# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: pbmse/v1/pbmse.proto

module Pbmse
end
module Pbmse::V1
end

class Pbmse::V1::SignedMessage
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  def self.decode: (String) -> Pbmse::V1::SignedMessage

  def self.encode: (Pbmse::V1::SignedMessage) -> String

  def self.decode_json: (String, untyped kw) -> Pbmse::V1::SignedMessage

  def self.encode_json: (Pbmse::V1::SignedMessage, untyped kw) -> String

  def self.descriptor: () -> Google::Protobuf::Descriptor

  # Constants of the form Constant_1 are invalid. We've declined to type this as a result, taking a hash instead.
  def initialize: (::Hash[untyped, untyped]) -> void

  def initialize: (
    payload: String?,
    signatures: T::Array[T.nilable(Pbmse::V1::Signature)]?
  ) -> void


  def payload: () -> String

  def payload=: (String) -> void

  def clear_payload: () -> void

  def has_payload?: () -> Boolean

  def signatures: () -> T::Array[T.nilable(Pbmse::V1::Signature)]

  def signatures=: (Google::Protobuf::RepeatedField) -> void

  def clear_signatures: () -> void

  def has_signatures?: () -> Boolean

  def []: (String) -> untyped

  def []=: (String, untyped value) -> void

  def to_h: () -> ::Hash[Symbol, untyped]
end

class Pbmse::V1::Signature
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  def self.decode: (String) -> Pbmse::V1::Signature

  def self.encode: (Pbmse::V1::Signature) -> String

  def self.decode_json: (String, untyped kw) -> Pbmse::V1::Signature

  def self.encode_json: (Pbmse::V1::Signature, untyped kw) -> String

  def self.descriptor: () -> Google::Protobuf::Descriptor

  # Constants of the form Constant_1 are invalid. We've declined to type this as a result, taking a hash instead.
  def initialize: (::Hash[untyped, untyped]) -> void

  def initialize: (
    header: String?,
    signature: String?
  ) -> void


  def header: () -> String

  def header=: (String) -> void

  def clear_header: () -> void

  def has_header?: () -> Boolean

  def signature: () -> String

  def signature=: (String) -> void

  def clear_signature: () -> void

  def has_signature?: () -> Boolean

  def []: (String) -> untyped

  def []=: (String, untyped value) -> void

  def to_h: () -> ::Hash[Symbol, untyped]
end

class Pbmse::V1::SignatureHeader
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  def self.decode: (String) -> Pbmse::V1::SignatureHeader

  def self.encode: (Pbmse::V1::SignatureHeader) -> String

  def self.decode_json: (String, untyped kw) -> Pbmse::V1::SignatureHeader

  def self.encode_json: (Pbmse::V1::SignatureHeader, untyped kw) -> String

  def self.descriptor: () -> Google::Protobuf::Descriptor

  # Constants of the form Constant_1 are invalid. We've declined to type this as a result, taking a hash instead.
  def initialize: (::Hash[untyped, untyped]) -> void

  def initialize: (
    algorithm: String?,
    key_id: String?
  ) -> void


  def algorithm: () -> String

  def algorithm=: (String) -> void

  def clear_algorithm: () -> void

  def has_algorithm?: () -> Boolean

  def key_id: () -> String

  def key_id=: (String) -> void

  def clear_key_id: () -> void

  def has_key_id?: () -> Boolean

  def []: (String) -> untyped

  def []=: (String, untyped value) -> void

  def to_h: () -> ::Hash[Symbol, untyped]
end

class Pbmse::V1::EncryptedMessage
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  def self.decode: (String) -> Pbmse::V1::EncryptedMessage

  def self.encode: (Pbmse::V1::EncryptedMessage) -> String

  def self.decode_json: (String, untyped kw) -> Pbmse::V1::EncryptedMessage

  def self.encode_json: (Pbmse::V1::EncryptedMessage, untyped kw) -> String

  def self.descriptor: () -> Google::Protobuf::Descriptor

  # Constants of the form Constant_1 are invalid. We've declined to type this as a result, taking a hash instead.
  def initialize: (::Hash[untyped, untyped]) -> void

  def initialize: (
    iv: String?,
    aad: String?,
    ciphertext: String?,
    tag: String?,
    recipients: T::Array[T.nilable(Pbmse::V1::EncryptionRecipient)]?
  ) -> void


  def iv: () -> String

  def iv=: (String) -> void

  def clear_iv: () -> void

  def has_iv?: () -> Boolean

  def aad: () -> String

  def aad=: (String) -> void

  def clear_aad: () -> void

  def has_aad?: () -> Boolean

  def ciphertext: () -> String

  def ciphertext=: (String) -> void

  def clear_ciphertext: () -> void

  def has_ciphertext?: () -> Boolean

  def tag: () -> String

  def tag=: (String) -> void

  def clear_tag: () -> void

  def has_tag?: () -> Boolean

  def recipients: () -> T::Array[T.nilable(Pbmse::V1::EncryptionRecipient)]

  def recipients=: (Google::Protobuf::RepeatedField) -> void

  def clear_recipients: () -> void

  def has_recipients?: () -> Boolean

  def []: (String) -> untyped

  def []=: (String, untyped value) -> void

  def to_h: () -> ::Hash[Symbol, untyped]
end

class Pbmse::V1::EncryptionHeader
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  def self.decode: (String) -> Pbmse::V1::EncryptionHeader

  def self.encode: (Pbmse::V1::EncryptionHeader) -> String

  def self.decode_json: (String, untyped kw) -> Pbmse::V1::EncryptionHeader

  def self.encode_json: (Pbmse::V1::EncryptionHeader, untyped kw) -> String

  def self.descriptor: () -> Google::Protobuf::Descriptor

  # Constants of the form Constant_1 are invalid. We've declined to type this as a result, taking a hash instead.
  def initialize: (::Hash[untyped, untyped]) -> void

  def initialize: (
    mode: T.any(Symbol, String, Integer)?,
    algorithm: T.any(Symbol, String, Integer)?,
    key_id: String?,
    sender_key_id: String?
  ) -> void


  def mode: () -> Symbol

  def mode=: (T.any(Symbol, String, Integer)) -> void

  def clear_mode: () -> void

  def has_mode?: () -> Boolean

  def algorithm: () -> Symbol

  def algorithm=: (T.any(Symbol, String, Integer)) -> void

  def clear_algorithm: () -> void

  def has_algorithm?: () -> Boolean

  def key_id: () -> String

  def key_id=: (String) -> void

  def clear_key_id: () -> void

  def has_key_id?: () -> Boolean

  def sender_key_id: () -> String

  def sender_key_id=: (String) -> void

  def clear_sender_key_id: () -> void

  def has_sender_key_id?: () -> Boolean

  def []: (String) -> untyped

  def []=: (String, untyped value) -> void

  def to_h: () -> ::Hash[Symbol, untyped]
end

class Pbmse::V1::EncryptionRecipient
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  def self.decode: (String) -> Pbmse::V1::EncryptionRecipient

  def self.encode: (Pbmse::V1::EncryptionRecipient) -> String

  def self.decode_json: (String, untyped kw) -> Pbmse::V1::EncryptionRecipient

  def self.encode_json: (Pbmse::V1::EncryptionRecipient, untyped kw) -> String

  def self.descriptor: () -> Google::Protobuf::Descriptor

  # Constants of the form Constant_1 are invalid. We've declined to type this as a result, taking a hash instead.
  def initialize: (::Hash[untyped, untyped]) -> void

  def initialize: (
    header: T.nilable(Pbmse::V1::EncryptionHeader),
    content_encryption_key: String?
  ) -> void


  def header: () -> T.nilable(Pbmse::V1::EncryptionHeader)

  def header=: (T.nilable(Pbmse::V1::EncryptionHeader)) -> void

  def clear_header: () -> void

  def has_header?: () -> Boolean

  def content_encryption_key: () -> String

  def content_encryption_key=: (String) -> void

  def clear_content_encryption_key: () -> void

  def has_content_encryption_key?: () -> Boolean

  def []: (String) -> untyped

  def []=: (String, untyped value) -> void

  def to_h: () -> ::Hash[Symbol, untyped]
end

module Pbmse::V1::EncryptionMode
  # TODO - Not sure how to represent this
  # self::ENCRYPTION_MODE_UNSPECIFIED = T.let(0, Integer)
  self::ENCRYPTION_MODE_UNSPECIFIED = : (0, Integer)
  # TODO - Not sure how to represent this
  # self::ENCRYPTION_MODE_DIRECT = T.let(1, Integer)
  self::ENCRYPTION_MODE_DIRECT = : (1, Integer)
  # TODO - Not sure how to represent this
  # self::ENCRYPTION_MODE_CONTENT_ENCRYPTION_KEY = T.let(2, Integer)
  self::ENCRYPTION_MODE_CONTENT_ENCRYPTION_KEY = : (2, Integer)

  def self.lookup: (value: Integer) -> Symbol?

  def self.resolve: (value: Symbol) -> Integer?

  def self.descriptor: () -> ::Google::Protobuf::EnumDescriptor
end

module Pbmse::V1::EncryptionAlgorithm
  # TODO - Not sure how to represent this
  # self::ENCRYPTION_ALGORITHM_UNSPECIFIED = T.let(0, Integer)
  self::ENCRYPTION_ALGORITHM_UNSPECIFIED = : (0, Integer)
  # TODO - Not sure how to represent this
  # self::ENCRYPTION_ALGORITHM_XCHACHA20POLY1305 = T.let(1, Integer)
  self::ENCRYPTION_ALGORITHM_XCHACHA20POLY1305 = : (1, Integer)
  # TODO - Not sure how to represent this
  # self::ENCRYPTION_ALGORITHM_AES_GCM = T.let(2, Integer)
  self::ENCRYPTION_ALGORITHM_AES_GCM = : (2, Integer)

  def self.lookup: (value: Integer) -> Symbol?

  def self.resolve: (value: Symbol) -> Integer?

  def self.descriptor: () -> ::Google::Protobuf::EnumDescriptor
end
