# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: services/trust-registry/v1/trust-registry.proto for package 'services.trustregistry.v1'

require 'grpc'
require 'services/trust-registry/v1/trust-registry_pb'

module Services
  module Trustregistry
    module V1
      module TrustRegistry
        class Service

          include ::GRPC::GenericService

          self.marshal_class_method = :encode
          self.unmarshal_class_method = :decode
          self.service_name = 'services.trustregistry.v1.TrustRegistry'

          # Add a governance framework to the ecosystem
          rpc :AddFramework, ::Services::Trustregistry::V1::AddFrameworkRequest, ::Services::Trustregistry::V1::AddFrameworkResponse
          # Remove a governance framework from the ecosystem
          rpc :RemoveFramework, ::Services::Trustregistry::V1::RemoveFrameworkRequest, ::Services::Trustregistry::V1::RemoveFrameworkResponse
          # Search the ecosystem's governance frameworks
          rpc :SearchRegistry, ::Services::Trustregistry::V1::SearchRegistryRequest, ::Services::Trustregistry::V1::SearchRegistryResponse
          # Register an authoritative issuer for a credential schema
          rpc :RegisterMember, ::Services::Trustregistry::V1::RegisterMemberRequest, ::Services::Trustregistry::V1::RegisterMemberResponse
          # Removes an authoritative issuer for a credential schema from the trust registry
          rpc :UnregisterMember, ::Services::Trustregistry::V1::UnregisterMemberRequest, ::Services::Trustregistry::V1::UnregisterMemberResponse
          # Fetch the membership status of an issuer for a given credential schema in a trust registry
          rpc :GetMembershipStatus, ::Services::Trustregistry::V1::GetMembershipStatusRequest, ::Services::Trustregistry::V1::GetMembershipStatusResponse
          # Not implemented.
          rpc :FetchData, ::Services::Trustregistry::V1::FetchDataRequest, stream(::Services::Trustregistry::V1::FetchDataResponse)
        end

        Stub = Service.rpc_stub_class
      end
    end
  end
end
