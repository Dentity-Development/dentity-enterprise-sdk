# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: services/provider/v1/provider.proto
# typed: strict

module Services::Provider::V1::Provider
  class Service
    include GRPC::GenericService
  end

  class Stub < GRPC::ClientStub
    sig do
      params(
        host: String,
        creds: T.any(GRPC::Core::ChannelCredentials, Symbol),
        kw: T.untyped,
      ).void
    end
    def initialize(host, creds, **kw)
    end

    sig do
      params(
        request: Services::Provider::V1::CreateEcosystemRequest
      ).returns(Services::Provider::V1::CreateEcosystemResponse)
    end
    def create_ecosystem(request)
    end

    sig do
      params(
        request: Services::Provider::V1::UpdateEcosystemRequest
      ).returns(Services::Provider::V1::UpdateEcosystemResponse)
    end
    def update_ecosystem(request)
    end

    sig do
      params(
        request: Services::Provider::V1::GrantAuthorizationRequest
      ).returns(Services::Provider::V1::GrantAuthorizationResponse)
    end
    def grant_authorization(request)
    end

    sig do
      params(
        request: Services::Provider::V1::RevokeAuthorizationRequest
      ).returns(Services::Provider::V1::RevokeAuthorizationResponse)
    end
    def revoke_authorization(request)
    end

    sig do
      params(
        request: Services::Provider::V1::GetAuthorizationsRequest
      ).returns(Services::Provider::V1::GetAuthorizationsResponse)
    end
    def get_authorizations(request)
    end

    sig do
      params(
        request: Services::Provider::V1::AddWebhookRequest
      ).returns(Services::Provider::V1::AddWebhookResponse)
    end
    def add_webhook(request)
    end

    sig do
      params(
        request: Services::Provider::V1::DeleteWebhookRequest
      ).returns(Services::Provider::V1::DeleteWebhookResponse)
    end
    def delete_webhook(request)
    end

    sig do
      params(
        request: Services::Provider::V1::EcosystemInfoRequest
      ).returns(Services::Provider::V1::EcosystemInfoResponse)
    end
    def ecosystem_info(request)
    end

    sig do
      params(
        request: Services::Provider::V1::GenerateTokenRequest
      ).returns(Services::Provider::V1::GenerateTokenResponse)
    end
    def generate_token(request)
    end

    sig do
      params(
        request: Services::Provider::V1::InviteRequest
      ).returns(Services::Provider::V1::InviteResponse)
    end
    def invite(request)
    end

    sig do
      params(
        request: Services::Provider::V1::InvitationStatusRequest
      ).returns(Services::Provider::V1::InvitationStatusResponse)
    end
    def invitation_status(request)
    end

    sig do
      params(
        request: Services::Provider::V1::GetOberonKeyRequest
      ).returns(Services::Provider::V1::GetOberonKeyResponse)
    end
    def get_oberon_key(request)
    end

    sig do
      params(
        request: Services::Provider::V1::GetEventTokenRequest
      ).returns(Services::Provider::V1::GetEventTokenResponse)
    end
    def get_event_token(request)
    end

    sig do
      params(
        request: Services::Provider::V1::RetrieveDomainVerificationRecordRequest
      ).returns(Services::Provider::V1::RetrieveDomainVerificationRecordResponse)
    end
    def retrieve_domain_verification_record(request)
    end

    sig do
      params(
        request: Services::Provider::V1::RefreshDomainVerificationStatusRequest
      ).returns(Services::Provider::V1::RefreshDomainVerificationStatusResponse)
    end
    def refresh_domain_verification_status(request)
    end

    sig do
      params(
        request: Services::Provider::V1::SearchWalletConfigurationsRequest
      ).returns(Services::Provider::V1::SearchWalletConfigurationResponse)
    end
    def search_wallet_configurations(request)
    end
  end
end
