# frozen_string_literal: true

require 'services/service_base'

module Trinsic
  # Provider Service wrapper
  class ProviderService < ServiceBase
    def initialize(service_options = nil)
      super(service_options)
      if @service_options.server_use_tls
        channel_creds = GRPC::Core::ChannelCredentials.new
        @client = Provider::Provider::Stub.new(url_string, channel_creds)
      else
        @client = Provider::Provider::Stub.new(url_string, :this_channel_is_insecure)
      end
    end

    def create_ecosystem(request = nil)
      request ||= Provider::CreateEcosystemRequest.new
      response = create_ecosystem_call(request)
      encoded_profile = Base64.urlsafe_encode64(Account::AccountProfile.encode(response.profile))
      unless response.profile.protection.enabled
        @service_options.auth_token = encoded_profile
        @token_provider.save(encoded_profile)
      end
      response
    end

    def create_ecosystem_call(request)
      if request.name.empty? && (request.details.nil? || request.details.email.empty?)
        @client.create_ecosystem(request)
      else
        @client.create_ecosystem(request, metadata: metadata(request))
      end
    end

    # BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    # target: /home/runner/work/sdk/sdk/ruby/lib/services/provider_service.rb
    nil

    #  Update an existing ecosystem
    # @param [UpdateEcosystemRequest] request
    # @return [Services::Provider::V1::UpdateEcosystemResponse]
    def update_ecosystem(request)
      @client.update_ecosystem(request, metadata: metadata(request))
    end

    #  Grant user authorization to ecosystem resources
    # @param [GrantAuthorizationRequest] request
    # @return [Services::Provider::V1::GrantAuthorizationResponse]
    def grant_authorization(request)
      @client.grant_authorization(request, metadata: metadata(request))
    end

    #  Revoke user authorization to ecosystem resources
    # @param [RevokeAuthorizationRequest] request
    # @return [Services::Provider::V1::RevokeAuthorizationResponse]
    def revoke_authorization(request)
      @client.revoke_authorization(request, metadata: metadata(request))
    end

    #  Retrieve the list of permissions for this particular account/ecosystem
    # @param [GetAuthorizationsRequest] request
    # @return [Services::Provider::V1::GetAuthorizationsResponse]
    def get_authorizations(request)
      @client.get_authorizations(request, metadata: metadata(request))
    end

    #  Add a webhook endpoint to the ecosystem
    # @param [AddWebhookRequest] request
    # @return [Services::Provider::V1::AddWebhookResponse]
    def add_webhook(request)
      @client.add_webhook(request, metadata: metadata(request))
    end

    #  Delete a webhook endpoint from the ecosystem
    # @param [DeleteWebhookRequest] request
    # @return [Services::Provider::V1::DeleteWebhookResponse]
    def delete_webhook(request)
      @client.delete_webhook(request, metadata: metadata(request))
    end

    #  Get ecosystem information
    # @param [EcosystemInfoRequest] request
    # @return [Services::Provider::V1::EcosystemInfoResponse]
    def ecosystem_info(request)
      @client.ecosystem_info(request, metadata: metadata(request))
    end

    #  Get public ecosystem information about *any* ecosystem
    # @param [GetPublicEcosystemInfoRequest] request
    # @return [Services::Provider::V1::GetPublicEcosystemInfoResponse]
    def get_public_ecosystem_info(request)
      @client.get_public_ecosystem_info(request, metadata: metadata(request))
    end

    #  Generates an unprotected authentication token that can be used to
    # configure server side applications
    # @param [GenerateTokenRequest] request
    # @return [Services::Provider::V1::GenerateTokenResponse]
    def generate_token(request)
      @client.generate_token(request, metadata: metadata(request))
    end

    #  Invite a user to the ecosystem
    # @param [InviteRequest] request
    # @return [Services::Provider::V1::InviteResponse]
    def invite(request)
      @client.invite(request, metadata: metadata(request))
    end

    #  Check the status of an invitation
    # @param [InvitationStatusRequest] request
    # @return [Services::Provider::V1::InvitationStatusResponse]
    def invitation_status(request)
      @client.invitation_status(request, metadata: metadata(request))
    end

    #  Returns the public key being used to create/verify oberon tokens
    # @param [GetOberonKeyRequest] request
    # @return [Services::Provider::V1::GetOberonKeyResponse]
    def get_oberon_key(request)
      @client.get_oberon_key(request, metadata: metadata(request))
    end

    #  Generate a signed token (JWT) that can be used to connect to the message bus
    # @param [GetEventTokenRequest] request
    # @return [Services::Provider::V1::GetEventTokenResponse]
    def get_event_token(request)
      @client.get_event_token(request, metadata: metadata(request))
    end

    #  Upgrade a wallet's DID from `did:key` to another method
    # @param [UpgradeDidRequest] request
    # @return [Services::Provider::V1::UpgradeDidResponse]
    def upgrade_did(request)
      @client.upgrade_did(request, metadata: metadata(request))
    end

    #  Retrieve a random hash TXT that can be used to verify domain ownership
    # @param [RetrieveDomainVerificationRecordRequest] request
    # @return [Services::Provider::V1::RetrieveDomainVerificationRecordResponse]
    def retrieve_domain_verification_record
      request = Services::Provider::V1::RetrieveDomainVerificationRecordRequest.new
      @client.retrieve_domain_verification_record(request, metadata: metadata(request))
    end

    #  Call to verify domain
    # @param [RefreshDomainVerificationStatusRequest] request
    # @return [Services::Provider::V1::RefreshDomainVerificationStatusResponse]
    def refresh_domain_verification_status(request)
      @client.refresh_domain_verification_status(request, metadata: metadata(request))
    end

    #  Search for issuers/providers/verifiers in the current ecosystem
    # @param [SearchWalletConfigurationsRequest] request
    # @return [Services::Provider::V1::SearchWalletConfigurationResponse]
    def search_wallet_configurations(request)
      @client.search_wallet_configurations(request, metadata: metadata(request))
    end

    # END Code generated by protoc-gen-trinsic. DO NOT EDIT.
  end
end
