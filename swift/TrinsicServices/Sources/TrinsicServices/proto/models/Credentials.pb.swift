// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/Credentials.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Trinsic_Services_aCredential {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var issuerID: String = String()

  var receipientID: String = String()

  var credentialTemplateID: String = String()

  var attributes: [Trinsic_Services_Attribute] = []

  var state: Trinsic_Services_aCredential.State = .created

  var issuanceDate: Int64 = 0

  var expirationDate: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum State: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case created // = 0
    case issued // = 1
    case received // = 2
    case expired // = 3
    case revoked // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .created
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .created
      case 1: self = .issued
      case 2: self = .received
      case 3: self = .expired
      case 4: self = .revoked
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .created: return 0
      case .issued: return 1
      case .received: return 2
      case .expired: return 3
      case .revoked: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Trinsic_Services_aCredential.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Trinsic_Services_aCredential.State] = [
    .created,
    .issued,
    .received,
    .expired,
    .revoked,
  ]
}

#endif  // swift(>=4.2)

struct Trinsic_Services_IssueCredentialRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var issuerID: String = String()

  var receipientID: String = String()

  var credentialTemplateID: String = String()

  var attributes: [Trinsic_Services_Attribute] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Trinsic_Services_IssueCredentialResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var credential: Trinsic_Services_aCredential {
    get {return _credential ?? Trinsic_Services_aCredential()}
    set {_credential = newValue}
  }
  /// Returns true if `credential` has been explicitly set.
  var hasCredential: Bool {return self._credential != nil}
  /// Clears the value of `credential`. Subsequent reads from it will return its default value.
  mutating func clearCredential() {self._credential = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _credential: Trinsic_Services_aCredential? = nil
}

struct Trinsic_Services_ListCredentialRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Trinsic_Services_ListCredentialResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var credentials: [Trinsic_Services_aCredential] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "trinsic.services"

extension Trinsic_Services_aCredential: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".aCredential"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "issuerId"),
    7: .same(proto: "receipientId"),
    3: .same(proto: "credentialTemplateId"),
    8: .same(proto: "attributes"),
    4: .same(proto: "state"),
    5: .same(proto: "issuanceDate"),
    6: .same(proto: "expirationDate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.issuerID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.credentialTemplateID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.issuanceDate) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.expirationDate) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.receipientID) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.attributes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.issuerID.isEmpty {
      try visitor.visitSingularStringField(value: self.issuerID, fieldNumber: 2)
    }
    if !self.credentialTemplateID.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialTemplateID, fieldNumber: 3)
    }
    if self.state != .created {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    if self.issuanceDate != 0 {
      try visitor.visitSingularInt64Field(value: self.issuanceDate, fieldNumber: 5)
    }
    if self.expirationDate != 0 {
      try visitor.visitSingularInt64Field(value: self.expirationDate, fieldNumber: 6)
    }
    if !self.receipientID.isEmpty {
      try visitor.visitSingularStringField(value: self.receipientID, fieldNumber: 7)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trinsic_Services_aCredential, rhs: Trinsic_Services_aCredential) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.issuerID != rhs.issuerID {return false}
    if lhs.receipientID != rhs.receipientID {return false}
    if lhs.credentialTemplateID != rhs.credentialTemplateID {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.state != rhs.state {return false}
    if lhs.issuanceDate != rhs.issuanceDate {return false}
    if lhs.expirationDate != rhs.expirationDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trinsic_Services_aCredential.State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "created"),
    1: .same(proto: "issued"),
    2: .same(proto: "received"),
    3: .same(proto: "expired"),
    4: .same(proto: "revoked"),
  ]
}

extension Trinsic_Services_IssueCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IssueCredentialRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "issuerId"),
    2: .same(proto: "receipientId"),
    3: .same(proto: "credentialTemplateId"),
    4: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.issuerID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.receipientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.credentialTemplateID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.attributes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.issuerID.isEmpty {
      try visitor.visitSingularStringField(value: self.issuerID, fieldNumber: 1)
    }
    if !self.receipientID.isEmpty {
      try visitor.visitSingularStringField(value: self.receipientID, fieldNumber: 2)
    }
    if !self.credentialTemplateID.isEmpty {
      try visitor.visitSingularStringField(value: self.credentialTemplateID, fieldNumber: 3)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trinsic_Services_IssueCredentialRequest, rhs: Trinsic_Services_IssueCredentialRequest) -> Bool {
    if lhs.issuerID != rhs.issuerID {return false}
    if lhs.receipientID != rhs.receipientID {return false}
    if lhs.credentialTemplateID != rhs.credentialTemplateID {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trinsic_Services_IssueCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IssueCredentialResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credential"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._credential) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._credential {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trinsic_Services_IssueCredentialResponse, rhs: Trinsic_Services_IssueCredentialResponse) -> Bool {
    if lhs._credential != rhs._credential {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trinsic_Services_ListCredentialRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListCredentialRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trinsic_Services_ListCredentialRequest, rhs: Trinsic_Services_ListCredentialRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Trinsic_Services_ListCredentialResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListCredentialResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credentials"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.credentials) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.credentials.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.credentials, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trinsic_Services_ListCredentialResponse, rhs: Trinsic_Services_ListCredentialResponse) -> Bool {
    if lhs.credentials != rhs.credentials {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
