name: "npm: Build, Package, Publish"

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      packageVersion:
        description: "Package Version"
        required: true
        default: "1.0.0"
  release:
    types: [published, prereleased]

jobs:
  build_test:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ "node", "web" ]
    defaults:
      run:
        working-directory: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: arduino/setup-protoc@v1
      - run: |
          curl -L https://github.com/grpc/grpc-web/releases/download/1.2.1/protoc-gen-grpc-web-1.2.1-linux-x86_64 --output protoc-gen-grpc-web
          chmod +x protoc-gen-grpc-web
          $env:PATH += ":$PWD"

          npm install
          npm run build
        shell: pwsh

  publish_npm:
    name: Publish to NPM
    if: |
      github.event_name == 'release' &&
      github.event.action == 'published' &&
      github.release.draft == false &&
      github.release.prerelease == false
    runs-on: ubuntu-latest
    needs: [build_test]
    strategy:
      matrix:
        target: [ "node", "web" ]
    defaults:
      run:
        working-directory: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: actions/setup-node@v2
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - uses: arduino/setup-protoc@v1
      - run: |
          curl -L https://github.com/grpc/grpc-web/releases/download/1.2.1/protoc-gen-grpc-web-1.2.1-linux-x86_64 --output protoc-gen-grpc-web
          chmod +x protoc-gen-grpc-web
          $env:PATH += ":$PWD"

          npm install
          npm run build
        shell: pwsh
      - name: Generate Package Version
        run: |
          packageVersion=$(node -p -e "require('./package.json').version")
          version=${manualVersion:-packageVersion}
          version="v"$version

          export SDK_PACKAGE_VERSION=$version
        env:
          manualVersion: ${{ github.event.release.tag_name }}
      # - run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
      - run: npm publish $SDK_PACKAGE_VERSION --no-git-tag-version --yes --no-verify-access --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
