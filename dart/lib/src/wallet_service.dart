import 'package:trinsic_dart/src/proto/sdk/options/v1/options.pb.dart';
import 'package:trinsic_dart/src/proto/services/universal-wallet/v1/universal-wallet.pbgrpc.dart';
import 'package:trinsic_dart/src/service_base.dart';

class WalletService extends ServiceBase {
  late UniversalWalletClient client;

  WalletService(ServiceOptions? serverOptions) : super(serverOptions) {
    client = UniversalWalletClient(super.channel);
  }

  Future<SearchResponse> search(SearchRequest request) async {
    if (request.query == "") {
      request.query = "SELECT c.id, c.type, c.data FROM c OFFSET 0 LIMIT 100";
    }
    return await client.search(request);
  }
// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: ..\sdk\dart\lib\src\wallet_service.dart

    Future<GetItemResponse> getItem(GetItemRequest request) async {
         ///  Retrieve an item from the wallet with a given item identifier
        return await client.getItem(request, options: buildMetadata(request));
    }
    Future<InsertItemResponse> insertItem(InsertItemRequest request) async {
         ///  Insert an item into the wallet
        return await client.insertItem(request, options: buildMetadata(request));
    }
    Future<UpdateItemResponse> updateItem(UpdateItemRequest request) async {
         ///  Update an item in the wallet
        return await client.updateItem(request, options: buildMetadata(request));
    }
    Future<DeleteItemResponse> deleteItem(DeleteItemRequest request) async {
         ///  Delete an item from the wallet permanently
        return await client.deleteItem(request, options: buildMetadata(request));
    }
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
