import 'dart:convert';

import 'package:trinsic_dart/src/proto/sdk/options/v1/options.pb.dart';
import 'package:trinsic_dart/src/proto/services/provider/v1/provider.pbgrpc.dart';
import 'package:trinsic_dart/src/service_base.dart';

class ProviderService extends ServiceBase {
  late ProviderClient client;

  ProviderService(TrinsicOptions? serverOptions) : super(serverOptions) {
    client = ProviderClient(super.channel);
  }

  Future<CreateEcosystemResponse> createEcosystem(
      {CreateEcosystemRequest? request}) async {
    request = request ?? CreateEcosystemRequest();
    var authenticate =
        (request.name.isNotEmpty || request.details.email.isNotEmpty);
    var metadata =
        authenticate ? buildMetadata(request: request) : buildMetadata();
    var response =
        await client.createEcosystem(request, options: await metadata);
    if (!response.profile.protection.enabled) {
      serviceOptions.authToken =
          Base64Encoder.urlSafe().convert(response.profile.writeToBuffer());
    }
    return response;
  }

// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: /home/runner/work/sdk/sdk/dart/lib/src/provider_service.dart

  @Deprecated('This will be removed June 1, 2023')
  Future<UpdateEcosystemResponse> updateEcosystem(
      UpdateEcosystemRequest request) async {
    /// This will be removed June 1, 2023
    /// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
    /// DEPRECATED, will be removed June 1st 2023

    return client.updateEcosystem(request,
        options: await buildMetadata(request: request));
  }

  @Deprecated('This will be removed June 1, 2023')
  Future<EcosystemInfoResponse> ecosystemInfo(
      EcosystemInfoRequest request) async {
    /// This will be removed June 1, 2023
    /// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
    /// DEPRECATED, will be removed June 1st 2023

    return client.ecosystemInfo(request,
        options: await buildMetadata(request: request));
  }

  @Deprecated('This will be removed June 1, 2023')
  Future<GetPublicEcosystemInfoResponse> getPublicEcosystemInfo(
      GetPublicEcosystemInfoRequest request) async {
    /// This will be removed June 1, 2023
    /// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
    /// DEPRECATED, will be removed June 1st 2023

    return client.getPublicEcosystemInfo(request,
        options: await buildMetadata());
  }

  Future<GetOberonKeyResponse> getOberonKey() async {
    ///  Returns the public key being used to create/verify oberon tokens
    var request = GetOberonKeyRequest();
    return client.getOberonKey(request, options: await buildMetadata());
  }

  Future<UpgradeDidResponse> upgradeDID(UpgradeDidRequest request) async {
    ///  Upgrade a wallet's DID from `did:key` to another method

    return client.upgradeDID(request,
        options: await buildMetadata(request: request));
  }

  Future<RetrieveDomainVerificationRecordResponse>
      retrieveDomainVerificationRecord() async {
    ///  Retrieve a random hash TXT that can be used to verify domain ownership
    var request = RetrieveDomainVerificationRecordRequest();
    return client.retrieveDomainVerificationRecord(request,
        options: await buildMetadata(request: request));
  }

  Future<RefreshDomainVerificationStatusResponse>
      refreshDomainVerificationStatus() async {
    ///  Call to verify domain
    var request = RefreshDomainVerificationStatusRequest();
    return client.refreshDomainVerificationStatus(request,
        options: await buildMetadata(request: request));
  }

  Future<SearchWalletConfigurationResponse> searchWalletConfigurations(
      SearchWalletConfigurationsRequest request) async {
    ///  Search for issuers/providers/verifiers in the current ecosystem

    return client.searchWalletConfigurations(request,
        options: await buildMetadata(request: request));
  }
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
