import 'package:grpc/service_api.dart';
import 'package:trinsic_dart/src/proto/sdk/options/v1/options.pb.dart';
import 'package:trinsic_dart/src/proto/services/provider/v1/provider.pbgrpc.dart';
import 'package:trinsic_dart/src/service_base.dart';

class ProviderService extends ServiceBase {
  late ProviderClient client;

  ProviderService(ServiceOptions? serverOptions) : super(serverOptions) {
    client = ProviderClient(super.channel,
        interceptors: [MetadataInterceptor(this)]);
  }

  Future<CreateEcosystemResponse> createEcosystem(
      {CreateEcosystemRequest? request}) async {
    request = request ?? CreateEcosystemRequest();
    var metadata = {
      'authenticateCall':
          (request.name.isNotEmpty || request.details.email.isNotEmpty)
              .toString()
    };
    return await client.createEcosystem(request,
        options: CallOptions(metadata: metadata));
  }

// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
