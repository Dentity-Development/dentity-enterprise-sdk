import 'package:grpc/service_api.dart' as $grpc;
import 'package:trinsic_dart/src/proto/sdk/options/v1/options.pb.dart';
import 'package:trinsic_dart/src/proto/services/trust-registry/v1/trust-registry.pbgrpc.dart';
import 'package:trinsic_dart/src/service_base.dart';

class TrustRegistryService extends ServiceBase {
  late TrustRegistryClient client;

  TrustRegistryService(ServiceOptions? serverOptions) : super(serverOptions) {
    client = TrustRegistryClient(super.channel,
        interceptors: [MetadataInterceptor(this)]);
  }

  Future<SearchRegistryResponse> searchTrustRegistry(
      {SearchRegistryRequest? request}) async {
    request ??= SearchRegistryRequest();
    if (request.query == "") {
      request.query = "SELECT * FROM c OFFSET 0 LIMIT 100";
    }
    return await client.searchRegistry(request);
  }

// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dart\lib\src\trustregistry_service.dart

    Future<AddFrameworkResponse> addFramework(AddFrameworkRequest request) async {
         ///  Adds a trust registry defintion to the ecosystem
        return await client.addFramework(request);
    }
    Future<RemoveFrameworkResponse> removeFramework(RemoveFrameworkRequest request) async {
        
        return await client.removeFramework(request);
    }
    Future<SearchRegistryResponse> searchRegistry(SearchRegistryRequest request) async {
        
        return await client.searchRegistry(request);
    }
    Future<RegisterMemberResponse> registerMember(RegisterMemberRequest request) async {
         ///  Registers an authoritative issuer with a credential template
        return await client.registerMember(request);
    }
    Future<UnregisterMemberResponse> unregisterMember(UnregisterMemberRequest request) async {
         ///  Removes an authoritative issuer with a credential template from the trust registry
        return await client.unregisterMember(request);
    }
    Future<GetMembershipStatusResponse> getMembershipStatus(GetMembershipStatusRequest request) async {
        
        return await client.getMembershipStatus(request);
    }
    $grpc.ResponseStream<FetchDataResponse> fetchData(FetchDataRequest request)  {
        
        return  client.fetchData(request);
    }

// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
