package trinsic.services

import com.google.protobuf.InvalidProtocolBufferException
import trinsic.okapi.DidException
import trinsic.sdk.options.v1.Options
import trinsic.services.provider.v1.*
import trinsic.services.provider.v1.ProviderGrpcKt
import java.util.*

class ProviderServiceKt(options: Options.ServiceOptions.Builder?) : ServiceBase(options) {
  var stub = ProviderGrpcKt.ProviderCoroutineStub(this.channel)

  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun createEcosystem(request: CreateEcosystemRequest): CreateEcosystemResponse {
      var response: CreateEcosystemResponse
    if (request.name.isNullOrBlank() && request.details.email.isNullOrBlank()) {
      response = stub.createEcosystem(request)
    }
    response = withMetadata(stub, request).createEcosystem(request)
      this.optionsBuilder.authToken = Base64.getUrlEncoder().encodeToString(response.profile.toByteArray())
      return response
  }
  // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
  // target: ..\sdk\java\src\main\java\trinsic\services\providerServiceKt.kt

  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun updateEcosystem(request: UpdateEcosystemRequest): UpdateEcosystemResponse {
    /** Update an existing ecosystem */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).updateEcosystem(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun grantAuthorization(request: GrantAuthorizationRequest): GrantAuthorizationResponse {
    /** Grant authorization to ecosystem resources */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).grantAuthorization(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun revokeAuthorization(
      request: RevokeAuthorizationRequest
  ): RevokeAuthorizationResponse {
    /** Revoke authorization to ecosystem resources */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).revokeAuthorization(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun getAuthorizations(request: GetAuthorizationsRequest): GetAuthorizationsResponse {
    /** Retreive the list of permissions for this particular account/ecosystem */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).getAuthorizations(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun addWebhook(request: AddWebhookRequest): AddWebhookResponse {
    /** Add a webhook endpoint to the ecosystem */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).addWebhook(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun deleteWebhook(request: DeleteWebhookRequest): DeleteWebhookResponse {
    /** Delete a webhook endpoint from the ecosystem */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).deleteWebhook(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun ecosystemInfo(request: EcosystemInfoRequest): EcosystemInfoResponse {
    /** Get ecosystem information */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).ecosystemInfo(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun generateToken(request: GenerateTokenRequest): GenerateTokenResponse {
    /**
     * Generates an unprotected authentication token that can be used to configure server side
     * applications
     */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).generateToken(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun invite(request: InviteRequest): InviteResponse {
    /** Invite a user to the ecosystem */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).invite(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun invitationStatus(request: InvitationStatusRequest): InvitationStatusResponse {
    /** Check the invitation status */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).invitationStatus(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun getOberonKey(request: GetOberonKeyRequest): GetOberonKeyResponse {
    /** Returns the public key being used to create/verify oberon tokens */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).getOberonKey(request)
  }
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun getEventToken(request: GetEventTokenRequest): GetEventTokenResponse {
    /** Generate a signed token (JWT) that can be used to connect to the message bus */
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).getEventToken(request)
  }
  // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
