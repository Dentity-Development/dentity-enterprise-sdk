package trinsic.services

import com.google.protobuf.InvalidProtocolBufferException
import trinsic.sdk.options.v1.Options
import trinsic.services.universalwallet.v1.*
import trinsic.services.universalwallet.v1.UniversalWalletGrpcKt

class WalletServiceKt(options: Options.TrinsicOptions.Builder?) : ServiceBase(options) {
  var stub = UniversalWalletGrpcKt.UniversalWalletCoroutineStub(this.channel)

  @Throws(InvalidProtocolBufferException::class)
  suspend fun searchWallet(request: SearchRequest): SearchResponse {
    var request2 = request
    if (request2.query.isBlank())
        request2 =
            SearchRequest.newBuilder(request2)
                .setQuery("SELECT c.id, c.type, c.data FROM c OFFSET 0 LIMIT 100")
                .build()
    return search(request2)
  }

  // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
  // target: /home/runner/work/sdk/sdk/java/src/main/java/trinsic/services/WalletServiceKt.kt

  @Throws(InvalidProtocolBufferException::class)
  suspend fun getItem(request: GetItemRequest): GetItemResponse {
    /** Retrieve an item from the wallet with a given item identifier */
    return withMetadata(stub, request).getItem(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun search(request: SearchRequest): SearchResponse {
    /** Search the wallet using a SQL syntax */
    return withMetadata(stub, request).search(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun insertItem(request: InsertItemRequest): InsertItemResponse {
    /** Insert an item into the wallet */
    return withMetadata(stub, request).insertItem(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun updateItem(request: UpdateItemRequest): UpdateItemResponse {
    /** Update an item in the wallet */
    return withMetadata(stub, request).updateItem(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun deleteItem(request: DeleteItemRequest): DeleteItemResponse {
    /** Delete an item from the wallet permanently */
    return withMetadata(stub, request).deleteItem(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun deleteWallet(request: DeleteWalletRequest): DeleteWalletResponse {
    /** Delete a wallet and its credentials */
    return withMetadata(stub, request).deleteWallet(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun createWallet(request: CreateWalletRequest): CreateWalletResponse {
    /** Create a new wallet and generate an auth token for access */
    return withMetadata(stub, request).createWallet(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun getWalletInfo(request: GetWalletInfoRequest): GetWalletInfoResponse {
    /** Retrieve wallet details and configuration */
    return withMetadata(stub, request).getWalletInfo(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun getMyInfo(): GetMyInfoResponse {
    /** Retrieve wallet details and configuration about the currently authenticated wallet */
    val request = GetMyInfoRequest.newBuilder().build()
    return withMetadata(stub, request).getMyInfo(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun generateAuthToken(request: GenerateAuthTokenRequest): GenerateAuthTokenResponse {
    /**
     * Generate new token for a given wallet and add it to the collection of known auth tokens. This
     * endpoint requires authentication and will return a new token ID and auth token. Use this
     * endpoint if you want to authorize another device, without having to share your existing auth
     * token.
     */
    return withMetadata(stub, request).generateAuthToken(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun revokeAuthToken(request: RevokeAuthTokenRequest): RevokeAuthTokenResponse {
    /**
     * Revokes a previously issued auth token and updates the collection of known auth tokens. This
     * endpoint requires authentication.
     */
    return withMetadata(stub, request).revokeAuthToken(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun addExternalIdentityInit(
      request: AddExternalIdentityInitRequest
  ): AddExternalIdentityInitResponse {
    /**
     * Add new external identity to the current wallet, such as email, sms, ethereum address, etc.
     * This identity ownership must be confirmed using `AddIdentityConfirm` via OTP, signature, etc.
     */
    return withMetadata(stub, request).addExternalIdentityInit(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun addExternalIdentityConfirm(
      request: AddExternalIdentityConfirmRequest
  ): AddExternalIdentityConfirmResponse {
    /** Confirm identity added to the current wallet using `AddExternalIdentityInit` */
    return withMetadata(stub, request).addExternalIdentityConfirm(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun removeExternalIdentity(
      request: RemoveExternalIdentityRequest
  ): RemoveExternalIdentityResponse {
    /** Remove an external identity from the current wallet */
    return withMetadata(stub, request).removeExternalIdentity(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun authenticateInit(request: AuthenticateInitRequest): AuthenticateInitResponse {
    /**
     * Sign-in to an already existing wallet, using an identity added that was previously registered
     * This endpoint does not require authentication, and will return a challenge to be signed or
     * verified
     */
    return withMetadata(stub, request).authenticateInit(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun authenticateConfirm(
      request: AuthenticateConfirmRequest
  ): AuthenticateConfirmResponse {
    /** Confirm sign-in to an already existing wallet and return authentication token */
    return withMetadata(stub, request).authenticateConfirm(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun authenticateResendCode(
      request: AuthenticateResendCodeRequest
  ): AuthenticateResendCodeResponse {
    /** Resend previous authentication code */
    return withMetadata(stub, request).authenticateResendCode(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun listWallets(request: ListWalletsRequest): ListWalletsResponse {
    /** List all wallets in the ecosystem */
    return withMetadata(stub, request).listWallets(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun listByVerificationTemplate(
      request: ListByVerificationTemplateRequest
  ): ListByVerificationTemplateResponse {
    /** List credentials which match a given verification template */
    return withMetadata(stub, request).listByVerificationTemplate(request)
  }
  @Throws(InvalidProtocolBufferException::class)
  suspend fun createDidWebDoc(request: CreateDidWebDocRequest): CreateDidWebDocResponse {
    /** Create a `did:web` document from a wallet's key(s) */
    return withMetadata(stub, request).createDidWebDoc(request)
  }
  // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
