// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/verifiable-credentials/v1/verifiable-credentials.proto

package trinsic.services.verifiablecredentials.v1;

public interface CreateProofRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:services.verifiablecredentials.v1.CreateProofRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * A valid JSON-LD frame describing which fields should be
   * revealed in the generated proof.
   * If unspecified, all fields in the document will be revealed
   * </pre>
   *
   * <code>string reveal_document_json = 1;</code>
   *
   * @return Whether the revealDocumentJson field is set.
   */
  boolean hasRevealDocumentJson();
  /**
   *
   *
   * <pre>
   * A valid JSON-LD frame describing which fields should be
   * revealed in the generated proof.
   * If unspecified, all fields in the document will be revealed
   * </pre>
   *
   * <code>string reveal_document_json = 1;</code>
   *
   * @return The revealDocumentJson.
   */
  java.lang.String getRevealDocumentJson();
  /**
   *
   *
   * <pre>
   * A valid JSON-LD frame describing which fields should be
   * revealed in the generated proof.
   * If unspecified, all fields in the document will be revealed
   * </pre>
   *
   * <code>string reveal_document_json = 1;</code>
   *
   * @return The bytes for revealDocumentJson.
   */
  com.google.protobuf.ByteString getRevealDocumentJsonBytes();

  /**
   *
   *
   * <pre>
   * Information about what sections of the document to reveal
   * </pre>
   *
   * <code>.services.verifiablecredentials.v1.RevealTemplateAttributes reveal_template = 11;</code>
   *
   * @return Whether the revealTemplate field is set.
   */
  boolean hasRevealTemplate();
  /**
   *
   *
   * <pre>
   * Information about what sections of the document to reveal
   * </pre>
   *
   * <code>.services.verifiablecredentials.v1.RevealTemplateAttributes reveal_template = 11;</code>
   *
   * @return The revealTemplate.
   */
  trinsic.services.verifiablecredentials.v1.RevealTemplateAttributes getRevealTemplate();
  /**
   *
   *
   * <pre>
   * Information about what sections of the document to reveal
   * </pre>
   *
   * <code>.services.verifiablecredentials.v1.RevealTemplateAttributes reveal_template = 11;</code>
   */
  trinsic.services.verifiablecredentials.v1.RevealTemplateAttributesOrBuilder
      getRevealTemplateOrBuilder();

  /**
   *
   *
   * <pre>
   * ID of wallet item stored in a Trinsic cloud wallet
   * </pre>
   *
   * <code>string item_id = 2;</code>
   *
   * @return Whether the itemId field is set.
   */
  boolean hasItemId();
  /**
   *
   *
   * <pre>
   * ID of wallet item stored in a Trinsic cloud wallet
   * </pre>
   *
   * <code>string item_id = 2;</code>
   *
   * @return The itemId.
   */
  java.lang.String getItemId();
  /**
   *
   *
   * <pre>
   * ID of wallet item stored in a Trinsic cloud wallet
   * </pre>
   *
   * <code>string item_id = 2;</code>
   *
   * @return The bytes for itemId.
   */
  com.google.protobuf.ByteString getItemIdBytes();

  /**
   *
   *
   * <pre>
   * A valid JSON-LD Verifiable Credential document string
   * with an unbound signature. The proof will be derived from this
   * document directly. The document will not be stored in the wallet.
   * </pre>
   *
   * <code>string document_json = 3;</code>
   *
   * @return Whether the documentJson field is set.
   */
  boolean hasDocumentJson();
  /**
   *
   *
   * <pre>
   * A valid JSON-LD Verifiable Credential document string
   * with an unbound signature. The proof will be derived from this
   * document directly. The document will not be stored in the wallet.
   * </pre>
   *
   * <code>string document_json = 3;</code>
   *
   * @return The documentJson.
   */
  java.lang.String getDocumentJson();
  /**
   *
   *
   * <pre>
   * A valid JSON-LD Verifiable Credential document string
   * with an unbound signature. The proof will be derived from this
   * document directly. The document will not be stored in the wallet.
   * </pre>
   *
   * <code>string document_json = 3;</code>
   *
   * @return The bytes for documentJson.
   */
  com.google.protobuf.ByteString getDocumentJsonBytes();

  /**
   *
   *
   * <pre>
   * Wrap the output in a verifiable presentation.
   * If the credential used in the proof is bound to the holder DID,
   * the output will always use a verifiable presentation and this field will be ignored.
   * </pre>
   *
   * <code>bool use_verifiable_presentation = 4;</code>
   *
   * @return The useVerifiablePresentation.
   */
  boolean getUseVerifiablePresentation();

  /**
   *
   *
   * <pre>
   * Nonce value used to derive the proof. If not specified, a random nonce will be generated.
   * This value may be represented in base64 format in the proof model.
   * </pre>
   *
   * <code>bytes nonce = 10 [(.services.options.optional) = true];</code>
   *
   * @return The nonce.
   */
  com.google.protobuf.ByteString getNonce();

  public trinsic.services.verifiablecredentials.v1.CreateProofRequest.DisclosureCase
      getDisclosureCase();

  public trinsic.services.verifiablecredentials.v1.CreateProofRequest.ProofCase getProofCase();
}
