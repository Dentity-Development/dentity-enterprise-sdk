// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/verifiable-credentials/v1/verifiable-credentials.proto

package trinsic.services.verifiablecredentials.v1;

public interface CreateCredentialOfferRequestOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:services.verifiablecredentials.v1.CreateCredentialOfferRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * ID of template to use
   * </pre>
   *
   * <code>string template_id = 1;</code>
   *
   * @return The templateId.
   */
  java.lang.String getTemplateId();
  /**
   *
   *
   * <pre>
   * ID of template to use
   * </pre>
   *
   * <code>string template_id = 1;</code>
   *
   * @return The bytes for templateId.
   */
  com.google.protobuf.ByteString getTemplateIdBytes();

  /**
   *
   *
   * <pre>
   * JSON document string with keys corresponding to the fields of
   * the template referenced by `template_id`
   * </pre>
   *
   * <code>string values_json = 2;</code>
   *
   * @return The valuesJson.
   */
  java.lang.String getValuesJson();
  /**
   *
   *
   * <pre>
   * JSON document string with keys corresponding to the fields of
   * the template referenced by `template_id`
   * </pre>
   *
   * <code>string values_json = 2;</code>
   *
   * @return The bytes for valuesJson.
   */
  com.google.protobuf.ByteString getValuesJsonBytes();

  /**
   *
   *
   * <pre>
   * If true, the credential will be issued with holder binding by specifying
   * the holder DID in the credential subject
   * </pre>
   *
   * <code>bool holder_binding = 3;</code>
   *
   * @return The holderBinding.
   */
  boolean getHolderBinding();

  /**
   *
   *
   * <pre>
   * If true, the issued credential will contain an attestation of the issuer's membership in the ecosystem's
   * Trust Registry.
   * </pre>
   *
   * <code>bool include_governance = 4;</code>
   *
   * @return The includeGovernance.
   */
  boolean getIncludeGovernance();

  /**
   *
   *
   * <pre>
   * If true, a short URL link will be generated that can be used to share the credential offer with the holder.
   * This link will point to the credential offer in the wallet app.
   * </pre>
   *
   * <code>bool generate_share_url = 5;</code>
   *
   * @return The generateShareUrl.
   */
  boolean getGenerateShareUrl();

  /**
   *
   *
   * <pre>
   * The type of signature to use when signing the credential. Defaults to `EXPERIMENTAL`.
   * </pre>
   *
   * <code>.services.verifiablecredentials.v1.SignatureType signature_type = 7;</code>
   *
   * @return The enum numeric value on the wire for signatureType.
   */
  int getSignatureTypeValue();
  /**
   *
   *
   * <pre>
   * The type of signature to use when signing the credential. Defaults to `EXPERIMENTAL`.
   * </pre>
   *
   * <code>.services.verifiablecredentials.v1.SignatureType signature_type = 7;</code>
   *
   * @return The signatureType.
   */
  trinsic.services.verifiablecredentials.v1.SignatureType getSignatureType();
}
