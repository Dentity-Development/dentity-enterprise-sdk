// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/verifiable-credentials/v1/verifiable-credentials.proto

package trinsic.services.verifiablecredentials.v1;

/** Protobuf enum {@code services.verifiablecredentials.v1.SignatureType} */
public enum SignatureType implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * The signature type is not specified. The experimental signature type will be used.
   * </pre>
   *
   * <code>UNSPECIFIED = 0;</code>
   */
  UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * The signature type uses EdDSA with the Ed25519 curve (NIST compliant).
   * This type of signature does not support selective disclosure of attributes.
   * </pre>
   *
   * <code>STANDARD = 1;</code>
   */
  STANDARD(1),
  /**
   *
   *
   * <pre>
   * The signature type uses BBS signatures with BLS12-381 curve (experimental).
   * This type of signature allows for selective disclosure of attributes.
   * </pre>
   *
   * <code>EXPERIMENTAL = 2;</code>
   */
  EXPERIMENTAL(2),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * The signature type is not specified. The experimental signature type will be used.
   * </pre>
   *
   * <code>UNSPECIFIED = 0;</code>
   */
  public static final int UNSPECIFIED_VALUE = 0;
  /**
   *
   *
   * <pre>
   * The signature type uses EdDSA with the Ed25519 curve (NIST compliant).
   * This type of signature does not support selective disclosure of attributes.
   * </pre>
   *
   * <code>STANDARD = 1;</code>
   */
  public static final int STANDARD_VALUE = 1;
  /**
   *
   *
   * <pre>
   * The signature type uses BBS signatures with BLS12-381 curve (experimental).
   * This type of signature allows for selective disclosure of attributes.
   * </pre>
   *
   * <code>EXPERIMENTAL = 2;</code>
   */
  public static final int EXPERIMENTAL_VALUE = 2;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SignatureType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SignatureType forNumber(int value) {
    switch (value) {
      case 0:
        return UNSPECIFIED;
      case 1:
        return STANDARD;
      case 2:
        return EXPERIMENTAL;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SignatureType> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<SignatureType> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<SignatureType>() {
        public SignatureType findValueByNumber(int number) {
          return SignatureType.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return trinsic.services.verifiablecredentials.v1.VerifiableCredentials.getDescriptor()
        .getEnumTypes()
        .get(0);
  }

  private static final SignatureType[] VALUES = values();

  public static SignatureType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SignatureType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:services.verifiablecredentials.v1.SignatureType)
}
