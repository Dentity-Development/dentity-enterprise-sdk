// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/verifiable-credentials/templates/v1/templates.proto

package trinsic.services.verifiablecredentials.templates.v1;

public interface TemplateFieldOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:services.verifiablecredentials.templates.v1.TemplateField)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Human-readable name of the field
   * </pre>
   *
   * <code>string title = 1;</code>
   *
   * @return The title.
   */
  java.lang.String getTitle();
  /**
   *
   *
   * <pre>
   * Human-readable name of the field
   * </pre>
   *
   * <code>string title = 1;</code>
   *
   * @return The bytes for title.
   */
  com.google.protobuf.ByteString getTitleBytes();

  /**
   *
   *
   * <pre>
   * Human-readable description of the field
   * </pre>
   *
   * <code>string description = 2;</code>
   *
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   *
   *
   * <pre>
   * Human-readable description of the field
   * </pre>
   *
   * <code>string description = 2;</code>
   *
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString getDescriptionBytes();

  /**
   *
   *
   * <pre>
   * Whether this field may be omitted when a credential is issued against the template
   * </pre>
   *
   * <code>bool optional = 3;</code>
   *
   * @return The optional.
   */
  boolean getOptional();

  /**
   *
   *
   * <pre>
   * The type of the field
   * </pre>
   *
   * <code>.services.verifiablecredentials.templates.v1.FieldType type = 4;</code>
   *
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   *
   *
   * <pre>
   * The type of the field
   * </pre>
   *
   * <code>.services.verifiablecredentials.templates.v1.FieldType type = 4;</code>
   *
   * @return The type.
   */
  trinsic.services.verifiablecredentials.templates.v1.FieldType getType();

  /**
   *
   *
   * <pre>
   * Do not use.
   * Annotations for the field that may be used to add additional information.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  int getAnnotationsCount();
  /**
   *
   *
   * <pre>
   * Do not use.
   * Annotations for the field that may be used to add additional information.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  boolean containsAnnotations(java.lang.String key);
  /** Use {@link #getAnnotationsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getAnnotations();
  /**
   *
   *
   * <pre>
   * Do not use.
   * Annotations for the field that may be used to add additional information.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getAnnotationsMap();
  /**
   *
   *
   * <pre>
   * Do not use.
   * Annotations for the field that may be used to add additional information.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  /* nullable */
  java.lang.String getAnnotationsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);
  /**
   *
   *
   * <pre>
   * Do not use.
   * Annotations for the field that may be used to add additional information.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  java.lang.String getAnnotationsOrThrow(java.lang.String key);

  /**
   *
   *
   * <pre>
   * How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
   * </pre>
   *
   * <code>optional .services.verifiablecredentials.templates.v1.UriFieldData uri_data = 6;</code>
   *
   * @return Whether the uriData field is set.
   */
  boolean hasUriData();
  /**
   *
   *
   * <pre>
   * How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
   * </pre>
   *
   * <code>optional .services.verifiablecredentials.templates.v1.UriFieldData uri_data = 6;</code>
   *
   * @return The uriData.
   */
  trinsic.services.verifiablecredentials.templates.v1.UriFieldData getUriData();
  /**
   *
   *
   * <pre>
   * How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
   * </pre>
   *
   * <code>optional .services.verifiablecredentials.templates.v1.UriFieldData uri_data = 6;</code>
   */
  trinsic.services.verifiablecredentials.templates.v1.UriFieldDataOrBuilder getUriDataOrBuilder();
}
