// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/verifiable-credentials/templates/v1/templates.proto

package trinsic.services.verifiablecredentials.templates.v1;

/**
 *
 *
 * <pre>
 * How to display a URI value when rendering a credential.
 * </pre>
 *
 * Protobuf enum {@code services.verifiablecredentials.templates.v1.UriRenderMethod}
 */
public enum UriRenderMethod implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Display URI as text
   * </pre>
   *
   * <code>TEXT = 0;</code>
   */
  TEXT(0),
  /**
   *
   *
   * <pre>
   * Display URI as a clickable link
   * </pre>
   *
   * <code>LINK = 1;</code>
   */
  LINK(1),
  /**
   *
   *
   * <pre>
   * Display URI as an inline image. Only takes effect if the template field's MIME Type is an image type.
   * </pre>
   *
   * <code>INLINE_IMAGE = 2;</code>
   */
  INLINE_IMAGE(2),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Display URI as text
   * </pre>
   *
   * <code>TEXT = 0;</code>
   */
  public static final int TEXT_VALUE = 0;
  /**
   *
   *
   * <pre>
   * Display URI as a clickable link
   * </pre>
   *
   * <code>LINK = 1;</code>
   */
  public static final int LINK_VALUE = 1;
  /**
   *
   *
   * <pre>
   * Display URI as an inline image. Only takes effect if the template field's MIME Type is an image type.
   * </pre>
   *
   * <code>INLINE_IMAGE = 2;</code>
   */
  public static final int INLINE_IMAGE_VALUE = 2;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static UriRenderMethod valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static UriRenderMethod forNumber(int value) {
    switch (value) {
      case 0:
        return TEXT;
      case 1:
        return LINK;
      case 2:
        return INLINE_IMAGE;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<UriRenderMethod> internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<UriRenderMethod> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<UriRenderMethod>() {
        public UriRenderMethod findValueByNumber(int number) {
          return UriRenderMethod.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return trinsic.services.verifiablecredentials.templates.v1.Templates.getDescriptor()
        .getEnumTypes()
        .get(1);
  }

  private static final UriRenderMethod[] VALUES = values();

  public static UriRenderMethod valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private UriRenderMethod(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:services.verifiablecredentials.templates.v1.UriRenderMethod)
}
