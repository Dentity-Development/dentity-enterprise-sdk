package trinsic.services;

import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.protobuf.InvalidProtocolBufferException;
import java.util.Base64;
import java.util.concurrent.Executors;
import trinsic.sdk.options.v1.Options;
import trinsic.services.provider.v1.*;

public class ProviderService extends ServiceBase {
  public ProviderGrpc.ProviderFutureStub stub;

  public ProviderService() {
    this(null);
  }

  public ProviderService(Options.TrinsicOptions.Builder options) {
    super(options);
    this.stub = ProviderGrpc.newFutureStub(this.getChannel());
  }

  public ListenableFuture<CreateEcosystemResponse> createEcosystem(CreateEcosystemRequest request)
      throws InvalidProtocolBufferException {
    ListenableFuture<CreateEcosystemResponse> response;
    if (request.getName().isBlank() && request.getDetails().getEmail().isBlank()) {
      response = stub.createEcosystem(request);
    } else {
      response = withMetadata(stub, request).createEcosystem(request);
    }
    return Futures.transform(
        response,
        input -> {
          if (!input.hasProfile() || input.getProfile().getProtection().getEnabled()) return null;

          var token = Base64.getUrlEncoder().encodeToString(input.getProfile().toByteArray());
          this.setAuthToken(token);
          return input;
        },
        Executors.newSingleThreadExecutor());
  }

  // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
  // target: /home/runner/work/sdk/sdk/java/src/main/java/trinsic/services/ProviderService.java

  /** Returns the public key being used to create/verify oberon tokens */
  public ListenableFuture<GetOberonKeyResponse> getOberonKey()
      throws InvalidProtocolBufferException {
    var request = GetOberonKeyRequest.newBuilder().build();
    return withMetadata(stub, request).getOberonKey(request);
  }
  /** Upgrade a wallet's DID from `did:key` to another method */
  public ListenableFuture<UpgradeDidResponse> upgradeDID(UpgradeDidRequest request)
      throws InvalidProtocolBufferException {

    return withMetadata(stub, request).upgradeDID(request);
  }
  /** Search for issuers/providers/verifiers in the current ecosystem */
  public ListenableFuture<SearchWalletConfigurationResponse> searchWalletConfigurations(
      SearchWalletConfigurationsRequest request) throws InvalidProtocolBufferException {

    return withMetadata(stub, request).searchWalletConfigurations(request);
  }
  // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
