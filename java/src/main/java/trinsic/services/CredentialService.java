package trinsic.services;

import com.google.common.util.concurrent.ListenableFuture;
import com.google.protobuf.InvalidProtocolBufferException;
import trinsic.okapi.DidException;
import trinsic.sdk.options.v1.Options;
import trinsic.services.verifiablecredentials.v1.*;

public class CredentialService extends ServiceBase {
  private final VerifiableCredentialGrpc.VerifiableCredentialFutureStub stub;

  public CredentialService() {
    this(null);
  }

  public CredentialService(Options.ServiceOptions.Builder options) {
    super(options);

    this.stub = VerifiableCredentialGrpc.newFutureStub(this.getChannel());
  }
  // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
  // target: D:\trinsic\sdk\java\src\main\java\trinsic\services\CredentialService.java

  /**
   * This endpoint will be removed around May 1, 2023 Sign and issue a verifiable credential from a
   * submitted document. The document must be a valid JSON-LD document.
   */
  @Deprecated(since = "This endpoint will be removed around May 1, 2023")
  public ListenableFuture<IssueResponse> issue(IssueRequest request)
      throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).issue(request);
  }
  /**
   * Sign and issue a verifiable credential from a pre-defined template. This process will also add
   * schema validation and revocation registry values to the credential.
   */
  public ListenableFuture<IssueFromTemplateResponse> issueFromTemplate(
      IssueFromTemplateRequest request) throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).issueFromTemplate(request);
  }
  /** Check credential status in the revocation registry */
  public ListenableFuture<CheckStatusResponse> checkStatus(CheckStatusRequest request)
      throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).checkStatus(request);
  }
  /** Update credential status by setting the revocation value */
  public ListenableFuture<UpdateStatusResponse> updateStatus(UpdateStatusRequest request)
      throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).updateStatus(request);
  }
  /**
   * Create a proof from a signed document that is a valid verifiable credential and contains a
   * signature from which a proof can be derived.
   */
  public ListenableFuture<CreateProofResponse> createProof(CreateProofRequest request)
      throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).createProof(request);
  }
  /**
   * Verifies a proof by checking the signature value, and if possible schema validation, revocation
   * status, and issuer status against a trust registry
   */
  public ListenableFuture<VerifyProofResponse> verifyProof(VerifyProofRequest request)
      throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).verifyProof(request);
  }
  /** Sends a document directly to a user's email within the given ecosystem */
  public ListenableFuture<SendResponse> send(SendRequest request)
      throws InvalidProtocolBufferException, DidException {

    return withMetadata(stub, request).send(request);
  }
  // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
