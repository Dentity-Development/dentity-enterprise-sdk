package trinsic.services;

import com.google.common.util.concurrent.ListenableFuture;
import com.google.protobuf.InvalidProtocolBufferException;
import trinsic.sdk.options.v1.Options;
import trinsic.services.verifiablecredentials.v1.*;

public class CredentialService extends ServiceBase {
  private final VerifiableCredentialGrpc.VerifiableCredentialFutureStub stub;

  public CredentialService() {
    this(null);
  }

  public CredentialService(Options.TrinsicOptions.Builder options) {
    super(options);

    this.stub = VerifiableCredentialGrpc.newFutureStub(this.getChannel());
  }
// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\java\src\main\java\trinsic\services\CredentialService.java

  /** Sign and issue a verifiable credential from a pre-defined template.
* This process will also add schema validation and
* revocation registry values to the credential. */
  
  public ListenableFuture<IssueFromTemplateResponse> issueFromTemplate(IssueFromTemplateRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).issueFromTemplate(request);
  }
  /** Check credential status in the revocation registry */
  
  public ListenableFuture<CheckStatusResponse> checkStatus(CheckStatusRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).checkStatus(request);
  }
  /** Update credential status by setting the revocation value */
  
  public ListenableFuture<UpdateStatusResponse> updateStatus(UpdateStatusRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).updateStatus(request);
  }
  /** Create a proof from a signed document that is a valid
* verifiable credential and contains a signature from which a proof can be derived. */
  
  public ListenableFuture<CreateProofResponse> createProof(CreateProofRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).createProof(request);
  }
  /** Verifies a proof by checking the signature value, and if possible schema validation,
* revocation status, and issuer status against a trust registry */
  
  public ListenableFuture<VerifyProofResponse> verifyProof(VerifyProofRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).verifyProof(request);
  }
  /** Sends a document directly to a user's email within the given ecosystem */
  
  public ListenableFuture<SendResponse> send(SendRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).send(request);
  }
  /** Create credential offer */
  
  public ListenableFuture<CreateCredentialOfferResponse> createCredentialOffer(CreateCredentialOfferRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).createCredentialOffer(request);
  }
  /** Accept an offer to exchange a credential */
  
  public ListenableFuture<AcceptCredentialResponse> acceptCredential(AcceptCredentialRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).acceptCredential(request);
  }
  /** Reject an offer to exchange a credential */
  
  public ListenableFuture<RejectCredentialResponse> rejectCredential(RejectCredentialRequest request)
      throws InvalidProtocolBufferException {
    
	return withMetadata(stub, request).rejectCredential(request);
  }
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}
