// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VerifiableCredentialClient is the client API for VerifiableCredential service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifiableCredentialClient interface {
	Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	IssueFromTemplate(ctx context.Context, in *IssueFromTemplateRequest, opts ...grpc.CallOption) (*IssueFromTemplateResponse, error)
	CreateProof(ctx context.Context, in *CreateProofRequest, opts ...grpc.CallOption) (*CreateProofResponse, error)
	VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type verifiableCredentialClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifiableCredentialClient(cc grpc.ClientConnInterface) VerifiableCredentialClient {
	return &verifiableCredentialClient{cc}
}

func (c *verifiableCredentialClient) Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/services.verifiablecredentials.v1.VerifiableCredential/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableCredentialClient) IssueFromTemplate(ctx context.Context, in *IssueFromTemplateRequest, opts ...grpc.CallOption) (*IssueFromTemplateResponse, error) {
	out := new(IssueFromTemplateResponse)
	err := c.cc.Invoke(ctx, "/services.verifiablecredentials.v1.VerifiableCredential/IssueFromTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableCredentialClient) CreateProof(ctx context.Context, in *CreateProofRequest, opts ...grpc.CallOption) (*CreateProofResponse, error) {
	out := new(CreateProofResponse)
	err := c.cc.Invoke(ctx, "/services.verifiablecredentials.v1.VerifiableCredential/CreateProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableCredentialClient) VerifyProof(ctx context.Context, in *VerifyProofRequest, opts ...grpc.CallOption) (*VerifyProofResponse, error) {
	out := new(VerifyProofResponse)
	err := c.cc.Invoke(ctx, "/services.verifiablecredentials.v1.VerifiableCredential/VerifyProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableCredentialClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/services.verifiablecredentials.v1.VerifiableCredential/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifiableCredentialServer is the server API for VerifiableCredential service.
// All implementations must embed UnimplementedVerifiableCredentialServer
// for forward compatibility
type VerifiableCredentialServer interface {
	Issue(context.Context, *IssueRequest) (*IssueResponse, error)
	IssueFromTemplate(context.Context, *IssueFromTemplateRequest) (*IssueFromTemplateResponse, error)
	CreateProof(context.Context, *CreateProofRequest) (*CreateProofResponse, error)
	VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
	mustEmbedUnimplementedVerifiableCredentialServer()
}

// UnimplementedVerifiableCredentialServer must be embedded to have forward compatible implementations.
type UnimplementedVerifiableCredentialServer struct {
}

func (UnimplementedVerifiableCredentialServer) Issue(context.Context, *IssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedVerifiableCredentialServer) IssueFromTemplate(context.Context, *IssueFromTemplateRequest) (*IssueFromTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueFromTemplate not implemented")
}
func (UnimplementedVerifiableCredentialServer) CreateProof(context.Context, *CreateProofRequest) (*CreateProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProof not implemented")
}
func (UnimplementedVerifiableCredentialServer) VerifyProof(context.Context, *VerifyProofRequest) (*VerifyProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProof not implemented")
}
func (UnimplementedVerifiableCredentialServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedVerifiableCredentialServer) mustEmbedUnimplementedVerifiableCredentialServer() {}

// UnsafeVerifiableCredentialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifiableCredentialServer will
// result in compilation errors.
type UnsafeVerifiableCredentialServer interface {
	mustEmbedUnimplementedVerifiableCredentialServer()
}

func RegisterVerifiableCredentialServer(s grpc.ServiceRegistrar, srv VerifiableCredentialServer) {
	s.RegisterService(&VerifiableCredential_ServiceDesc, srv)
}

func _VerifiableCredential_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableCredentialServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.verifiablecredentials.v1.VerifiableCredential/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableCredentialServer).Issue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableCredential_IssueFromTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueFromTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableCredentialServer).IssueFromTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.verifiablecredentials.v1.VerifiableCredential/IssueFromTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableCredentialServer).IssueFromTemplate(ctx, req.(*IssueFromTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableCredential_CreateProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableCredentialServer).CreateProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.verifiablecredentials.v1.VerifiableCredential/CreateProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableCredentialServer).CreateProof(ctx, req.(*CreateProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableCredential_VerifyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableCredentialServer).VerifyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.verifiablecredentials.v1.VerifiableCredential/VerifyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableCredentialServer).VerifyProof(ctx, req.(*VerifyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableCredential_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableCredentialServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.verifiablecredentials.v1.VerifiableCredential/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableCredentialServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifiableCredential_ServiceDesc is the grpc.ServiceDesc for VerifiableCredential service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifiableCredential_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.verifiablecredentials.v1.VerifiableCredential",
	HandlerType: (*VerifiableCredentialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Issue",
			Handler:    _VerifiableCredential_Issue_Handler,
		},
		{
			MethodName: "IssueFromTemplate",
			Handler:    _VerifiableCredential_IssueFromTemplate_Handler,
		},
		{
			MethodName: "CreateProof",
			Handler:    _VerifiableCredential_CreateProof_Handler,
		},
		{
			MethodName: "VerifyProof",
			Handler:    _VerifiableCredential_VerifyProof_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _VerifiableCredential_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/verifiable-credentials/v1/verifiable-credentials.proto",
}
