// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UniversalWalletClient is the client API for UniversalWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversalWalletClient interface {
	// Search the wallet using a SQL-like syntax
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Insert an item into the wallet
	InsertItem(ctx context.Context, in *InsertItemRequest, opts ...grpc.CallOption) (*InsertItemResponse, error)
	// Delete an item from the wallet permanently
	Deleteitem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error)
}

type universalWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversalWalletClient(cc grpc.ClientConnInterface) UniversalWalletClient {
	return &universalWalletClient{cc}
}

func (c *universalWalletClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/services.universalwallet.v1.UniversalWallet/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universalWalletClient) InsertItem(ctx context.Context, in *InsertItemRequest, opts ...grpc.CallOption) (*InsertItemResponse, error) {
	out := new(InsertItemResponse)
	err := c.cc.Invoke(ctx, "/services.universalwallet.v1.UniversalWallet/InsertItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universalWalletClient) Deleteitem(ctx context.Context, in *DeleteItemRequest, opts ...grpc.CallOption) (*DeleteItemResponse, error) {
	out := new(DeleteItemResponse)
	err := c.cc.Invoke(ctx, "/services.universalwallet.v1.UniversalWallet/Deleteitem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversalWalletServer is the server API for UniversalWallet service.
// All implementations must embed UnimplementedUniversalWalletServer
// for forward compatibility
type UniversalWalletServer interface {
	// Search the wallet using a SQL-like syntax
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Insert an item into the wallet
	InsertItem(context.Context, *InsertItemRequest) (*InsertItemResponse, error)
	// Delete an item from the wallet permanently
	Deleteitem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error)
	mustEmbedUnimplementedUniversalWalletServer()
}

// UnimplementedUniversalWalletServer must be embedded to have forward compatible implementations.
type UnimplementedUniversalWalletServer struct {
}

func (UnimplementedUniversalWalletServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedUniversalWalletServer) InsertItem(context.Context, *InsertItemRequest) (*InsertItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertItem not implemented")
}
func (UnimplementedUniversalWalletServer) Deleteitem(context.Context, *DeleteItemRequest) (*DeleteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deleteitem not implemented")
}
func (UnimplementedUniversalWalletServer) mustEmbedUnimplementedUniversalWalletServer() {}

// UnsafeUniversalWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversalWalletServer will
// result in compilation errors.
type UnsafeUniversalWalletServer interface {
	mustEmbedUnimplementedUniversalWalletServer()
}

func RegisterUniversalWalletServer(s grpc.ServiceRegistrar, srv UniversalWalletServer) {
	s.RegisterService(&UniversalWallet_ServiceDesc, srv)
}

func _UniversalWallet_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversalWalletServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.universalwallet.v1.UniversalWallet/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversalWalletServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversalWallet_InsertItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversalWalletServer).InsertItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.universalwallet.v1.UniversalWallet/InsertItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversalWalletServer).InsertItem(ctx, req.(*InsertItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversalWallet_Deleteitem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversalWalletServer).Deleteitem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.universalwallet.v1.UniversalWallet/Deleteitem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversalWalletServer).Deleteitem(ctx, req.(*DeleteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniversalWallet_ServiceDesc is the grpc.ServiceDesc for UniversalWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniversalWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.universalwallet.v1.UniversalWallet",
	HandlerType: (*UniversalWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _UniversalWallet_Search_Handler,
		},
		{
			MethodName: "InsertItem",
			Handler:    _UniversalWallet_InsertItem_Handler,
		},
		{
			MethodName: "Deleteitem",
			Handler:    _UniversalWallet_Deleteitem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/universal-wallet/v1/universal-wallet.proto",
}
