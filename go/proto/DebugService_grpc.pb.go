// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DebuggingClient is the client API for Debugging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebuggingClient interface {
	CallEmpty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CallEmptyAuth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type debuggingClient struct {
	cc grpc.ClientConnInterface
}

func NewDebuggingClient(cc grpc.ClientConnInterface) DebuggingClient {
	return &debuggingClient{cc}
}

func (c *debuggingClient) CallEmpty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/trinsic.services.Debugging/CallEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debuggingClient) CallEmptyAuth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/trinsic.services.Debugging/CallEmptyAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebuggingServer is the server API for Debugging service.
// All implementations must embed UnimplementedDebuggingServer
// for forward compatibility
type DebuggingServer interface {
	CallEmpty(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CallEmptyAuth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDebuggingServer()
}

// UnimplementedDebuggingServer must be embedded to have forward compatible implementations.
type UnimplementedDebuggingServer struct {
}

func (UnimplementedDebuggingServer) CallEmpty(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEmpty not implemented")
}
func (UnimplementedDebuggingServer) CallEmptyAuth(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEmptyAuth not implemented")
}
func (UnimplementedDebuggingServer) mustEmbedUnimplementedDebuggingServer() {}

// UnsafeDebuggingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebuggingServer will
// result in compilation errors.
type UnsafeDebuggingServer interface {
	mustEmbedUnimplementedDebuggingServer()
}

func RegisterDebuggingServer(s grpc.ServiceRegistrar, srv DebuggingServer) {
	s.RegisterService(&Debugging_ServiceDesc, srv)
}

func _Debugging_CallEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebuggingServer).CallEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.Debugging/CallEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebuggingServer).CallEmpty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debugging_CallEmptyAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebuggingServer).CallEmptyAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.Debugging/CallEmptyAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebuggingServer).CallEmptyAuth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Debugging_ServiceDesc is the grpc.ServiceDesc for Debugging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Debugging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trinsic.services.Debugging",
	HandlerType: (*DebuggingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallEmpty",
			Handler:    _Debugging_CallEmpty_Handler,
		},
		{
			MethodName: "CallEmptyAuth",
			Handler:    _Debugging_CallEmptyAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DebugService.proto",
}
