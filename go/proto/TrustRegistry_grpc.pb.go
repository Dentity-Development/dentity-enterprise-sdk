// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrustRegistryClient is the client API for TrustRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrustRegistryClient interface {
	// Adds a trust registry defintion to the ecosystem
	AddFramework(ctx context.Context, in *AddFrameworkRequest, opts ...grpc.CallOption) (*AddFrameworkResponse, error)
	RemoveFramework(ctx context.Context, in *RemoveFrameworkRequest, opts ...grpc.CallOption) (*RemoveFrameworkResponse, error)
	SearchRegistry(ctx context.Context, in *SearchRegistryRequest, opts ...grpc.CallOption) (*SearchRegistryResponse, error)
	// Registers an authoritative issuer with a credential template
	RegisterIssuer(ctx context.Context, in *RegisterIssuerRequest, opts ...grpc.CallOption) (*RegisterIssuerResponse, error)
	RegisterVerifier(ctx context.Context, in *RegisterVerifierRequest, opts ...grpc.CallOption) (*RegisterVerifierResponse, error)
	// Removes an authoritative issuer with a credential template from the trust registry
	UnregisterMember(ctx context.Context, in *UnregisterMemberRequest, opts ...grpc.CallOption) (*UnregisterMemberResponse, error)
	CheckIssuerStatus(ctx context.Context, in *CheckIssuerStatusRequest, opts ...grpc.CallOption) (*CheckIssuerStatusResponse, error)
	CheckVerifierStatus(ctx context.Context, in *CheckVerifierStatusRequest, opts ...grpc.CallOption) (*CheckVerifierStatusResponse, error)
	FetchData(ctx context.Context, in *FetchDataRequest, opts ...grpc.CallOption) (TrustRegistry_FetchDataClient, error)
}

type trustRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewTrustRegistryClient(cc grpc.ClientConnInterface) TrustRegistryClient {
	return &trustRegistryClient{cc}
}

func (c *trustRegistryClient) AddFramework(ctx context.Context, in *AddFrameworkRequest, opts ...grpc.CallOption) (*AddFrameworkResponse, error) {
	out := new(AddFrameworkResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/AddFramework", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) RemoveFramework(ctx context.Context, in *RemoveFrameworkRequest, opts ...grpc.CallOption) (*RemoveFrameworkResponse, error) {
	out := new(RemoveFrameworkResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/RemoveFramework", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) SearchRegistry(ctx context.Context, in *SearchRegistryRequest, opts ...grpc.CallOption) (*SearchRegistryResponse, error) {
	out := new(SearchRegistryResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/SearchRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) RegisterIssuer(ctx context.Context, in *RegisterIssuerRequest, opts ...grpc.CallOption) (*RegisterIssuerResponse, error) {
	out := new(RegisterIssuerResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/RegisterIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) RegisterVerifier(ctx context.Context, in *RegisterVerifierRequest, opts ...grpc.CallOption) (*RegisterVerifierResponse, error) {
	out := new(RegisterVerifierResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/RegisterVerifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) UnregisterMember(ctx context.Context, in *UnregisterMemberRequest, opts ...grpc.CallOption) (*UnregisterMemberResponse, error) {
	out := new(UnregisterMemberResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/UnregisterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) CheckIssuerStatus(ctx context.Context, in *CheckIssuerStatusRequest, opts ...grpc.CallOption) (*CheckIssuerStatusResponse, error) {
	out := new(CheckIssuerStatusResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/CheckIssuerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) CheckVerifierStatus(ctx context.Context, in *CheckVerifierStatusRequest, opts ...grpc.CallOption) (*CheckVerifierStatusResponse, error) {
	out := new(CheckVerifierStatusResponse)
	err := c.cc.Invoke(ctx, "/trinsic.services.TrustRegistry/CheckVerifierStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trustRegistryClient) FetchData(ctx context.Context, in *FetchDataRequest, opts ...grpc.CallOption) (TrustRegistry_FetchDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrustRegistry_ServiceDesc.Streams[0], "/trinsic.services.TrustRegistry/FetchData", opts...)
	if err != nil {
		return nil, err
	}
	x := &trustRegistryFetchDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrustRegistry_FetchDataClient interface {
	Recv() (*FetchDataResponse, error)
	grpc.ClientStream
}

type trustRegistryFetchDataClient struct {
	grpc.ClientStream
}

func (x *trustRegistryFetchDataClient) Recv() (*FetchDataResponse, error) {
	m := new(FetchDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrustRegistryServer is the server API for TrustRegistry service.
// All implementations must embed UnimplementedTrustRegistryServer
// for forward compatibility
type TrustRegistryServer interface {
	// Adds a trust registry defintion to the ecosystem
	AddFramework(context.Context, *AddFrameworkRequest) (*AddFrameworkResponse, error)
	RemoveFramework(context.Context, *RemoveFrameworkRequest) (*RemoveFrameworkResponse, error)
	SearchRegistry(context.Context, *SearchRegistryRequest) (*SearchRegistryResponse, error)
	// Registers an authoritative issuer with a credential template
	RegisterIssuer(context.Context, *RegisterIssuerRequest) (*RegisterIssuerResponse, error)
	RegisterVerifier(context.Context, *RegisterVerifierRequest) (*RegisterVerifierResponse, error)
	// Removes an authoritative issuer with a credential template from the trust registry
	UnregisterMember(context.Context, *UnregisterMemberRequest) (*UnregisterMemberResponse, error)
	CheckIssuerStatus(context.Context, *CheckIssuerStatusRequest) (*CheckIssuerStatusResponse, error)
	CheckVerifierStatus(context.Context, *CheckVerifierStatusRequest) (*CheckVerifierStatusResponse, error)
	FetchData(*FetchDataRequest, TrustRegistry_FetchDataServer) error
	mustEmbedUnimplementedTrustRegistryServer()
}

// UnimplementedTrustRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedTrustRegistryServer struct {
}

func (UnimplementedTrustRegistryServer) AddFramework(context.Context, *AddFrameworkRequest) (*AddFrameworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFramework not implemented")
}
func (UnimplementedTrustRegistryServer) RemoveFramework(context.Context, *RemoveFrameworkRequest) (*RemoveFrameworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFramework not implemented")
}
func (UnimplementedTrustRegistryServer) SearchRegistry(context.Context, *SearchRegistryRequest) (*SearchRegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRegistry not implemented")
}
func (UnimplementedTrustRegistryServer) RegisterIssuer(context.Context, *RegisterIssuerRequest) (*RegisterIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterIssuer not implemented")
}
func (UnimplementedTrustRegistryServer) RegisterVerifier(context.Context, *RegisterVerifierRequest) (*RegisterVerifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVerifier not implemented")
}
func (UnimplementedTrustRegistryServer) UnregisterMember(context.Context, *UnregisterMemberRequest) (*UnregisterMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterMember not implemented")
}
func (UnimplementedTrustRegistryServer) CheckIssuerStatus(context.Context, *CheckIssuerStatusRequest) (*CheckIssuerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIssuerStatus not implemented")
}
func (UnimplementedTrustRegistryServer) CheckVerifierStatus(context.Context, *CheckVerifierStatusRequest) (*CheckVerifierStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVerifierStatus not implemented")
}
func (UnimplementedTrustRegistryServer) FetchData(*FetchDataRequest, TrustRegistry_FetchDataServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchData not implemented")
}
func (UnimplementedTrustRegistryServer) mustEmbedUnimplementedTrustRegistryServer() {}

// UnsafeTrustRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrustRegistryServer will
// result in compilation errors.
type UnsafeTrustRegistryServer interface {
	mustEmbedUnimplementedTrustRegistryServer()
}

func RegisterTrustRegistryServer(s grpc.ServiceRegistrar, srv TrustRegistryServer) {
	s.RegisterService(&TrustRegistry_ServiceDesc, srv)
}

func _TrustRegistry_AddFramework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFrameworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).AddFramework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/AddFramework",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).AddFramework(ctx, req.(*AddFrameworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_RemoveFramework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFrameworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).RemoveFramework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/RemoveFramework",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).RemoveFramework(ctx, req.(*RemoveFrameworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_SearchRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).SearchRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/SearchRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).SearchRegistry(ctx, req.(*SearchRegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_RegisterIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).RegisterIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/RegisterIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).RegisterIssuer(ctx, req.(*RegisterIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_RegisterVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVerifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).RegisterVerifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/RegisterVerifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).RegisterVerifier(ctx, req.(*RegisterVerifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_UnregisterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).UnregisterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/UnregisterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).UnregisterMember(ctx, req.(*UnregisterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_CheckIssuerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIssuerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).CheckIssuerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/CheckIssuerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).CheckIssuerStatus(ctx, req.(*CheckIssuerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_CheckVerifierStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVerifierStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrustRegistryServer).CheckVerifierStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trinsic.services.TrustRegistry/CheckVerifierStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrustRegistryServer).CheckVerifierStatus(ctx, req.(*CheckVerifierStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrustRegistry_FetchData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrustRegistryServer).FetchData(m, &trustRegistryFetchDataServer{stream})
}

type TrustRegistry_FetchDataServer interface {
	Send(*FetchDataResponse) error
	grpc.ServerStream
}

type trustRegistryFetchDataServer struct {
	grpc.ServerStream
}

func (x *trustRegistryFetchDataServer) Send(m *FetchDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TrustRegistry_ServiceDesc is the grpc.ServiceDesc for TrustRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrustRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trinsic.services.TrustRegistry",
	HandlerType: (*TrustRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFramework",
			Handler:    _TrustRegistry_AddFramework_Handler,
		},
		{
			MethodName: "RemoveFramework",
			Handler:    _TrustRegistry_RemoveFramework_Handler,
		},
		{
			MethodName: "SearchRegistry",
			Handler:    _TrustRegistry_SearchRegistry_Handler,
		},
		{
			MethodName: "RegisterIssuer",
			Handler:    _TrustRegistry_RegisterIssuer_Handler,
		},
		{
			MethodName: "RegisterVerifier",
			Handler:    _TrustRegistry_RegisterVerifier_Handler,
		},
		{
			MethodName: "UnregisterMember",
			Handler:    _TrustRegistry_UnregisterMember_Handler,
		},
		{
			MethodName: "CheckIssuerStatus",
			Handler:    _TrustRegistry_CheckIssuerStatus_Handler,
		},
		{
			MethodName: "CheckVerifierStatus",
			Handler:    _TrustRegistry_CheckVerifierStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchData",
			Handler:       _TrustRegistry_FetchData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TrustRegistry.proto",
}
