// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.20.3
// source: services/verifiable-credentials/templates/v1/templates.proto

package template

import (
	_ "github.com/trinsic-id/sdk/go/proto/services/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Valid types for credential fields
type FieldType int32

const (
	FieldType_STRING   FieldType = 0
	FieldType_NUMBER   FieldType = 1
	FieldType_BOOL     FieldType = 2
	FieldType_DATETIME FieldType = 4
	FieldType_URI      FieldType = 5
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "STRING",
		1: "NUMBER",
		2: "BOOL",
		4: "DATETIME",
		5: "URI",
	}
	FieldType_value = map[string]int32{
		"STRING":   0,
		"NUMBER":   1,
		"BOOL":     2,
		"DATETIME": 4,
		"URI":      5,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{0}
}

// How to display a URI value when rendering a credential.
type UriRenderMethod int32

const (
	// Display URI as text
	UriRenderMethod_TEXT UriRenderMethod = 0
	// Display URI as a clickable link
	UriRenderMethod_LINK UriRenderMethod = 1
	// Display URI as an inline image. Only takes effect if the template field's MIME Type is an image type.
	UriRenderMethod_INLINE_IMAGE UriRenderMethod = 2
)

// Enum value maps for UriRenderMethod.
var (
	UriRenderMethod_name = map[int32]string{
		0: "TEXT",
		1: "LINK",
		2: "INLINE_IMAGE",
	}
	UriRenderMethod_value = map[string]int32{
		"TEXT":         0,
		"LINK":         1,
		"INLINE_IMAGE": 2,
	}
)

func (x UriRenderMethod) Enum() *UriRenderMethod {
	p := new(UriRenderMethod)
	*p = x
	return p
}

func (x UriRenderMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UriRenderMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes[1].Descriptor()
}

func (UriRenderMethod) Type() protoreflect.EnumType {
	return &file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes[1]
}

func (x UriRenderMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UriRenderMethod.Descriptor instead.
func (UriRenderMethod) EnumDescriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{1}
}

type VerificationShareType int32

const (
	VerificationShareType_OPTIONAL VerificationShareType = 0
	VerificationShareType_REQUIRED VerificationShareType = 1
)

// Enum value maps for VerificationShareType.
var (
	VerificationShareType_name = map[int32]string{
		0: "OPTIONAL",
		1: "REQUIRED",
	}
	VerificationShareType_value = map[string]int32{
		"OPTIONAL": 0,
		"REQUIRED": 1,
	}
)

func (x VerificationShareType) Enum() *VerificationShareType {
	p := new(VerificationShareType)
	*p = x
	return p
}

func (x VerificationShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes[2].Descriptor()
}

func (VerificationShareType) Type() protoreflect.EnumType {
	return &file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes[2]
}

func (x VerificationShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationShareType.Descriptor instead.
func (VerificationShareType) EnumDescriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{2}
}

// Request to fetch a template by ID
type GetCredentialTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of template to fetch
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCredentialTemplateRequest) Reset() {
	*x = GetCredentialTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialTemplateRequest) ProtoMessage() {}

func (x *GetCredentialTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetCredentialTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{0}
}

func (x *GetCredentialTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to `GetCredentialTemplateRequest`
type GetCredentialTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template fetched by ID
	Template *TemplateData `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *GetCredentialTemplateResponse) Reset() {
	*x = GetCredentialTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialTemplateResponse) ProtoMessage() {}

func (x *GetCredentialTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetCredentialTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{1}
}

func (x *GetCredentialTemplateResponse) GetTemplate() *TemplateData {
	if x != nil {
		return x.Template
	}
	return nil
}

// Request to search templates using a SQL query
type SearchCredentialTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Token provided by previous `SearchCredentialTemplatesResponse`
	// if more data is available for query
	ContinuationToken string `protobuf:"bytes,2,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *SearchCredentialTemplatesRequest) Reset() {
	*x = SearchCredentialTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCredentialTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCredentialTemplatesRequest) ProtoMessage() {}

func (x *SearchCredentialTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCredentialTemplatesRequest.ProtoReflect.Descriptor instead.
func (*SearchCredentialTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{2}
}

func (x *SearchCredentialTemplatesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchCredentialTemplatesRequest) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

// Response to `SearchCredentialTemplatesRequest`
type SearchCredentialTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw JSON data returned from query
	ItemsJson string `protobuf:"bytes,1,opt,name=items_json,json=itemsJson,proto3" json:"items_json,omitempty"`
	// Whether more results are available for this query via `continuation_token`
	HasMoreResults bool `protobuf:"varint,2,opt,name=has_more_results,json=hasMoreResults,proto3" json:"has_more_results,omitempty"`
	// Token to fetch next set of results via `SearchCredentialTemplatesRequest`
	ContinuationToken string `protobuf:"bytes,4,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *SearchCredentialTemplatesResponse) Reset() {
	*x = SearchCredentialTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCredentialTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCredentialTemplatesResponse) ProtoMessage() {}

func (x *SearchCredentialTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCredentialTemplatesResponse.ProtoReflect.Descriptor instead.
func (*SearchCredentialTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{3}
}

func (x *SearchCredentialTemplatesResponse) GetItemsJson() string {
	if x != nil {
		return x.ItemsJson
	}
	return ""
}

func (x *SearchCredentialTemplatesResponse) GetHasMoreResults() bool {
	if x != nil {
		return x.HasMoreResults
	}
	return false
}

func (x *SearchCredentialTemplatesResponse) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

// Request to list templates using a SQL query
type ListCredentialTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Token provided by previous `ListCredentialTemplatesResponse`
	// if more data is available for query
	ContinuationToken string `protobuf:"bytes,2,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *ListCredentialTemplatesRequest) Reset() {
	*x = ListCredentialTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialTemplatesRequest) ProtoMessage() {}

func (x *ListCredentialTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialTemplatesRequest.ProtoReflect.Descriptor instead.
func (*ListCredentialTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{4}
}

func (x *ListCredentialTemplatesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListCredentialTemplatesRequest) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

// Response to `ListCredentialTemplatesRequest`
type ListCredentialTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Templates found by query
	Templates []*TemplateData `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	// Whether more results are available for this query via `continuation_token`
	HasMoreResults bool `protobuf:"varint,2,opt,name=has_more_results,json=hasMoreResults,proto3" json:"has_more_results,omitempty"`
	// Token to fetch next set of results via `ListCredentialTemplatesRequest`
	ContinuationToken string `protobuf:"bytes,3,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *ListCredentialTemplatesResponse) Reset() {
	*x = ListCredentialTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCredentialTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialTemplatesResponse) ProtoMessage() {}

func (x *ListCredentialTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialTemplatesResponse.ProtoReflect.Descriptor instead.
func (*ListCredentialTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{5}
}

func (x *ListCredentialTemplatesResponse) GetTemplates() []*TemplateData {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *ListCredentialTemplatesResponse) GetHasMoreResults() bool {
	if x != nil {
		return x.HasMoreResults
	}
	return false
}

func (x *ListCredentialTemplatesResponse) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

// Request to delete a template by ID
type DeleteCredentialTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of template to delete
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCredentialTemplateRequest) Reset() {
	*x = DeleteCredentialTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialTemplateRequest) ProtoMessage() {}

func (x *DeleteCredentialTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteCredentialTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCredentialTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to `DeleteCredentialTemplateRequest`
type DeleteCredentialTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCredentialTemplateResponse) Reset() {
	*x = DeleteCredentialTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCredentialTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCredentialTemplateResponse) ProtoMessage() {}

func (x *DeleteCredentialTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCredentialTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteCredentialTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{7}
}

// Request to create a new template
type CreateCredentialTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of new template. Must be a unique identifier within its ecosystem.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields which compose the template
	Fields map[string]*TemplateField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether credentials may be issued against this template which have fields
	// not specified in `fields`
	AllowAdditionalFields bool `protobuf:"varint,3,opt,name=allow_additional_fields,json=allowAdditionalFields,proto3" json:"allow_additional_fields,omitempty"`
	// Human-readable name of template
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Human-readable description of template
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional map describing how to order and categorize the fields within the template. The key of this map is the field `name`.
	// If not provided, this will be auto-generated.
	FieldOrdering map[string]*FieldOrdering `protobuf:"bytes,6,rep,name=field_ordering,json=fieldOrdering,proto3" json:"field_ordering,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Options for rendering the template in Apple Wallet
	AppleWalletOptions *AppleWalletOptions `protobuf:"bytes,7,opt,name=apple_wallet_options,json=appleWalletOptions,proto3,oneof" json:"apple_wallet_options,omitempty"`
}

func (x *CreateCredentialTemplateRequest) Reset() {
	*x = CreateCredentialTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCredentialTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCredentialTemplateRequest) ProtoMessage() {}

func (x *CreateCredentialTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCredentialTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateCredentialTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCredentialTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCredentialTemplateRequest) GetFields() map[string]*TemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateCredentialTemplateRequest) GetAllowAdditionalFields() bool {
	if x != nil {
		return x.AllowAdditionalFields
	}
	return false
}

func (x *CreateCredentialTemplateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateCredentialTemplateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCredentialTemplateRequest) GetFieldOrdering() map[string]*FieldOrdering {
	if x != nil {
		return x.FieldOrdering
	}
	return nil
}

func (x *CreateCredentialTemplateRequest) GetAppleWalletOptions() *AppleWalletOptions {
	if x != nil {
		return x.AppleWalletOptions
	}
	return nil
}

// Response to `CreateCredentialTemplateRequest`
type CreateCredentialTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created template
	Data *TemplateData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCredentialTemplateResponse) Reset() {
	*x = CreateCredentialTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCredentialTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCredentialTemplateResponse) ProtoMessage() {}

func (x *CreateCredentialTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCredentialTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateCredentialTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{9}
}

func (x *CreateCredentialTemplateResponse) GetData() *TemplateData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Request to update display information for a template
type UpdateCredentialTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of Template to update
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// New human-readable title of Template
	Title *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// New human-readable description of Template
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Fields to update within the Template
	Fields map[string]*TemplateFieldPatch `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// New field ordering options. See documentation for template creation for usage information.
	FieldOrdering map[string]*FieldOrdering `protobuf:"bytes,5,rep,name=field_ordering,json=fieldOrdering,proto3" json:"field_ordering,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// New Apple Wallet configuration
	AppleWalletOptions *AppleWalletOptions `protobuf:"bytes,6,opt,name=apple_wallet_options,json=appleWalletOptions,proto3,oneof" json:"apple_wallet_options,omitempty"`
}

func (x *UpdateCredentialTemplateRequest) Reset() {
	*x = UpdateCredentialTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCredentialTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCredentialTemplateRequest) ProtoMessage() {}

func (x *UpdateCredentialTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCredentialTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateCredentialTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateCredentialTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCredentialTemplateRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateCredentialTemplateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateCredentialTemplateRequest) GetFields() map[string]*TemplateFieldPatch {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateCredentialTemplateRequest) GetFieldOrdering() map[string]*FieldOrdering {
	if x != nil {
		return x.FieldOrdering
	}
	return nil
}

func (x *UpdateCredentialTemplateRequest) GetAppleWalletOptions() *AppleWalletOptions {
	if x != nil {
		return x.AppleWalletOptions
	}
	return nil
}

// Response to `UpdateCredentialTemplateRequest`
type UpdateCredentialTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Template after the update has been applied
	UpdatedTemplate *TemplateData `protobuf:"bytes,1,opt,name=updated_template,json=updatedTemplate,proto3" json:"updated_template,omitempty"`
}

func (x *UpdateCredentialTemplateResponse) Reset() {
	*x = UpdateCredentialTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCredentialTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCredentialTemplateResponse) ProtoMessage() {}

func (x *UpdateCredentialTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCredentialTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateCredentialTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateCredentialTemplateResponse) GetUpdatedTemplate() *TemplateData {
	if x != nil {
		return x.UpdatedTemplate
	}
	return nil
}

// Credential Template
type TemplateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Template name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Template version number
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Fields defined for the template
	Fields map[string]*TemplateField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Whether credentials issued against this template may
	// contain fields not defined by template
	AllowAdditionalFields bool `protobuf:"varint,5,opt,name=allow_additional_fields,json=allowAdditionalFields,proto3" json:"allow_additional_fields,omitempty"`
	// URI pointing to template JSON schema document
	SchemaUri string `protobuf:"bytes,6,opt,name=schema_uri,json=schemaUri,proto3" json:"schema_uri,omitempty"`
	// ID of ecosystem in which template resides
	EcosystemId string `protobuf:"bytes,8,opt,name=ecosystem_id,json=ecosystemId,proto3" json:"ecosystem_id,omitempty"`
	// Template type (`VerifiableCredential`)
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// ID of template creator
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Date when template was created as ISO 8601 utc string
	DateCreated string `protobuf:"bytes,11,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// Human-readable template title
	Title string `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	// Human-readable template description
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Map describing how to order and categorize the fields within the template. The key of this map is the field `name`.
	FieldOrdering map[string]*FieldOrdering `protobuf:"bytes,14,rep,name=field_ordering,json=fieldOrdering,proto3" json:"field_ordering,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Options for rendering the template in Apple Wallet
	AppleWalletOptions *AppleWalletOptions `protobuf:"bytes,15,opt,name=apple_wallet_options,json=appleWalletOptions,proto3" json:"apple_wallet_options,omitempty"`
}

func (x *TemplateData) Reset() {
	*x = TemplateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateData) ProtoMessage() {}

func (x *TemplateData) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateData.ProtoReflect.Descriptor instead.
func (*TemplateData) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{12}
}

func (x *TemplateData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TemplateData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TemplateData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TemplateData) GetFields() map[string]*TemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TemplateData) GetAllowAdditionalFields() bool {
	if x != nil {
		return x.AllowAdditionalFields
	}
	return false
}

func (x *TemplateData) GetSchemaUri() string {
	if x != nil {
		return x.SchemaUri
	}
	return ""
}

func (x *TemplateData) GetEcosystemId() string {
	if x != nil {
		return x.EcosystemId
	}
	return ""
}

func (x *TemplateData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TemplateData) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TemplateData) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *TemplateData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TemplateData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TemplateData) GetFieldOrdering() map[string]*FieldOrdering {
	if x != nil {
		return x.FieldOrdering
	}
	return nil
}

func (x *TemplateData) GetAppleWalletOptions() *AppleWalletOptions {
	if x != nil {
		return x.AppleWalletOptions
	}
	return nil
}

// Configuration options for Apple Wallet when
type AppleWalletOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Background color, in hex format, of credential when stored in an Apple Wallet.
	BackgroundColor string `protobuf:"bytes,1,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	// Foreground color, in hex format, of credential when stored in an Apple Wallet.
	ForegroundColor string `protobuf:"bytes,2,opt,name=foreground_color,json=foregroundColor,proto3" json:"foreground_color,omitempty"`
	// Label color, in hex format, of credential when stored in an Apple Wallet.
	LabelColor string `protobuf:"bytes,3,opt,name=label_color,json=labelColor,proto3" json:"label_color,omitempty"`
	// The ID of the template field which should be used as the primary field of a credential.
	PrimaryField string `protobuf:"bytes,4,opt,name=primary_field,json=primaryField,proto3" json:"primary_field,omitempty"`
	// The secondary fields of the credential. This is a mapping between the order of a secondary field (0 or 1) and the field name.
	SecondaryFields []string `protobuf:"bytes,5,rep,name=secondary_fields,json=secondaryFields,proto3" json:"secondary_fields,omitempty"`
	// The auxiliary fields of the credential. This is a mapping between the order of an auxiliary field (0 or 1) and the field name.
	AuxiliaryFields []string `protobuf:"bytes,6,rep,name=auxiliary_fields,json=auxiliaryFields,proto3" json:"auxiliary_fields,omitempty"`
}

func (x *AppleWalletOptions) Reset() {
	*x = AppleWalletOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleWalletOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleWalletOptions) ProtoMessage() {}

func (x *AppleWalletOptions) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleWalletOptions.ProtoReflect.Descriptor instead.
func (*AppleWalletOptions) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{13}
}

func (x *AppleWalletOptions) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *AppleWalletOptions) GetForegroundColor() string {
	if x != nil {
		return x.ForegroundColor
	}
	return ""
}

func (x *AppleWalletOptions) GetLabelColor() string {
	if x != nil {
		return x.LabelColor
	}
	return ""
}

func (x *AppleWalletOptions) GetPrimaryField() string {
	if x != nil {
		return x.PrimaryField
	}
	return ""
}

func (x *AppleWalletOptions) GetSecondaryFields() []string {
	if x != nil {
		return x.SecondaryFields
	}
	return nil
}

func (x *AppleWalletOptions) GetAuxiliaryFields() []string {
	if x != nil {
		return x.AuxiliaryFields
	}
	return nil
}

// Ordering information for a template field
type FieldOrdering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The order of the field; must be unique within the Template. Fields are sorted by order ascending when displaying a credential.
	// Field orders must be contiguous from `0` to the number of fields minus 1.
	Order int32 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	// The human-readable name of the section this field appears in; used to group together fields when displaying a credential.
	// Sections must be contiguous with respect to `order`.
	Section string `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`
}

func (x *FieldOrdering) Reset() {
	*x = FieldOrdering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOrdering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOrdering) ProtoMessage() {}

func (x *FieldOrdering) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOrdering.ProtoReflect.Descriptor instead.
func (*FieldOrdering) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{14}
}

func (x *FieldOrdering) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *FieldOrdering) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

// A field defined in a template
type TemplateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of the field
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Human-readable description of the field
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Whether this field may be omitted when a credential is issued against the template
	Optional bool `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty"`
	// The type of the field
	Type FieldType `protobuf:"varint,4,opt,name=type,proto3,enum=services.verifiablecredentials.templates.v1.FieldType" json:"type,omitempty"`
	// How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
	UriData *UriFieldData `protobuf:"bytes,6,opt,name=uri_data,json=uriData,proto3,oneof" json:"uri_data,omitempty"`
}

func (x *TemplateField) Reset() {
	*x = TemplateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateField) ProtoMessage() {}

func (x *TemplateField) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateField.ProtoReflect.Descriptor instead.
func (*TemplateField) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{15}
}

func (x *TemplateField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TemplateField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TemplateField) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *TemplateField) GetType() FieldType {
	if x != nil {
		return x.Type
	}
	return FieldType_STRING
}

func (x *TemplateField) GetUriData() *UriFieldData {
	if x != nil {
		return x.UriData
	}
	return nil
}

// A patch to apply to an existing template field
type TemplateFieldPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of the field
	Title *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// Human-readable description of the field
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// How to deal with this URI field when rendering credential. Only use if `type` is `URI`.
	UriData *UriFieldData `protobuf:"bytes,3,opt,name=uri_data,json=uriData,proto3,oneof" json:"uri_data,omitempty"`
}

func (x *TemplateFieldPatch) Reset() {
	*x = TemplateFieldPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateFieldPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateFieldPatch) ProtoMessage() {}

func (x *TemplateFieldPatch) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateFieldPatch.ProtoReflect.Descriptor instead.
func (*TemplateFieldPatch) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{16}
}

func (x *TemplateFieldPatch) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *TemplateFieldPatch) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TemplateFieldPatch) GetUriData() *UriFieldData {
	if x != nil {
		return x.UriData
	}
	return nil
}

// Data pertaining to a URI Field
type UriFieldData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expected MIME Type of content pointed to by URI. Can be generic (eg, "image/") or specific ("image/png").
	// Defaults to "application/octet-stream".
	MimeType string `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// How to display the URI value when rendering a credential.
	RenderMethod UriRenderMethod `protobuf:"varint,2,opt,name=render_method,json=renderMethod,proto3,enum=services.verifiablecredentials.templates.v1.UriRenderMethod" json:"render_method,omitempty"`
}

func (x *UriFieldData) Reset() {
	*x = UriFieldData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UriFieldData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UriFieldData) ProtoMessage() {}

func (x *UriFieldData) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UriFieldData.ProtoReflect.Descriptor instead.
func (*UriFieldData) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{17}
}

func (x *UriFieldData) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *UriFieldData) GetRenderMethod() UriRenderMethod {
	if x != nil {
		return x.RenderMethod
	}
	return UriRenderMethod_TEXT
}

// Request to fetch a template by ID
type GetVerificationTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of template to fetch
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVerificationTemplateRequest) Reset() {
	*x = GetVerificationTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVerificationTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVerificationTemplateRequest) ProtoMessage() {}

func (x *GetVerificationTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVerificationTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetVerificationTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{18}
}

func (x *GetVerificationTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response to `GetCredentialTemplateRequest`
type GetVerificationTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template fetched by ID
	Template *VerificationTemplateData `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *GetVerificationTemplateResponse) Reset() {
	*x = GetVerificationTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVerificationTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVerificationTemplateResponse) ProtoMessage() {}

func (x *GetVerificationTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVerificationTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetVerificationTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{19}
}

func (x *GetVerificationTemplateResponse) GetTemplate() *VerificationTemplateData {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreateVerificationTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of new template. Must be a unique identifier within its ecosystem.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields which will be required in the verification proof template
	Fields map[string]*VerificationTemplateField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // TODO - Add support for predicate types - currently only equality.
	// Source credential template, used for verifying that the specified `fields` are present in the credential template
	CredentialTemplateId string `protobuf:"bytes,3,opt,name=credential_template_id,json=credentialTemplateId,proto3" json:"credential_template_id,omitempty"`
	// Human-readable name of template
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// Human-readable description of template
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateVerificationTemplateRequest) Reset() {
	*x = CreateVerificationTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVerificationTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVerificationTemplateRequest) ProtoMessage() {}

func (x *CreateVerificationTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVerificationTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateVerificationTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{20}
}

func (x *CreateVerificationTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVerificationTemplateRequest) GetFields() map[string]*VerificationTemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateVerificationTemplateRequest) GetCredentialTemplateId() string {
	if x != nil {
		return x.CredentialTemplateId
	}
	return ""
}

func (x *CreateVerificationTemplateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateVerificationTemplateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateVerificationTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *VerificationTemplateData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateVerificationTemplateResponse) Reset() {
	*x = CreateVerificationTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVerificationTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVerificationTemplateResponse) ProtoMessage() {}

func (x *CreateVerificationTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVerificationTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateVerificationTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{21}
}

func (x *CreateVerificationTemplateResponse) GetData() *VerificationTemplateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateVerificationTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of Template to update
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// New human-readable title of Template
	Title *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	// New human-readable description of Template
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Fields to update within the Template
	Fields map[string]*VerificationTemplateFieldPatch `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateVerificationTemplateRequest) Reset() {
	*x = UpdateVerificationTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVerificationTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVerificationTemplateRequest) ProtoMessage() {}

func (x *UpdateVerificationTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVerificationTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateVerificationTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateVerificationTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateVerificationTemplateRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateVerificationTemplateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateVerificationTemplateRequest) GetFields() map[string]*VerificationTemplateFieldPatch {
	if x != nil {
		return x.Fields
	}
	return nil
}

type UpdateVerificationTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *VerificationTemplateData `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *UpdateVerificationTemplateResponse) Reset() {
	*x = UpdateVerificationTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVerificationTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVerificationTemplateResponse) ProtoMessage() {}

func (x *UpdateVerificationTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVerificationTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateVerificationTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateVerificationTemplateResponse) GetTemplate() *VerificationTemplateData {
	if x != nil {
		return x.Template
	}
	return nil
}

type DeleteVerificationTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationTemplateId string `protobuf:"bytes,1,opt,name=verification_template_id,json=verificationTemplateId,proto3" json:"verification_template_id,omitempty"`
}

func (x *DeleteVerificationTemplateRequest) Reset() {
	*x = DeleteVerificationTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVerificationTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVerificationTemplateRequest) ProtoMessage() {}

func (x *DeleteVerificationTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVerificationTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteVerificationTemplateRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteVerificationTemplateRequest) GetVerificationTemplateId() string {
	if x != nil {
		return x.VerificationTemplateId
	}
	return ""
}

type DeleteVerificationTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVerificationTemplateResponse) Reset() {
	*x = DeleteVerificationTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVerificationTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVerificationTemplateResponse) ProtoMessage() {}

func (x *DeleteVerificationTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVerificationTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteVerificationTemplateResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{25}
}

// Verification Template
type VerificationTemplateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Template name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Template version number
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Fields defined for the template
	Fields map[string]*VerificationTemplateField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Source credential template, used for verifying that the specified `fields` are present in the credential template
	CredentialTemplateId string `protobuf:"bytes,5,opt,name=credential_template_id,json=credentialTemplateId,proto3" json:"credential_template_id,omitempty"`
	// ID of ecosystem in which template resides
	EcosystemId string `protobuf:"bytes,8,opt,name=ecosystem_id,json=ecosystemId,proto3" json:"ecosystem_id,omitempty"`
	// Template type (`VerificationTemplate`)
	Type string `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	// ID of template creator
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Date when template was created as ISO 8601 utc string
	DateCreated string `protobuf:"bytes,11,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	// Human-readable template title
	Title string `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	// Human-readable template description
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *VerificationTemplateData) Reset() {
	*x = VerificationTemplateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationTemplateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationTemplateData) ProtoMessage() {}

func (x *VerificationTemplateData) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationTemplateData.ProtoReflect.Descriptor instead.
func (*VerificationTemplateData) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{26}
}

func (x *VerificationTemplateData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerificationTemplateData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VerificationTemplateData) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *VerificationTemplateData) GetFields() map[string]*VerificationTemplateField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *VerificationTemplateData) GetCredentialTemplateId() string {
	if x != nil {
		return x.CredentialTemplateId
	}
	return ""
}

func (x *VerificationTemplateData) GetEcosystemId() string {
	if x != nil {
		return x.EcosystemId
	}
	return ""
}

func (x *VerificationTemplateData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VerificationTemplateData) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *VerificationTemplateData) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *VerificationTemplateData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VerificationTemplateData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Request to list templates using a SQL query
type ListVerificationTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SQL query to execute. Example: `SELECT * FROM c WHERE c.name = 'Diploma'`
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Token provided by previous `ListCredentialTemplatesResponse`
	// if more data is available for query
	ContinuationToken string `protobuf:"bytes,2,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *ListVerificationTemplatesRequest) Reset() {
	*x = ListVerificationTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVerificationTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVerificationTemplatesRequest) ProtoMessage() {}

func (x *ListVerificationTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVerificationTemplatesRequest.ProtoReflect.Descriptor instead.
func (*ListVerificationTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{27}
}

func (x *ListVerificationTemplatesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListVerificationTemplatesRequest) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

type ListVerificationTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Templates found by query
	Templates []*VerificationTemplateData `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
	// Whether more results are available for this query via `continuation_token`
	HasMoreResults bool `protobuf:"varint,2,opt,name=has_more_results,json=hasMoreResults,proto3" json:"has_more_results,omitempty"`
	// Token to fetch next set of results via `ListVerificationTemplatesRequest`
	ContinuationToken string `protobuf:"bytes,3,opt,name=continuation_token,json=continuationToken,proto3" json:"continuation_token,omitempty"`
}

func (x *ListVerificationTemplatesResponse) Reset() {
	*x = ListVerificationTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVerificationTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVerificationTemplatesResponse) ProtoMessage() {}

func (x *ListVerificationTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVerificationTemplatesResponse.ProtoReflect.Descriptor instead.
func (*ListVerificationTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{28}
}

func (x *ListVerificationTemplatesResponse) GetTemplates() []*VerificationTemplateData {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *ListVerificationTemplatesResponse) GetHasMoreResults() bool {
	if x != nil {
		return x.HasMoreResults
	}
	return false
}

func (x *ListVerificationTemplatesResponse) GetContinuationToken() string {
	if x != nil {
		return x.ContinuationToken
	}
	return ""
}

// A field defined in a template
type VerificationTemplateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this field may be omitted on proof creation
	FieldShareType VerificationShareType `protobuf:"varint,1,opt,name=field_share_type,json=fieldShareType,proto3,enum=services.verifiablecredentials.templates.v1.VerificationShareType" json:"field_share_type,omitempty"`
	// User-facing explanation of what is done with this data
	UsagePolicy string `protobuf:"bytes,2,opt,name=usage_policy,json=usagePolicy,proto3" json:"usage_policy,omitempty"` // TODO - Future work supporting proof conditionals/ranges/etc
}

func (x *VerificationTemplateField) Reset() {
	*x = VerificationTemplateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationTemplateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationTemplateField) ProtoMessage() {}

func (x *VerificationTemplateField) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationTemplateField.ProtoReflect.Descriptor instead.
func (*VerificationTemplateField) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{29}
}

func (x *VerificationTemplateField) GetFieldShareType() VerificationShareType {
	if x != nil {
		return x.FieldShareType
	}
	return VerificationShareType_OPTIONAL
}

func (x *VerificationTemplateField) GetUsagePolicy() string {
	if x != nil {
		return x.UsagePolicy
	}
	return ""
}

// A patch to apply to an existing template field
type VerificationTemplateFieldPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of the field
	FieldShareType VerificationShareType `protobuf:"varint,1,opt,name=field_share_type,json=fieldShareType,proto3,enum=services.verifiablecredentials.templates.v1.VerificationShareType" json:"field_share_type,omitempty"`
	// User-facing explanation of what is done with this data
	UsagePolicy string `protobuf:"bytes,2,opt,name=usage_policy,json=usagePolicy,proto3" json:"usage_policy,omitempty"`
}

func (x *VerificationTemplateFieldPatch) Reset() {
	*x = VerificationTemplateFieldPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationTemplateFieldPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationTemplateFieldPatch) ProtoMessage() {}

func (x *VerificationTemplateFieldPatch) ProtoReflect() protoreflect.Message {
	mi := &file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationTemplateFieldPatch.ProtoReflect.Descriptor instead.
func (*VerificationTemplateFieldPatch) Descriptor() ([]byte, []int) {
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP(), []int{30}
}

func (x *VerificationTemplateFieldPatch) GetFieldShareType() VerificationShareType {
	if x != nil {
		return x.FieldShareType
	}
	return VerificationShareType_OPTIONAL
}

func (x *VerificationTemplateFieldPatch) GetUsagePolicy() string {
	if x != nil {
		return x.UsagePolicy
	}
	return ""
}

var File_services_verifiable_credentials_templates_v1_templates_proto protoreflect.FileDescriptor

var file_services_verifiable_credentials_templates_v1_templates_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x6d, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x9b, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6b, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x31, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x06, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x70, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x58, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x1a, 0x75, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x12, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x71, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x93, 0x06, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x76, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x7a, 0x0a, 0x0b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64,
	0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x22, 0xa3, 0x07, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x0e, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x71, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12,
	0x61, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x75, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x12, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x22, 0x86, 0x02, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x78, 0x69,
	0x6c, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x75, 0x72, 0x69, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x72, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x75, 0x72, 0x69, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xd8, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x08, 0x75, 0x72,
	0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x72, 0x69, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x07, 0x75, 0x72, 0x69, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a,
	0x0c, 0x55, 0x72, 0x69, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x30, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x72, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x03, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x72, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x5a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x61, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x5d, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x81, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x69, 0x22, 0x6d, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80,
	0xa6, 0x1d, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x09,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x19, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x6c, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x1e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x6c, 0x0a, 0x10,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2a, 0x44, 0x0a,
	0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52,
	0x49, 0x10, 0x05, 0x2a, 0x37, 0x0a, 0x0f, 0x55, 0x72, 0x69, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x33, 0x0a, 0x15,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x32, 0x9c, 0x13, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x49, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x12,
	0xc6, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x4b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xc8, 0x01, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x4d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a,
	0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x4c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0xfa, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3b, 0x8a, 0xa6, 0x1d, 0x04, 0x22, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xf6, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x8a, 0xa6, 0x1d, 0x04, 0x22,
	0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x8a, 0xa6,
	0x1d, 0x04, 0x22, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0xfa, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x8a, 0xa6, 0x1d, 0x04, 0x22, 0x02, 0x08, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0xfa, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x4e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x8a, 0xa6, 0x1d, 0x04, 0x22, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0xa3, 0x01, 0x0a, 0x33, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x34, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0xaa, 0x02, 0x33, 0x54, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_verifiable_credentials_templates_v1_templates_proto_rawDescOnce sync.Once
	file_services_verifiable_credentials_templates_v1_templates_proto_rawDescData = file_services_verifiable_credentials_templates_v1_templates_proto_rawDesc
)

func file_services_verifiable_credentials_templates_v1_templates_proto_rawDescGZIP() []byte {
	file_services_verifiable_credentials_templates_v1_templates_proto_rawDescOnce.Do(func() {
		file_services_verifiable_credentials_templates_v1_templates_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_verifiable_credentials_templates_v1_templates_proto_rawDescData)
	})
	return file_services_verifiable_credentials_templates_v1_templates_proto_rawDescData
}

var file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_services_verifiable_credentials_templates_v1_templates_proto_goTypes = []interface{}{
	(FieldType)(0),                             // 0: services.verifiablecredentials.templates.v1.FieldType
	(UriRenderMethod)(0),                       // 1: services.verifiablecredentials.templates.v1.UriRenderMethod
	(VerificationShareType)(0),                 // 2: services.verifiablecredentials.templates.v1.VerificationShareType
	(*GetCredentialTemplateRequest)(nil),       // 3: services.verifiablecredentials.templates.v1.GetCredentialTemplateRequest
	(*GetCredentialTemplateResponse)(nil),      // 4: services.verifiablecredentials.templates.v1.GetCredentialTemplateResponse
	(*SearchCredentialTemplatesRequest)(nil),   // 5: services.verifiablecredentials.templates.v1.SearchCredentialTemplatesRequest
	(*SearchCredentialTemplatesResponse)(nil),  // 6: services.verifiablecredentials.templates.v1.SearchCredentialTemplatesResponse
	(*ListCredentialTemplatesRequest)(nil),     // 7: services.verifiablecredentials.templates.v1.ListCredentialTemplatesRequest
	(*ListCredentialTemplatesResponse)(nil),    // 8: services.verifiablecredentials.templates.v1.ListCredentialTemplatesResponse
	(*DeleteCredentialTemplateRequest)(nil),    // 9: services.verifiablecredentials.templates.v1.DeleteCredentialTemplateRequest
	(*DeleteCredentialTemplateResponse)(nil),   // 10: services.verifiablecredentials.templates.v1.DeleteCredentialTemplateResponse
	(*CreateCredentialTemplateRequest)(nil),    // 11: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest
	(*CreateCredentialTemplateResponse)(nil),   // 12: services.verifiablecredentials.templates.v1.CreateCredentialTemplateResponse
	(*UpdateCredentialTemplateRequest)(nil),    // 13: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest
	(*UpdateCredentialTemplateResponse)(nil),   // 14: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateResponse
	(*TemplateData)(nil),                       // 15: services.verifiablecredentials.templates.v1.TemplateData
	(*AppleWalletOptions)(nil),                 // 16: services.verifiablecredentials.templates.v1.AppleWalletOptions
	(*FieldOrdering)(nil),                      // 17: services.verifiablecredentials.templates.v1.FieldOrdering
	(*TemplateField)(nil),                      // 18: services.verifiablecredentials.templates.v1.TemplateField
	(*TemplateFieldPatch)(nil),                 // 19: services.verifiablecredentials.templates.v1.TemplateFieldPatch
	(*UriFieldData)(nil),                       // 20: services.verifiablecredentials.templates.v1.UriFieldData
	(*GetVerificationTemplateRequest)(nil),     // 21: services.verifiablecredentials.templates.v1.GetVerificationTemplateRequest
	(*GetVerificationTemplateResponse)(nil),    // 22: services.verifiablecredentials.templates.v1.GetVerificationTemplateResponse
	(*CreateVerificationTemplateRequest)(nil),  // 23: services.verifiablecredentials.templates.v1.CreateVerificationTemplateRequest
	(*CreateVerificationTemplateResponse)(nil), // 24: services.verifiablecredentials.templates.v1.CreateVerificationTemplateResponse
	(*UpdateVerificationTemplateRequest)(nil),  // 25: services.verifiablecredentials.templates.v1.UpdateVerificationTemplateRequest
	(*UpdateVerificationTemplateResponse)(nil), // 26: services.verifiablecredentials.templates.v1.UpdateVerificationTemplateResponse
	(*DeleteVerificationTemplateRequest)(nil),  // 27: services.verifiablecredentials.templates.v1.DeleteVerificationTemplateRequest
	(*DeleteVerificationTemplateResponse)(nil), // 28: services.verifiablecredentials.templates.v1.DeleteVerificationTemplateResponse
	(*VerificationTemplateData)(nil),           // 29: services.verifiablecredentials.templates.v1.VerificationTemplateData
	(*ListVerificationTemplatesRequest)(nil),   // 30: services.verifiablecredentials.templates.v1.ListVerificationTemplatesRequest
	(*ListVerificationTemplatesResponse)(nil),  // 31: services.verifiablecredentials.templates.v1.ListVerificationTemplatesResponse
	(*VerificationTemplateField)(nil),          // 32: services.verifiablecredentials.templates.v1.VerificationTemplateField
	(*VerificationTemplateFieldPatch)(nil),     // 33: services.verifiablecredentials.templates.v1.VerificationTemplateFieldPatch
	nil,                                        // 34: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.FieldsEntry
	nil,                                        // 35: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.FieldOrderingEntry
	nil,                                        // 36: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.FieldsEntry
	nil,                                        // 37: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.FieldOrderingEntry
	nil,                                        // 38: services.verifiablecredentials.templates.v1.TemplateData.FieldsEntry
	nil,                                        // 39: services.verifiablecredentials.templates.v1.TemplateData.FieldOrderingEntry
	nil,                                        // 40: services.verifiablecredentials.templates.v1.CreateVerificationTemplateRequest.FieldsEntry
	nil,                                        // 41: services.verifiablecredentials.templates.v1.UpdateVerificationTemplateRequest.FieldsEntry
	nil,                                        // 42: services.verifiablecredentials.templates.v1.VerificationTemplateData.FieldsEntry
}
var file_services_verifiable_credentials_templates_v1_templates_proto_depIdxs = []int32{
	15, // 0: services.verifiablecredentials.templates.v1.GetCredentialTemplateResponse.template:type_name -> services.verifiablecredentials.templates.v1.TemplateData
	15, // 1: services.verifiablecredentials.templates.v1.ListCredentialTemplatesResponse.templates:type_name -> services.verifiablecredentials.templates.v1.TemplateData
	34, // 2: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.fields:type_name -> services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.FieldsEntry
	35, // 3: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.field_ordering:type_name -> services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.FieldOrderingEntry
	16, // 4: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.apple_wallet_options:type_name -> services.verifiablecredentials.templates.v1.AppleWalletOptions
	15, // 5: services.verifiablecredentials.templates.v1.CreateCredentialTemplateResponse.data:type_name -> services.verifiablecredentials.templates.v1.TemplateData
	36, // 6: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.fields:type_name -> services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.FieldsEntry
	37, // 7: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.field_ordering:type_name -> services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.FieldOrderingEntry
	16, // 8: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.apple_wallet_options:type_name -> services.verifiablecredentials.templates.v1.AppleWalletOptions
	15, // 9: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateResponse.updated_template:type_name -> services.verifiablecredentials.templates.v1.TemplateData
	38, // 10: services.verifiablecredentials.templates.v1.TemplateData.fields:type_name -> services.verifiablecredentials.templates.v1.TemplateData.FieldsEntry
	39, // 11: services.verifiablecredentials.templates.v1.TemplateData.field_ordering:type_name -> services.verifiablecredentials.templates.v1.TemplateData.FieldOrderingEntry
	16, // 12: services.verifiablecredentials.templates.v1.TemplateData.apple_wallet_options:type_name -> services.verifiablecredentials.templates.v1.AppleWalletOptions
	0,  // 13: services.verifiablecredentials.templates.v1.TemplateField.type:type_name -> services.verifiablecredentials.templates.v1.FieldType
	20, // 14: services.verifiablecredentials.templates.v1.TemplateField.uri_data:type_name -> services.verifiablecredentials.templates.v1.UriFieldData
	20, // 15: services.verifiablecredentials.templates.v1.TemplateFieldPatch.uri_data:type_name -> services.verifiablecredentials.templates.v1.UriFieldData
	1,  // 16: services.verifiablecredentials.templates.v1.UriFieldData.render_method:type_name -> services.verifiablecredentials.templates.v1.UriRenderMethod
	29, // 17: services.verifiablecredentials.templates.v1.GetVerificationTemplateResponse.template:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateData
	40, // 18: services.verifiablecredentials.templates.v1.CreateVerificationTemplateRequest.fields:type_name -> services.verifiablecredentials.templates.v1.CreateVerificationTemplateRequest.FieldsEntry
	29, // 19: services.verifiablecredentials.templates.v1.CreateVerificationTemplateResponse.data:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateData
	41, // 20: services.verifiablecredentials.templates.v1.UpdateVerificationTemplateRequest.fields:type_name -> services.verifiablecredentials.templates.v1.UpdateVerificationTemplateRequest.FieldsEntry
	29, // 21: services.verifiablecredentials.templates.v1.UpdateVerificationTemplateResponse.template:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateData
	42, // 22: services.verifiablecredentials.templates.v1.VerificationTemplateData.fields:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateData.FieldsEntry
	29, // 23: services.verifiablecredentials.templates.v1.ListVerificationTemplatesResponse.templates:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateData
	2,  // 24: services.verifiablecredentials.templates.v1.VerificationTemplateField.field_share_type:type_name -> services.verifiablecredentials.templates.v1.VerificationShareType
	2,  // 25: services.verifiablecredentials.templates.v1.VerificationTemplateFieldPatch.field_share_type:type_name -> services.verifiablecredentials.templates.v1.VerificationShareType
	18, // 26: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.FieldsEntry.value:type_name -> services.verifiablecredentials.templates.v1.TemplateField
	17, // 27: services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest.FieldOrderingEntry.value:type_name -> services.verifiablecredentials.templates.v1.FieldOrdering
	19, // 28: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.FieldsEntry.value:type_name -> services.verifiablecredentials.templates.v1.TemplateFieldPatch
	17, // 29: services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest.FieldOrderingEntry.value:type_name -> services.verifiablecredentials.templates.v1.FieldOrdering
	18, // 30: services.verifiablecredentials.templates.v1.TemplateData.FieldsEntry.value:type_name -> services.verifiablecredentials.templates.v1.TemplateField
	17, // 31: services.verifiablecredentials.templates.v1.TemplateData.FieldOrderingEntry.value:type_name -> services.verifiablecredentials.templates.v1.FieldOrdering
	32, // 32: services.verifiablecredentials.templates.v1.CreateVerificationTemplateRequest.FieldsEntry.value:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateField
	33, // 33: services.verifiablecredentials.templates.v1.UpdateVerificationTemplateRequest.FieldsEntry.value:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateFieldPatch
	32, // 34: services.verifiablecredentials.templates.v1.VerificationTemplateData.FieldsEntry.value:type_name -> services.verifiablecredentials.templates.v1.VerificationTemplateField
	11, // 35: services.verifiablecredentials.templates.v1.CredentialTemplates.Create:input_type -> services.verifiablecredentials.templates.v1.CreateCredentialTemplateRequest
	3,  // 36: services.verifiablecredentials.templates.v1.CredentialTemplates.Get:input_type -> services.verifiablecredentials.templates.v1.GetCredentialTemplateRequest
	13, // 37: services.verifiablecredentials.templates.v1.CredentialTemplates.Update:input_type -> services.verifiablecredentials.templates.v1.UpdateCredentialTemplateRequest
	7,  // 38: services.verifiablecredentials.templates.v1.CredentialTemplates.List:input_type -> services.verifiablecredentials.templates.v1.ListCredentialTemplatesRequest
	5,  // 39: services.verifiablecredentials.templates.v1.CredentialTemplates.Search:input_type -> services.verifiablecredentials.templates.v1.SearchCredentialTemplatesRequest
	9,  // 40: services.verifiablecredentials.templates.v1.CredentialTemplates.Delete:input_type -> services.verifiablecredentials.templates.v1.DeleteCredentialTemplateRequest
	23, // 41: services.verifiablecredentials.templates.v1.CredentialTemplates.CreateVerificationTemplate:input_type -> services.verifiablecredentials.templates.v1.CreateVerificationTemplateRequest
	30, // 42: services.verifiablecredentials.templates.v1.CredentialTemplates.ListVerificationTemplates:input_type -> services.verifiablecredentials.templates.v1.ListVerificationTemplatesRequest
	21, // 43: services.verifiablecredentials.templates.v1.CredentialTemplates.GetVerificationTemplate:input_type -> services.verifiablecredentials.templates.v1.GetVerificationTemplateRequest
	25, // 44: services.verifiablecredentials.templates.v1.CredentialTemplates.UpdateVerificationTemplate:input_type -> services.verifiablecredentials.templates.v1.UpdateVerificationTemplateRequest
	27, // 45: services.verifiablecredentials.templates.v1.CredentialTemplates.DeleteVerificationTemplate:input_type -> services.verifiablecredentials.templates.v1.DeleteVerificationTemplateRequest
	12, // 46: services.verifiablecredentials.templates.v1.CredentialTemplates.Create:output_type -> services.verifiablecredentials.templates.v1.CreateCredentialTemplateResponse
	4,  // 47: services.verifiablecredentials.templates.v1.CredentialTemplates.Get:output_type -> services.verifiablecredentials.templates.v1.GetCredentialTemplateResponse
	14, // 48: services.verifiablecredentials.templates.v1.CredentialTemplates.Update:output_type -> services.verifiablecredentials.templates.v1.UpdateCredentialTemplateResponse
	8,  // 49: services.verifiablecredentials.templates.v1.CredentialTemplates.List:output_type -> services.verifiablecredentials.templates.v1.ListCredentialTemplatesResponse
	6,  // 50: services.verifiablecredentials.templates.v1.CredentialTemplates.Search:output_type -> services.verifiablecredentials.templates.v1.SearchCredentialTemplatesResponse
	10, // 51: services.verifiablecredentials.templates.v1.CredentialTemplates.Delete:output_type -> services.verifiablecredentials.templates.v1.DeleteCredentialTemplateResponse
	24, // 52: services.verifiablecredentials.templates.v1.CredentialTemplates.CreateVerificationTemplate:output_type -> services.verifiablecredentials.templates.v1.CreateVerificationTemplateResponse
	31, // 53: services.verifiablecredentials.templates.v1.CredentialTemplates.ListVerificationTemplates:output_type -> services.verifiablecredentials.templates.v1.ListVerificationTemplatesResponse
	22, // 54: services.verifiablecredentials.templates.v1.CredentialTemplates.GetVerificationTemplate:output_type -> services.verifiablecredentials.templates.v1.GetVerificationTemplateResponse
	26, // 55: services.verifiablecredentials.templates.v1.CredentialTemplates.UpdateVerificationTemplate:output_type -> services.verifiablecredentials.templates.v1.UpdateVerificationTemplateResponse
	28, // 56: services.verifiablecredentials.templates.v1.CredentialTemplates.DeleteVerificationTemplate:output_type -> services.verifiablecredentials.templates.v1.DeleteVerificationTemplateResponse
	46, // [46:57] is the sub-list for method output_type
	35, // [35:46] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_services_verifiable_credentials_templates_v1_templates_proto_init() }
func file_services_verifiable_credentials_templates_v1_templates_proto_init() {
	if File_services_verifiable_credentials_templates_v1_templates_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCredentialTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCredentialTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCredentialTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCredentialTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCredentialTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCredentialTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCredentialTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCredentialTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleWalletOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOrdering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateFieldPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UriFieldData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVerificationTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVerificationTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVerificationTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVerificationTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVerificationTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVerificationTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVerificationTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVerificationTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationTemplateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVerificationTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVerificationTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationTemplateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationTemplateFieldPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_verifiable_credentials_templates_v1_templates_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_verifiable_credentials_templates_v1_templates_proto_goTypes,
		DependencyIndexes: file_services_verifiable_credentials_templates_v1_templates_proto_depIdxs,
		EnumInfos:         file_services_verifiable_credentials_templates_v1_templates_proto_enumTypes,
		MessageInfos:      file_services_verifiable_credentials_templates_v1_templates_proto_msgTypes,
	}.Build()
	File_services_verifiable_credentials_templates_v1_templates_proto = out.File
	file_services_verifiable_credentials_templates_v1_templates_proto_rawDesc = nil
	file_services_verifiable_credentials_templates_v1_templates_proto_goTypes = nil
	file_services_verifiable_credentials_templates_v1_templates_proto_depIdxs = nil
}
