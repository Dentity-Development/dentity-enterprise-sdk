// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: services/provider/v1/provider.proto

package provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Provider_CreateEcosystem_FullMethodName                  = "/services.provider.v1.Provider/CreateEcosystem"
	Provider_UpdateEcosystem_FullMethodName                  = "/services.provider.v1.Provider/UpdateEcosystem"
	Provider_GetOberonKey_FullMethodName                     = "/services.provider.v1.Provider/GetOberonKey"
	Provider_UpgradeDID_FullMethodName                       = "/services.provider.v1.Provider/UpgradeDID"
	Provider_RetrieveDomainVerificationRecord_FullMethodName = "/services.provider.v1.Provider/RetrieveDomainVerificationRecord"
	Provider_RefreshDomainVerificationStatus_FullMethodName  = "/services.provider.v1.Provider/RefreshDomainVerificationStatus"
	Provider_SearchWalletConfigurations_FullMethodName       = "/services.provider.v1.Provider/SearchWalletConfigurations"
)

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderClient interface {
	// Create new ecosystem and assign the authenticated user as owner
	CreateEcosystem(ctx context.Context, in *CreateEcosystemRequest, opts ...grpc.CallOption) (*CreateEcosystemResponse, error)
	// Deprecated: Do not use.
	// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
	// DEPRECATED, will be removed June 1st 2023
	UpdateEcosystem(ctx context.Context, in *UpdateEcosystemRequest, opts ...grpc.CallOption) (*UpdateEcosystemResponse, error)
	// Returns the public key being used to create/verify oberon tokens
	GetOberonKey(ctx context.Context, in *GetOberonKeyRequest, opts ...grpc.CallOption) (*GetOberonKeyResponse, error)
	// Upgrade a wallet's DID from `did:key` to another method
	UpgradeDID(ctx context.Context, in *UpgradeDidRequest, opts ...grpc.CallOption) (*UpgradeDidResponse, error)
	// Retrieve a random hash TXT that can be used to verify domain ownership
	RetrieveDomainVerificationRecord(ctx context.Context, in *RetrieveDomainVerificationRecordRequest, opts ...grpc.CallOption) (*RetrieveDomainVerificationRecordResponse, error)
	// Call to verify domain
	RefreshDomainVerificationStatus(ctx context.Context, in *RefreshDomainVerificationStatusRequest, opts ...grpc.CallOption) (*RefreshDomainVerificationStatusResponse, error)
	// Search for issuers/providers/verifiers in the current ecosystem
	SearchWalletConfigurations(ctx context.Context, in *SearchWalletConfigurationsRequest, opts ...grpc.CallOption) (*SearchWalletConfigurationResponse, error)
}

type providerClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderClient(cc grpc.ClientConnInterface) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) CreateEcosystem(ctx context.Context, in *CreateEcosystemRequest, opts ...grpc.CallOption) (*CreateEcosystemResponse, error) {
	out := new(CreateEcosystemResponse)
	err := c.cc.Invoke(ctx, Provider_CreateEcosystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *providerClient) UpdateEcosystem(ctx context.Context, in *UpdateEcosystemRequest, opts ...grpc.CallOption) (*UpdateEcosystemResponse, error) {
	out := new(UpdateEcosystemResponse)
	err := c.cc.Invoke(ctx, Provider_UpdateEcosystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GetOberonKey(ctx context.Context, in *GetOberonKeyRequest, opts ...grpc.CallOption) (*GetOberonKeyResponse, error) {
	out := new(GetOberonKeyResponse)
	err := c.cc.Invoke(ctx, Provider_GetOberonKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) UpgradeDID(ctx context.Context, in *UpgradeDidRequest, opts ...grpc.CallOption) (*UpgradeDidResponse, error) {
	out := new(UpgradeDidResponse)
	err := c.cc.Invoke(ctx, Provider_UpgradeDID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) RetrieveDomainVerificationRecord(ctx context.Context, in *RetrieveDomainVerificationRecordRequest, opts ...grpc.CallOption) (*RetrieveDomainVerificationRecordResponse, error) {
	out := new(RetrieveDomainVerificationRecordResponse)
	err := c.cc.Invoke(ctx, Provider_RetrieveDomainVerificationRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) RefreshDomainVerificationStatus(ctx context.Context, in *RefreshDomainVerificationStatusRequest, opts ...grpc.CallOption) (*RefreshDomainVerificationStatusResponse, error) {
	out := new(RefreshDomainVerificationStatusResponse)
	err := c.cc.Invoke(ctx, Provider_RefreshDomainVerificationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) SearchWalletConfigurations(ctx context.Context, in *SearchWalletConfigurationsRequest, opts ...grpc.CallOption) (*SearchWalletConfigurationResponse, error) {
	out := new(SearchWalletConfigurationResponse)
	err := c.cc.Invoke(ctx, Provider_SearchWalletConfigurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
// All implementations must embed UnimplementedProviderServer
// for forward compatibility
type ProviderServer interface {
	// Create new ecosystem and assign the authenticated user as owner
	CreateEcosystem(context.Context, *CreateEcosystemRequest) (*CreateEcosystemResponse, error)
	// Deprecated: Do not use.
	// The below display can be removed only once the Dashboard is updating this itself - currently it uses this request
	// DEPRECATED, will be removed June 1st 2023
	UpdateEcosystem(context.Context, *UpdateEcosystemRequest) (*UpdateEcosystemResponse, error)
	// Returns the public key being used to create/verify oberon tokens
	GetOberonKey(context.Context, *GetOberonKeyRequest) (*GetOberonKeyResponse, error)
	// Upgrade a wallet's DID from `did:key` to another method
	UpgradeDID(context.Context, *UpgradeDidRequest) (*UpgradeDidResponse, error)
	// Retrieve a random hash TXT that can be used to verify domain ownership
	RetrieveDomainVerificationRecord(context.Context, *RetrieveDomainVerificationRecordRequest) (*RetrieveDomainVerificationRecordResponse, error)
	// Call to verify domain
	RefreshDomainVerificationStatus(context.Context, *RefreshDomainVerificationStatusRequest) (*RefreshDomainVerificationStatusResponse, error)
	// Search for issuers/providers/verifiers in the current ecosystem
	SearchWalletConfigurations(context.Context, *SearchWalletConfigurationsRequest) (*SearchWalletConfigurationResponse, error)
	mustEmbedUnimplementedProviderServer()
}

// UnimplementedProviderServer must be embedded to have forward compatible implementations.
type UnimplementedProviderServer struct {
}

func (UnimplementedProviderServer) CreateEcosystem(context.Context, *CreateEcosystemRequest) (*CreateEcosystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEcosystem not implemented")
}
func (UnimplementedProviderServer) UpdateEcosystem(context.Context, *UpdateEcosystemRequest) (*UpdateEcosystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEcosystem not implemented")
}
func (UnimplementedProviderServer) GetOberonKey(context.Context, *GetOberonKeyRequest) (*GetOberonKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOberonKey not implemented")
}
func (UnimplementedProviderServer) UpgradeDID(context.Context, *UpgradeDidRequest) (*UpgradeDidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeDID not implemented")
}
func (UnimplementedProviderServer) RetrieveDomainVerificationRecord(context.Context, *RetrieveDomainVerificationRecordRequest) (*RetrieveDomainVerificationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveDomainVerificationRecord not implemented")
}
func (UnimplementedProviderServer) RefreshDomainVerificationStatus(context.Context, *RefreshDomainVerificationStatusRequest) (*RefreshDomainVerificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshDomainVerificationStatus not implemented")
}
func (UnimplementedProviderServer) SearchWalletConfigurations(context.Context, *SearchWalletConfigurationsRequest) (*SearchWalletConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWalletConfigurations not implemented")
}
func (UnimplementedProviderServer) mustEmbedUnimplementedProviderServer() {}

// UnsafeProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServer will
// result in compilation errors.
type UnsafeProviderServer interface {
	mustEmbedUnimplementedProviderServer()
}

func RegisterProviderServer(s grpc.ServiceRegistrar, srv ProviderServer) {
	s.RegisterService(&Provider_ServiceDesc, srv)
}

func _Provider_CreateEcosystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEcosystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).CreateEcosystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_CreateEcosystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).CreateEcosystem(ctx, req.(*CreateEcosystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpdateEcosystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEcosystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpdateEcosystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_UpdateEcosystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpdateEcosystem(ctx, req.(*UpdateEcosystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GetOberonKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOberonKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GetOberonKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_GetOberonKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GetOberonKey(ctx, req.(*GetOberonKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_UpgradeDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeDidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).UpgradeDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_UpgradeDID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).UpgradeDID(ctx, req.(*UpgradeDidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_RetrieveDomainVerificationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveDomainVerificationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RetrieveDomainVerificationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_RetrieveDomainVerificationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RetrieveDomainVerificationRecord(ctx, req.(*RetrieveDomainVerificationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_RefreshDomainVerificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshDomainVerificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RefreshDomainVerificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_RefreshDomainVerificationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RefreshDomainVerificationStatus(ctx, req.(*RefreshDomainVerificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_SearchWalletConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWalletConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).SearchWalletConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provider_SearchWalletConfigurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).SearchWalletConfigurations(ctx, req.(*SearchWalletConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provider_ServiceDesc is the grpc.ServiceDesc for Provider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.provider.v1.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEcosystem",
			Handler:    _Provider_CreateEcosystem_Handler,
		},
		{
			MethodName: "UpdateEcosystem",
			Handler:    _Provider_UpdateEcosystem_Handler,
		},
		{
			MethodName: "GetOberonKey",
			Handler:    _Provider_GetOberonKey_Handler,
		},
		{
			MethodName: "UpgradeDID",
			Handler:    _Provider_UpgradeDID_Handler,
		},
		{
			MethodName: "RetrieveDomainVerificationRecord",
			Handler:    _Provider_RetrieveDomainVerificationRecord_Handler,
		},
		{
			MethodName: "RefreshDomainVerificationStatus",
			Handler:    _Provider_RefreshDomainVerificationStatus_Handler,
		},
		{
			MethodName: "SearchWalletConfigurations",
			Handler:    _Provider_SearchWalletConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/provider/v1/provider.proto",
}
