// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: services/connect/v1/connect.proto

package connect

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of verification to perform
type VerificationType int32

const (
	// Government-issued ID (driver's license, passport, etc)
	VerificationType_GOVERNMENT_ID VerificationType = 0
)

// Enum value maps for VerificationType.
var (
	VerificationType_name = map[int32]string{
		0: "GOVERNMENT_ID",
	}
	VerificationType_value = map[string]int32{
		"GOVERNMENT_ID": 0,
	}
)

func (x VerificationType) Enum() *VerificationType {
	p := new(VerificationType)
	*p = x
	return p
}

func (x VerificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[0].Descriptor()
}

func (VerificationType) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[0]
}

func (x VerificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationType.Descriptor instead.
func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{0}
}

// The states a VerificationSession can be in
type IDVSessionState int32

const (
	// Session has been created, but not yet shown to user
	IDVSessionState_IDV_CREATED IDVSessionState = 0
	// Session has been shown to user (iframe / popup opened), but
	// user has not yet logged in.
	IDVSessionState_IDV_INITIATED IDVSessionState = 1
	// User has entered their phone number, but not yet authenticated with the code sent via SMS
	IDVSessionState_IDV_AUTHENTICATING IDVSessionState = 2
	// User has been authenticated and is performing identity verification
	IDVSessionState_IDV_IN_PROGRESS IDVSessionState = 3
	// Session was completed successfully and IDV data is available to RP
	IDVSessionState_IDV_SUCCESS IDVSessionState = 4
	// User explicitly canceled session / did not consent
	IDVSessionState_IDV_USER_CANCELED IDVSessionState = 5
	// Session was not completed within {X} timeframe from creation and expired
	IDVSessionState_IDV_EXPIRED IDVSessionState = 6
	// Relying Party canceled the session via the SDK
	IDVSessionState_IDV_RP_CANCELED IDVSessionState = 7
	// The user's identity was not deemed legitimate by the IDV
	IDVSessionState_IDV_FAILED IDVSessionState = 8
)

// Enum value maps for IDVSessionState.
var (
	IDVSessionState_name = map[int32]string{
		0: "IDV_CREATED",
		1: "IDV_INITIATED",
		2: "IDV_AUTHENTICATING",
		3: "IDV_IN_PROGRESS",
		4: "IDV_SUCCESS",
		5: "IDV_USER_CANCELED",
		6: "IDV_EXPIRED",
		7: "IDV_RP_CANCELED",
		8: "IDV_FAILED",
	}
	IDVSessionState_value = map[string]int32{
		"IDV_CREATED":        0,
		"IDV_INITIATED":      1,
		"IDV_AUTHENTICATING": 2,
		"IDV_IN_PROGRESS":    3,
		"IDV_SUCCESS":        4,
		"IDV_USER_CANCELED":  5,
		"IDV_EXPIRED":        6,
		"IDV_RP_CANCELED":    7,
		"IDV_FAILED":         8,
	}
)

func (x IDVSessionState) Enum() *IDVSessionState {
	p := new(IDVSessionState)
	*p = x
	return p
}

func (x IDVSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDVSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[1].Descriptor()
}

func (IDVSessionState) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[1]
}

func (x IDVSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDVSessionState.Descriptor instead.
func (IDVSessionState) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{1}
}

// The states an individual Verification can be in
type VerificationState int32

const (
	// This verification has not yet been performed in the flow
	VerificationState_VERIFICATION_PENDING VerificationState = 0
	// This verification has been started by the user, and can be reused from a previous verification, but the user
	// has not yet decided whether to reuse it.
	VerificationState_VERIFICATION_PENDING_REUSE VerificationState = 1
	// This verification has been started by the user, but not yet completed
	VerificationState_VERIFICATION_STARTED VerificationState = 2
	// This verification has been successfully completed
	VerificationState_VERIFICATION_SUCCESS VerificationState = 3
	// This verification has failed
	VerificationState_VERIFICATION_FAILED VerificationState = 4
)

// Enum value maps for VerificationState.
var (
	VerificationState_name = map[int32]string{
		0: "VERIFICATION_PENDING",
		1: "VERIFICATION_PENDING_REUSE",
		2: "VERIFICATION_STARTED",
		3: "VERIFICATION_SUCCESS",
		4: "VERIFICATION_FAILED",
	}
	VerificationState_value = map[string]int32{
		"VERIFICATION_PENDING":       0,
		"VERIFICATION_PENDING_REUSE": 1,
		"VERIFICATION_STARTED":       2,
		"VERIFICATION_SUCCESS":       3,
		"VERIFICATION_FAILED":        4,
	}
)

func (x VerificationState) Enum() *VerificationState {
	p := new(VerificationState)
	*p = x
	return p
}

func (x VerificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[2].Descriptor()
}

func (VerificationState) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[2]
}

func (x VerificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationState.Descriptor instead.
func (VerificationState) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{2}
}

// An Identity Verification Session
type IDVSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the IDVSession.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Client Token for this IDVSession. This should be passed to your frontend to initiate
	// the IDV flow using Trinsic's Web SDK.
	ClientToken string `protobuf:"bytes,2,opt,name=client_token,json=clientToken,proto3" json:"client_token,omitempty"`
	// State of the IDVSession
	State IDVSessionState `protobuf:"varint,3,opt,name=state,proto3,enum=services.connect.v1.IDVSessionState" json:"state,omitempty"`
	// The actual Verifications to perform in this IDV flow
	Verifications map[string]*Verification `protobuf:"bytes,4,rep,name=verifications,proto3" json:"verifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The resultant signed VP combining the results of all verifications
	ResultVp *string `protobuf:"bytes,5,opt,name=result_vp,json=resultVp,proto3,oneof" json:"result_vp,omitempty"`
	// The unix timestamp, in seconds, that this IDVSession was created
	Created uint64 `protobuf:"fixed64,6,opt,name=created,proto3" json:"created,omitempty"`
	// The unix timestamp, in seconds, that this IDVSession's `state` was last updated
	Updated uint64 `protobuf:"fixed64,7,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *IDVSession) Reset() {
	*x = IDVSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDVSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDVSession) ProtoMessage() {}

func (x *IDVSession) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDVSession.ProtoReflect.Descriptor instead.
func (*IDVSession) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{0}
}

func (x *IDVSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDVSession) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *IDVSession) GetState() IDVSessionState {
	if x != nil {
		return x.State
	}
	return IDVSessionState_IDV_CREATED
}

func (x *IDVSession) GetVerifications() map[string]*Verification {
	if x != nil {
		return x.Verifications
	}
	return nil
}

func (x *IDVSession) GetResultVp() string {
	if x != nil && x.ResultVp != nil {
		return *x.ResultVp
	}
	return ""
}

func (x *IDVSession) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *IDVSession) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// A Verification that is part of an IDVSession
type Verification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the verification
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of verification (driver's license, passport, proof of address, etc)
	Type VerificationType `protobuf:"varint,2,opt,name=type,proto3,enum=services.connect.v1.VerificationType" json:"type,omitempty"`
	// The state of the verification
	State VerificationState `protobuf:"varint,3,opt,name=state,proto3,enum=services.connect.v1.VerificationState" json:"state,omitempty"`
	// Whether this was a reused (true) or fresh (false) verification.
	// If `state` is not `VERIFICATION_SUCCESS`, this field is `false` and does not convey useful information.
	Reused bool `protobuf:"varint,4,opt,name=reused,proto3" json:"reused,omitempty"`
	// The unix timestamp, in seconds, when this verification was begun
	// by the user -- or `0` if not yet begun.
	Begun uint64 `protobuf:"fixed64,5,opt,name=begun,proto3" json:"begun,omitempty"`
	// The unix timestamp, in seconds, when this verification last changed state -- o
	Updated uint64 `protobuf:"fixed64,6,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Verification) Reset() {
	*x = Verification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verification) ProtoMessage() {}

func (x *Verification) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verification.ProtoReflect.Descriptor instead.
func (*Verification) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{1}
}

func (x *Verification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Verification) GetType() VerificationType {
	if x != nil {
		return x.Type
	}
	return VerificationType_GOVERNMENT_ID
}

func (x *Verification) GetState() VerificationState {
	if x != nil {
		return x.State
	}
	return VerificationState_VERIFICATION_PENDING
}

func (x *Verification) GetReused() bool {
	if x != nil {
		return x.Reused
	}
	return false
}

func (x *Verification) GetBegun() uint64 {
	if x != nil {
		return x.Begun
	}
	return 0
}

func (x *Verification) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// Request to create an Identity Verification Session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of verifications to perform
	Verifications []*RequestedVerification `protobuf:"bytes,1,rep,name=verifications,proto3" json:"verifications,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionRequest) GetVerifications() []*RequestedVerification {
	if x != nil {
		return x.Verifications
	}
	return nil
}

// A verification to perform in an IDV flow
type RequestedVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of verification to perform
	Type VerificationType `protobuf:"varint,1,opt,name=type,proto3,enum=services.connect.v1.VerificationType" json:"type,omitempty"`
}

func (x *RequestedVerification) Reset() {
	*x = RequestedVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedVerification) ProtoMessage() {}

func (x *RequestedVerification) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedVerification.ProtoReflect.Descriptor instead.
func (*RequestedVerification) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{3}
}

func (x *RequestedVerification) GetType() VerificationType {
	if x != nil {
		return x.Type
	}
	return VerificationType_GOVERNMENT_ID
}

// Response to `CreateIDVSessionRequest`
type CreateSessionResponse2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created IDVSession
	Session *IDVSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse2) Reset() {
	*x = CreateSessionResponse2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse2) ProtoMessage() {}

func (x *CreateSessionResponse2) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse2.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse2) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionResponse2) GetSession() *IDVSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Request to cancel an Identity Verification Session
type CancelSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the IDVSession to cancel
	IdvSessionId string `protobuf:"bytes,1,opt,name=idv_session_id,json=idvSessionId,proto3" json:"idv_session_id,omitempty"`
}

func (x *CancelSessionRequest) Reset() {
	*x = CancelSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSessionRequest) ProtoMessage() {}

func (x *CancelSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSessionRequest.ProtoReflect.Descriptor instead.
func (*CancelSessionRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{5}
}

func (x *CancelSessionRequest) GetIdvSessionId() string {
	if x != nil {
		return x.IdvSessionId
	}
	return ""
}

// Response to `CancelIDVSessionRequest`
type CancelSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDVSession in its current state after cancellation
	Session *IDVSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CancelSessionResponse) Reset() {
	*x = CancelSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSessionResponse) ProtoMessage() {}

func (x *CancelSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSessionResponse.ProtoReflect.Descriptor instead.
func (*CancelSessionResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{6}
}

func (x *CancelSessionResponse) GetSession() *IDVSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Request to get an IDVSession
type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the IDVSession to get
	IdvSessionId string `protobuf:"bytes,1,opt,name=idv_session_id,json=idvSessionId,proto3" json:"idv_session_id,omitempty"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{7}
}

func (x *GetSessionRequest) GetIdvSessionId() string {
	if x != nil {
		return x.IdvSessionId
	}
	return ""
}

// Response to `GetIDVSessionRequest`
type GetSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDVSession
	Session *IDVSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{8}
}

func (x *GetSessionResponse) GetSession() *IDVSession {
	if x != nil {
		return x.Session
	}
	return nil
}

var File_services_connect_v1_connect_proto protoreflect.FileDescriptor

var file_services_connect_v1_connect_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x9e, 0x03, 0x0a, 0x0a, 0x49, 0x44, 0x56,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x63, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x70, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x65, 0x67, 0x75, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x62, 0x65, 0x67, 0x75,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c,
	0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x64, 0x76, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x64, 0x76, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x15,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x64, 0x76, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x64, 0x76, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x25, 0x0a, 0x10,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x2a, 0xc0, 0x01, 0x0a, 0x0f, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x56, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44, 0x56, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x44, 0x56, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x56, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x56, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x44, 0x56,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44, 0x56, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x56, 0x5f, 0x52, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44, 0x56, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x9a, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x32, 0xb9, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x67, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x12, 0x66, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x5a, 0x0a, 0x1b, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0xaa, 0x02, 0x1b,
	0x54, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_services_connect_v1_connect_proto_rawDescOnce sync.Once
	file_services_connect_v1_connect_proto_rawDescData = file_services_connect_v1_connect_proto_rawDesc
)

func file_services_connect_v1_connect_proto_rawDescGZIP() []byte {
	file_services_connect_v1_connect_proto_rawDescOnce.Do(func() {
		file_services_connect_v1_connect_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_connect_v1_connect_proto_rawDescData)
	})
	return file_services_connect_v1_connect_proto_rawDescData
}

var file_services_connect_v1_connect_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_services_connect_v1_connect_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_services_connect_v1_connect_proto_goTypes = []interface{}{
	(VerificationType)(0),          // 0: services.connect.v1.VerificationType
	(IDVSessionState)(0),           // 1: services.connect.v1.IDVSessionState
	(VerificationState)(0),         // 2: services.connect.v1.VerificationState
	(*IDVSession)(nil),             // 3: services.connect.v1.IDVSession
	(*Verification)(nil),           // 4: services.connect.v1.Verification
	(*CreateSessionRequest)(nil),   // 5: services.connect.v1.CreateSessionRequest
	(*RequestedVerification)(nil),  // 6: services.connect.v1.RequestedVerification
	(*CreateSessionResponse2)(nil), // 7: services.connect.v1.CreateSessionResponse2
	(*CancelSessionRequest)(nil),   // 8: services.connect.v1.CancelSessionRequest
	(*CancelSessionResponse)(nil),  // 9: services.connect.v1.CancelSessionResponse
	(*GetSessionRequest)(nil),      // 10: services.connect.v1.GetSessionRequest
	(*GetSessionResponse)(nil),     // 11: services.connect.v1.GetSessionResponse
	nil,                            // 12: services.connect.v1.IDVSession.VerificationsEntry
}
var file_services_connect_v1_connect_proto_depIdxs = []int32{
	1,  // 0: services.connect.v1.IDVSession.state:type_name -> services.connect.v1.IDVSessionState
	12, // 1: services.connect.v1.IDVSession.verifications:type_name -> services.connect.v1.IDVSession.VerificationsEntry
	0,  // 2: services.connect.v1.Verification.type:type_name -> services.connect.v1.VerificationType
	2,  // 3: services.connect.v1.Verification.state:type_name -> services.connect.v1.VerificationState
	6,  // 4: services.connect.v1.CreateSessionRequest.verifications:type_name -> services.connect.v1.RequestedVerification
	0,  // 5: services.connect.v1.RequestedVerification.type:type_name -> services.connect.v1.VerificationType
	3,  // 6: services.connect.v1.CreateSessionResponse2.session:type_name -> services.connect.v1.IDVSession
	3,  // 7: services.connect.v1.CancelSessionResponse.session:type_name -> services.connect.v1.IDVSession
	3,  // 8: services.connect.v1.GetSessionResponse.session:type_name -> services.connect.v1.IDVSession
	4,  // 9: services.connect.v1.IDVSession.VerificationsEntry.value:type_name -> services.connect.v1.Verification
	5,  // 10: services.connect.v1.Connect.CreateSession:input_type -> services.connect.v1.CreateSessionRequest
	8,  // 11: services.connect.v1.Connect.CancelSession:input_type -> services.connect.v1.CancelSessionRequest
	10, // 12: services.connect.v1.Connect.GetSession:input_type -> services.connect.v1.GetSessionRequest
	7,  // 13: services.connect.v1.Connect.CreateSession:output_type -> services.connect.v1.CreateSessionResponse2
	9,  // 14: services.connect.v1.Connect.CancelSession:output_type -> services.connect.v1.CancelSessionResponse
	11, // 15: services.connect.v1.Connect.GetSession:output_type -> services.connect.v1.GetSessionResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_services_connect_v1_connect_proto_init() }
func file_services_connect_v1_connect_proto_init() {
	if File_services_connect_v1_connect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_connect_v1_connect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDVSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_connect_v1_connect_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_connect_v1_connect_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_connect_v1_connect_proto_goTypes,
		DependencyIndexes: file_services_connect_v1_connect_proto_depIdxs,
		EnumInfos:         file_services_connect_v1_connect_proto_enumTypes,
		MessageInfos:      file_services_connect_v1_connect_proto_msgTypes,
	}.Build()
	File_services_connect_v1_connect_proto = out.File
	file_services_connect_v1_connect_proto_rawDesc = nil
	file_services_connect_v1_connect_proto_goTypes = nil
	file_services_connect_v1_connect_proto_depIdxs = nil
}
