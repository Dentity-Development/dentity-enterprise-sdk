// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: services/connect/v1/connect.proto

package connect

import (
	common "github.com/trinsic-id/sdk/go/proto/services/common/v1/common"
	wallet "github.com/trinsic-id/sdk/go/proto/services/universalwallet/v1/wallet"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of verification to perform
type VerificationType int32

const (
	// Government-issued ID (driver's license, passport, etc)
	VerificationType_GOVERNMENT_ID VerificationType = 0
)

// Enum value maps for VerificationType.
var (
	VerificationType_name = map[int32]string{
		0: "GOVERNMENT_ID",
	}
	VerificationType_value = map[string]int32{
		"GOVERNMENT_ID": 0,
	}
)

func (x VerificationType) Enum() *VerificationType {
	p := new(VerificationType)
	*p = x
	return p
}

func (x VerificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[0].Descriptor()
}

func (VerificationType) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[0]
}

func (x VerificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationType.Descriptor instead.
func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{0}
}

// The states a VerificationSession can be in
type IDVSessionState int32

const (
	// Session has been created, but not yet shown to user
	IDVSessionState_IDV_CREATED IDVSessionState = 0
	// Session has been shown to user (iframe / popup opened), but
	// user has not yet logged in.
	IDVSessionState_IDV_INITIATED IDVSessionState = 1
	// User has entered their phone number, but not yet authenticated with the code sent via SMS
	IDVSessionState_IDV_AUTHENTICATING IDVSessionState = 2
	// User has been authenticated and is performing identity verification
	IDVSessionState_IDV_IN_PROGRESS IDVSessionState = 3
	// Session was completed successfully and IDV data is available to RP
	IDVSessionState_IDV_SUCCESS IDVSessionState = 4
	// The session failed; reason is present in `fail_code`.
	IDVSessionState_IDV_FAILED IDVSessionState = 5
)

// Enum value maps for IDVSessionState.
var (
	IDVSessionState_name = map[int32]string{
		0: "IDV_CREATED",
		1: "IDV_INITIATED",
		2: "IDV_AUTHENTICATING",
		3: "IDV_IN_PROGRESS",
		4: "IDV_SUCCESS",
		5: "IDV_FAILED",
	}
	IDVSessionState_value = map[string]int32{
		"IDV_CREATED":        0,
		"IDV_INITIATED":      1,
		"IDV_AUTHENTICATING": 2,
		"IDV_IN_PROGRESS":    3,
		"IDV_SUCCESS":        4,
		"IDV_FAILED":         5,
	}
)

func (x IDVSessionState) Enum() *IDVSessionState {
	p := new(IDVSessionState)
	*p = x
	return p
}

func (x IDVSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDVSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[1].Descriptor()
}

func (IDVSessionState) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[1]
}

func (x IDVSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDVSessionState.Descriptor instead.
func (IDVSessionState) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{1}
}

// The states an individual Verification can be in
type VerificationState int32

const (
	// This verification has not yet been performed in the flow
	VerificationState_VERIFICATION_PENDING VerificationState = 0
	// This verification has been started by the user, and can be reused from a previous verification, but the user
	// has not yet decided whether to reuse it.
	VerificationState_VERIFICATION_PENDING_REUSE VerificationState = 1
	// This verification has been started by the user, but not yet completed
	VerificationState_VERIFICATION_STARTED VerificationState = 2
	// This verification has been successfully completed
	VerificationState_VERIFICATION_SUCCESS VerificationState = 3
	// This verification has failed
	VerificationState_VERIFICATION_FAILED VerificationState = 4
)

// Enum value maps for VerificationState.
var (
	VerificationState_name = map[int32]string{
		0: "VERIFICATION_PENDING",
		1: "VERIFICATION_PENDING_REUSE",
		2: "VERIFICATION_STARTED",
		3: "VERIFICATION_SUCCESS",
		4: "VERIFICATION_FAILED",
	}
	VerificationState_value = map[string]int32{
		"VERIFICATION_PENDING":       0,
		"VERIFICATION_PENDING_REUSE": 1,
		"VERIFICATION_STARTED":       2,
		"VERIFICATION_SUCCESS":       3,
		"VERIFICATION_FAILED":        4,
	}
)

func (x VerificationState) Enum() *VerificationState {
	p := new(VerificationState)
	*p = x
	return p
}

func (x VerificationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationState) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[2].Descriptor()
}

func (VerificationState) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[2]
}

func (x VerificationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationState.Descriptor instead.
func (VerificationState) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{2}
}

// The specific reason an IDVSession is in the `Failed` state
type SessionFailCode int32

const (
	// The Session is not in a failure state.
	SessionFailCode_SESSION_FAIL_NONE SessionFailCode = 0
	// An internal Trinsic error caused this session to fail
	SessionFailCode_SESSION_FAIL_INTERNAL SessionFailCode = 1
	// The session failed because one or more of the verifications failed.
	// The reason for the failure is present in the `fail_reason` field of the relevant `Verification` object(s).
	SessionFailCode_SESSION_FAIL_VERIFICATION_FAILED SessionFailCode = 2
	// The session failed because the user failed to authenticate with their phone number too many times.
	SessionFailCode_SESSION_FAIL_AUTHENTICATION SessionFailCode = 3
	// The session expired
	SessionFailCode_SESSION_FAIL_EXPIRED SessionFailCode = 4
	// The user canceled / rejected the session
	SessionFailCode_SESSION_FAIL_USER_CANCELED SessionFailCode = 5
	// The RP canceled the session
	SessionFailCode_SESSION_FAIL_RP_CANCELED SessionFailCode = 6
)

// Enum value maps for SessionFailCode.
var (
	SessionFailCode_name = map[int32]string{
		0: "SESSION_FAIL_NONE",
		1: "SESSION_FAIL_INTERNAL",
		2: "SESSION_FAIL_VERIFICATION_FAILED",
		3: "SESSION_FAIL_AUTHENTICATION",
		4: "SESSION_FAIL_EXPIRED",
		5: "SESSION_FAIL_USER_CANCELED",
		6: "SESSION_FAIL_RP_CANCELED",
	}
	SessionFailCode_value = map[string]int32{
		"SESSION_FAIL_NONE":                0,
		"SESSION_FAIL_INTERNAL":            1,
		"SESSION_FAIL_VERIFICATION_FAILED": 2,
		"SESSION_FAIL_AUTHENTICATION":      3,
		"SESSION_FAIL_EXPIRED":             4,
		"SESSION_FAIL_USER_CANCELED":       5,
		"SESSION_FAIL_RP_CANCELED":         6,
	}
)

func (x SessionFailCode) Enum() *SessionFailCode {
	p := new(SessionFailCode)
	*p = x
	return p
}

func (x SessionFailCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionFailCode) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[3].Descriptor()
}

func (SessionFailCode) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[3]
}

func (x SessionFailCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionFailCode.Descriptor instead.
func (SessionFailCode) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{3}
}

// The specific reason a Verification is in the `Failed` state
type VerificationFailCode int32

const (
	// The verification is not in a failure state
	VerificationFailCode_VERIFICATION_FAIL_NONE VerificationFailCode = 0
	// An internal Trinsic error caused this verification to fail
	VerificationFailCode_VERIFICATION_FAIL_INTERNAL VerificationFailCode = 1
	// The image(s) provided for this verification were either too low-quality, not of the correct type, or otherwise
	// unable to be processed.
	// This failure reason is non-terminal; the user is able to retry the verification.
	VerificationFailCode_VERIFICATION_FAIL_INVALID_IMAGE VerificationFailCode = 2
	// The identity data/images provided are suspected to be inauthentic, fraudulent, or forged.
	VerificationFailCode_VERIFICATION_FAIL_INAUTHENTIC VerificationFailCode = 3
	// The document provided is either of an unsupported type, or from an unsupported country.
	VerificationFailCode_VERIFICATION_FAIL_UNSUPPORTED_DOCUMENT VerificationFailCode = 4
)

// Enum value maps for VerificationFailCode.
var (
	VerificationFailCode_name = map[int32]string{
		0: "VERIFICATION_FAIL_NONE",
		1: "VERIFICATION_FAIL_INTERNAL",
		2: "VERIFICATION_FAIL_INVALID_IMAGE",
		3: "VERIFICATION_FAIL_INAUTHENTIC",
		4: "VERIFICATION_FAIL_UNSUPPORTED_DOCUMENT",
	}
	VerificationFailCode_value = map[string]int32{
		"VERIFICATION_FAIL_NONE":                 0,
		"VERIFICATION_FAIL_INTERNAL":             1,
		"VERIFICATION_FAIL_INVALID_IMAGE":        2,
		"VERIFICATION_FAIL_INAUTHENTIC":          3,
		"VERIFICATION_FAIL_UNSUPPORTED_DOCUMENT": 4,
	}
)

func (x VerificationFailCode) Enum() *VerificationFailCode {
	p := new(VerificationFailCode)
	*p = x
	return p
}

func (x VerificationFailCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationFailCode) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[4].Descriptor()
}

func (VerificationFailCode) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[4]
}

func (x VerificationFailCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationFailCode.Descriptor instead.
func (VerificationFailCode) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{4}
}

// Controls how sessions are ordered in `ListSessions`
type SessionOrdering int32

const (
	// Order sessions according to when they were created
	SessionOrdering_CREATED SessionOrdering = 0
	// Order sessions according to when they last changed state
	SessionOrdering_UPDATED SessionOrdering = 1
	// Order sessions according to their numerical state
	SessionOrdering_STATE SessionOrdering = 2
)

// Enum value maps for SessionOrdering.
var (
	SessionOrdering_name = map[int32]string{
		0: "CREATED",
		1: "UPDATED",
		2: "STATE",
	}
	SessionOrdering_value = map[string]int32{
		"CREATED": 0,
		"UPDATED": 1,
		"STATE":   2,
	}
)

func (x SessionOrdering) Enum() *SessionOrdering {
	p := new(SessionOrdering)
	*p = x
	return p
}

func (x SessionOrdering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionOrdering) Descriptor() protoreflect.EnumDescriptor {
	return file_services_connect_v1_connect_proto_enumTypes[5].Descriptor()
}

func (SessionOrdering) Type() protoreflect.EnumType {
	return &file_services_connect_v1_connect_proto_enumTypes[5]
}

func (x SessionOrdering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionOrdering.Descriptor instead.
func (SessionOrdering) EnumDescriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{5}
}

// An Identity Verification Session
type IDVSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the IDVSession.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The Client Token for this IDVSession. This should be passed to your frontend to initiate
	// the IDV flow using Trinsic's Web SDK.
	ClientToken string `protobuf:"bytes,2,opt,name=client_token,json=clientToken,proto3" json:"client_token,omitempty"`
	// State of the IDVSession
	State IDVSessionState `protobuf:"varint,3,opt,name=state,proto3,enum=services.connect.v1.IDVSessionState" json:"state,omitempty"`
	// The actual Verifications to perform in this IDV flow
	Verifications map[string]*Verification `protobuf:"bytes,4,rep,name=verifications,proto3" json:"verifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The reason for the IDVSession's failure.
	// Only set if `state` is `IDV_FAILED`.
	FailCode *SessionFailCode `protobuf:"varint,5,opt,name=fail_code,json=failCode,proto3,enum=services.connect.v1.SessionFailCode,oneof" json:"fail_code,omitempty"`
	// The resultant signed VP combining the results of all verifications
	ResultVp *string `protobuf:"bytes,6,opt,name=result_vp,json=resultVp,proto3,oneof" json:"result_vp,omitempty"`
	// The unix timestamp, in seconds, that this IDVSession was created
	Created uint64 `protobuf:"fixed64,7,opt,name=created,proto3" json:"created,omitempty"`
	// The unix timestamp, in seconds, that this IDVSession's `state` was last updated
	Updated uint64 `protobuf:"fixed64,8,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *IDVSession) Reset() {
	*x = IDVSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDVSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDVSession) ProtoMessage() {}

func (x *IDVSession) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDVSession.ProtoReflect.Descriptor instead.
func (*IDVSession) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{0}
}

func (x *IDVSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDVSession) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *IDVSession) GetState() IDVSessionState {
	if x != nil {
		return x.State
	}
	return IDVSessionState_IDV_CREATED
}

func (x *IDVSession) GetVerifications() map[string]*Verification {
	if x != nil {
		return x.Verifications
	}
	return nil
}

func (x *IDVSession) GetFailCode() SessionFailCode {
	if x != nil && x.FailCode != nil {
		return *x.FailCode
	}
	return SessionFailCode_SESSION_FAIL_NONE
}

func (x *IDVSession) GetResultVp() string {
	if x != nil && x.ResultVp != nil {
		return *x.ResultVp
	}
	return ""
}

func (x *IDVSession) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *IDVSession) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

// A Verification that is part of an IDVSession
type Verification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the verification
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of verification (driver's license, passport, proof of address, etc)
	Type VerificationType `protobuf:"varint,2,opt,name=type,proto3,enum=services.connect.v1.VerificationType" json:"type,omitempty"`
	// The state of the verification
	State VerificationState `protobuf:"varint,3,opt,name=state,proto3,enum=services.connect.v1.VerificationState" json:"state,omitempty"`
	// The reason for the Verification's failure.
	// Only set if `state` is `VERIFICATION_FAILED`.
	FailCode *VerificationFailCode `protobuf:"varint,4,opt,name=fail_code,json=failCode,proto3,enum=services.connect.v1.VerificationFailCode,oneof" json:"fail_code,omitempty"`
	// Whether this was a reused (true) or fresh (false) verification.
	// If `state` is not `VERIFICATION_SUCCESS`, this field is `false` and does not convey useful information.
	Reused bool `protobuf:"varint,5,opt,name=reused,proto3" json:"reused,omitempty"`
	// The unix timestamp, in seconds, when this verification was begun
	// by the user -- or `0` if not yet begun.
	Begun uint64 `protobuf:"fixed64,6,opt,name=begun,proto3" json:"begun,omitempty"`
	// The unix timestamp, in seconds, when this verification last changed state -- or `0` if it has not yet
	// begun.
	Updated uint64 `protobuf:"fixed64,7,opt,name=updated,proto3" json:"updated,omitempty"`
	// The Government ID options for this Verification.
	// Only set if this Verification is of type `GOVERNMENT_ID`.
	GovernmentIdOptions *GovernmentIDOptions `protobuf:"bytes,8,opt,name=government_id_options,json=governmentIdOptions,proto3,oneof" json:"government_id_options,omitempty"`
	// Normalized output for manual parsing and usage for this verification
	// Only set if this Verification is of type `GOVERNMENT_ID` and has succeeded.
	NormalizedGovernmentIdData *NormalizedGovernmentIdData `protobuf:"bytes,9,opt,name=normalized_government_id_data,json=normalizedGovernmentIdData,proto3,oneof" json:"normalized_government_id_data,omitempty"`
}

func (x *Verification) Reset() {
	*x = Verification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verification) ProtoMessage() {}

func (x *Verification) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verification.ProtoReflect.Descriptor instead.
func (*Verification) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{1}
}

func (x *Verification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Verification) GetType() VerificationType {
	if x != nil {
		return x.Type
	}
	return VerificationType_GOVERNMENT_ID
}

func (x *Verification) GetState() VerificationState {
	if x != nil {
		return x.State
	}
	return VerificationState_VERIFICATION_PENDING
}

func (x *Verification) GetFailCode() VerificationFailCode {
	if x != nil && x.FailCode != nil {
		return *x.FailCode
	}
	return VerificationFailCode_VERIFICATION_FAIL_NONE
}

func (x *Verification) GetReused() bool {
	if x != nil {
		return x.Reused
	}
	return false
}

func (x *Verification) GetBegun() uint64 {
	if x != nil {
		return x.Begun
	}
	return 0
}

func (x *Verification) GetUpdated() uint64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *Verification) GetGovernmentIdOptions() *GovernmentIDOptions {
	if x != nil {
		return x.GovernmentIdOptions
	}
	return nil
}

func (x *Verification) GetNormalizedGovernmentIdData() *NormalizedGovernmentIdData {
	if x != nil {
		return x.NormalizedGovernmentIdData
	}
	return nil
}

type NormalizedGovernmentIdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID number of the underlying identity document
	IdNumber *string `protobuf:"bytes,1,opt,name=id_number,json=idNumber,proto3,oneof" json:"id_number,omitempty"`
	// Given ("first") name of the document holder
	GivenName *string `protobuf:"bytes,2,opt,name=given_name,json=givenName,proto3,oneof" json:"given_name,omitempty"`
	// Family ("last") name of the document holder
	FamilyName *string `protobuf:"bytes,3,opt,name=family_name,json=familyName,proto3,oneof" json:"family_name,omitempty"`
	// Full address of the document holder
	Address *string `protobuf:"bytes,4,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Date of birth of the document holder
	DateOfBirth *string `protobuf:"bytes,5,opt,name=date_of_birth,json=dateOfBirth,proto3,oneof" json:"date_of_birth,omitempty"`
	// ISO3 country code of the document
	Country *string `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`
	// Issuance date of the document
	IssueDate *string `protobuf:"bytes,7,opt,name=issue_date,json=issueDate,proto3,oneof" json:"issue_date,omitempty"`
	// Expiration date date of the document
	ExpirationDate *string `protobuf:"bytes,8,opt,name=expiration_date,json=expirationDate,proto3,oneof" json:"expiration_date,omitempty"`
}

func (x *NormalizedGovernmentIdData) Reset() {
	*x = NormalizedGovernmentIdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizedGovernmentIdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedGovernmentIdData) ProtoMessage() {}

func (x *NormalizedGovernmentIdData) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedGovernmentIdData.ProtoReflect.Descriptor instead.
func (*NormalizedGovernmentIdData) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{2}
}

func (x *NormalizedGovernmentIdData) GetIdNumber() string {
	if x != nil && x.IdNumber != nil {
		return *x.IdNumber
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetGivenName() string {
	if x != nil && x.GivenName != nil {
		return *x.GivenName
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetFamilyName() string {
	if x != nil && x.FamilyName != nil {
		return *x.FamilyName
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetDateOfBirth() string {
	if x != nil && x.DateOfBirth != nil {
		return *x.DateOfBirth
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetIssueDate() string {
	if x != nil && x.IssueDate != nil {
		return *x.IssueDate
	}
	return ""
}

func (x *NormalizedGovernmentIdData) GetExpirationDate() string {
	if x != nil && x.ExpirationDate != nil {
		return *x.ExpirationDate
	}
	return ""
}

// Information about a Relying Party used for demo purposes
type DemoRelyingParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName  string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	LogoUrl      string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	PrimaryColor string `protobuf:"bytes,3,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
}

func (x *DemoRelyingParty) Reset() {
	*x = DemoRelyingParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoRelyingParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoRelyingParty) ProtoMessage() {}

func (x *DemoRelyingParty) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoRelyingParty.ProtoReflect.Descriptor instead.
func (*DemoRelyingParty) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{3}
}

func (x *DemoRelyingParty) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DemoRelyingParty) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *DemoRelyingParty) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

// Request to create an Identity Verification Session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of verifications to perform
	Verifications []*RequestedVerification `protobuf:"bytes,1,rep,name=verifications,proto3" json:"verifications,omitempty"`
	// Debugging information used to help diagnose issues
	DebugInformation map[string]string `protobuf:"bytes,2,rep,name=debug_information,json=debugInformation,proto3" json:"debug_information,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Information about the Relying Party used for demo purposes.
	// This is only to be used if the demo flag is set to true in the debug information.
	DemoRp *DemoRelyingParty `protobuf:"bytes,3,opt,name=demo_rp,json=demoRp,proto3,oneof" json:"demo_rp,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionRequest) GetVerifications() []*RequestedVerification {
	if x != nil {
		return x.Verifications
	}
	return nil
}

func (x *CreateSessionRequest) GetDebugInformation() map[string]string {
	if x != nil {
		return x.DebugInformation
	}
	return nil
}

func (x *CreateSessionRequest) GetDemoRp() *DemoRelyingParty {
	if x != nil {
		return x.DemoRp
	}
	return nil
}

// A verification to perform in an IDV flow
type RequestedVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of verification to perform
	Type VerificationType `protobuf:"varint,1,opt,name=type,proto3,enum=services.connect.v1.VerificationType" json:"type,omitempty"`
	// Types that are assignable to Options:
	//
	//	*RequestedVerification_GovernmentIdOptions
	Options isRequestedVerification_Options `protobuf_oneof:"options"`
}

func (x *RequestedVerification) Reset() {
	*x = RequestedVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedVerification) ProtoMessage() {}

func (x *RequestedVerification) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedVerification.ProtoReflect.Descriptor instead.
func (*RequestedVerification) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{5}
}

func (x *RequestedVerification) GetType() VerificationType {
	if x != nil {
		return x.Type
	}
	return VerificationType_GOVERNMENT_ID
}

func (m *RequestedVerification) GetOptions() isRequestedVerification_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *RequestedVerification) GetGovernmentIdOptions() *GovernmentIDOptions {
	if x, ok := x.GetOptions().(*RequestedVerification_GovernmentIdOptions); ok {
		return x.GovernmentIdOptions
	}
	return nil
}

type isRequestedVerification_Options interface {
	isRequestedVerification_Options()
}

type RequestedVerification_GovernmentIdOptions struct {
	// Options for a Verification of type `GOVERNMENT_ID`
	GovernmentIdOptions *GovernmentIDOptions `protobuf:"bytes,2,opt,name=government_id_options,json=governmentIdOptions,proto3,oneof"`
}

func (*RequestedVerification_GovernmentIdOptions) isRequestedVerification_Options() {}

// Options for a Verification of type `GOVERNMENT_ID`
type GovernmentIDOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fields to retrieve from the Government ID.
	// If this object is not set, all fields will be retrieved.
	Fields *GovernmentIDFields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GovernmentIDOptions) Reset() {
	*x = GovernmentIDOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernmentIDOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernmentIDOptions) ProtoMessage() {}

func (x *GovernmentIDOptions) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernmentIDOptions.ProtoReflect.Descriptor instead.
func (*GovernmentIDOptions) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{6}
}

func (x *GovernmentIDOptions) GetFields() *GovernmentIDFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Selection of fields to retrieve from a Government ID. All fields default to `false` unless explicitly set to `true`.
type GovernmentIDFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID number of the underlying identity document
	IdNumber bool `protobuf:"varint,1,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	// Given ("first") name of the document holder
	GivenName bool `protobuf:"varint,2,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// Family ("last") name of the document holder
	FamilyName bool `protobuf:"varint,3,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// Full address of the document holder
	Address bool `protobuf:"varint,4,opt,name=address,proto3" json:"address,omitempty"`
	// Date of birth of the document holder
	DateOfBirth bool `protobuf:"varint,5,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// ISO3 country code of the document
	Country bool `protobuf:"varint,6,opt,name=country,proto3" json:"country,omitempty"`
	// Issuance date of the document
	IssueDate bool `protobuf:"varint,7,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	// Expiration date date of the document
	ExpirationDate bool `protobuf:"varint,8,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *GovernmentIDFields) Reset() {
	*x = GovernmentIDFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernmentIDFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernmentIDFields) ProtoMessage() {}

func (x *GovernmentIDFields) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernmentIDFields.ProtoReflect.Descriptor instead.
func (*GovernmentIDFields) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{7}
}

func (x *GovernmentIDFields) GetIdNumber() bool {
	if x != nil {
		return x.IdNumber
	}
	return false
}

func (x *GovernmentIDFields) GetGivenName() bool {
	if x != nil {
		return x.GivenName
	}
	return false
}

func (x *GovernmentIDFields) GetFamilyName() bool {
	if x != nil {
		return x.FamilyName
	}
	return false
}

func (x *GovernmentIDFields) GetAddress() bool {
	if x != nil {
		return x.Address
	}
	return false
}

func (x *GovernmentIDFields) GetDateOfBirth() bool {
	if x != nil {
		return x.DateOfBirth
	}
	return false
}

func (x *GovernmentIDFields) GetCountry() bool {
	if x != nil {
		return x.Country
	}
	return false
}

func (x *GovernmentIDFields) GetIssueDate() bool {
	if x != nil {
		return x.IssueDate
	}
	return false
}

func (x *GovernmentIDFields) GetExpirationDate() bool {
	if x != nil {
		return x.ExpirationDate
	}
	return false
}

// Response to `CreateIDVSessionRequest`
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created IDVSession
	Session *IDVSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSessionResponse) GetSession() *IDVSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Request to cancel an Identity Verification Session
type CancelSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the IDVSession to cancel
	IdvSessionId string `protobuf:"bytes,1,opt,name=idv_session_id,json=idvSessionId,proto3" json:"idv_session_id,omitempty"`
}

func (x *CancelSessionRequest) Reset() {
	*x = CancelSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSessionRequest) ProtoMessage() {}

func (x *CancelSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSessionRequest.ProtoReflect.Descriptor instead.
func (*CancelSessionRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{9}
}

func (x *CancelSessionRequest) GetIdvSessionId() string {
	if x != nil {
		return x.IdvSessionId
	}
	return ""
}

// Response to `CancelIDVSessionRequest`
type CancelSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDVSession in its current state after cancellation
	Session *IDVSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CancelSessionResponse) Reset() {
	*x = CancelSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSessionResponse) ProtoMessage() {}

func (x *CancelSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSessionResponse.ProtoReflect.Descriptor instead.
func (*CancelSessionResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{10}
}

func (x *CancelSessionResponse) GetSession() *IDVSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Request to get an IDVSession
type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the IDVSession to get
	IdvSessionId string `protobuf:"bytes,1,opt,name=idv_session_id,json=idvSessionId,proto3" json:"idv_session_id,omitempty"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{11}
}

func (x *GetSessionRequest) GetIdvSessionId() string {
	if x != nil {
		return x.IdvSessionId
	}
	return ""
}

// Response to `GetIDVSessionRequest`
type GetSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDVSession
	Session *IDVSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{12}
}

func (x *GetSessionResponse) GetSession() *IDVSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Request to list all IDVSessions you've created
type ListSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The field by which sessions should be sorted. Defaults to `CREATED`.
	OrderBy SessionOrdering `protobuf:"varint,1,opt,name=order_by,json=orderBy,proto3,enum=services.connect.v1.SessionOrdering" json:"order_by,omitempty"`
	// The order in which sessions should be sorted. Defaults to `ASCENDING`.
	OrderDirection common.OrderDirection `protobuf:"varint,2,opt,name=order_direction,json=orderDirection,proto3,enum=services.common.v1.OrderDirection" json:"order_direction,omitempty"`
	// The number of results to return per page.
	// Must be between `1` and `10`, inclusive.
	// Defaults to `10`.
	PageSize *int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// The page index of results to return.
	// Starts at `1`.
	// Defaults to `1`.
	Page *int32 `protobuf:"varint,4,opt,name=page,proto3,oneof" json:"page,omitempty"`
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{13}
}

func (x *ListSessionsRequest) GetOrderBy() SessionOrdering {
	if x != nil {
		return x.OrderBy
	}
	return SessionOrdering_CREATED
}

func (x *ListSessionsRequest) GetOrderDirection() common.OrderDirection {
	if x != nil {
		return x.OrderDirection
	}
	return common.OrderDirection(0)
}

func (x *ListSessionsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListSessionsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

// Response to `ListIDVSessionsRequest`
type ListSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sessions you've created
	Sessions []*IDVSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	// The total number of sessions you've created
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// If `true`, this is not the last page of results.
	// If `false`, this is the last page of results.
	More bool `protobuf:"varint,3,opt,name=more,proto3" json:"more,omitempty"`
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{14}
}

func (x *ListSessionsResponse) GetSessions() []*IDVSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *ListSessionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSessionsResponse) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

// Request to preemptively check if an identity has a valid reusable credential
type HasValidCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity used to find a credential
	Identity *wallet.CreateWalletRequest_ExternalIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// The criteria used to find a valid credential
	CredentialRequestData *CredentialRequestData `protobuf:"bytes,2,opt,name=credential_request_data,json=credentialRequestData,proto3" json:"credential_request_data,omitempty"`
}

func (x *HasValidCredentialRequest) Reset() {
	*x = HasValidCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasValidCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasValidCredentialRequest) ProtoMessage() {}

func (x *HasValidCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasValidCredentialRequest.ProtoReflect.Descriptor instead.
func (*HasValidCredentialRequest) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{15}
}

func (x *HasValidCredentialRequest) GetIdentity() *wallet.CreateWalletRequest_ExternalIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *HasValidCredentialRequest) GetCredentialRequestData() *CredentialRequestData {
	if x != nil {
		return x.CredentialRequestData
	}
	return nil
}

// Response to `HasValidCredentialRequest`
type HasValidCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the identity has a valid credential
	HasValidCredential bool `protobuf:"varint,1,opt,name=has_valid_credential,json=hasValidCredential,proto3" json:"has_valid_credential,omitempty"`
}

func (x *HasValidCredentialResponse) Reset() {
	*x = HasValidCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasValidCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasValidCredentialResponse) ProtoMessage() {}

func (x *HasValidCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasValidCredentialResponse.ProtoReflect.Descriptor instead.
func (*HasValidCredentialResponse) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{16}
}

func (x *HasValidCredentialResponse) GetHasValidCredential() bool {
	if x != nil {
		return x.HasValidCredential
	}
	return false
}

type CredentialRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of verification for which the credential can be used
	Type VerificationType `protobuf:"varint,1,opt,name=type,proto3,enum=services.connect.v1.VerificationType" json:"type,omitempty"` // Name of the IDV issuer
}

func (x *CredentialRequestData) Reset() {
	*x = CredentialRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_connect_v1_connect_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialRequestData) ProtoMessage() {}

func (x *CredentialRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_services_connect_v1_connect_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialRequestData.ProtoReflect.Descriptor instead.
func (*CredentialRequestData) Descriptor() ([]byte, []int) {
	return file_services_connect_v1_connect_proto_rawDescGZIP(), []int{17}
}

func (x *CredentialRequestData) GetType() VerificationType {
	if x != nil {
		return x.Type
	}
	return VerificationType_GOVERNMENT_ID
}

var File_services_connect_v1_connect_proto protoreflect.FileDescriptor

var file_services_connect_v1_connect_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x2d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x2d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x03, 0x0a, 0x0a, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x70, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x63, 0x0a, 0x12, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x70, 0x22, 0xd2, 0x04, 0x0a,
	0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x65, 0x67, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x62, 0x65, 0x67, 0x75,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x15, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x13, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x77,
	0x0a, 0x1d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x1a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xbb, 0x03, 0x0a, 0x1a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x75, 0x0a, 0x10, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x6c, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x6f, 0x52,
	0x70, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65,
	0x6d, 0x6f, 0x5f, 0x72, 0x70, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x13, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x91, 0x02,
	0x0a, 0x12, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x52, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x64, 0x76, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x76, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x64, 0x76, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x76, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x44, 0x56, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x4b, 0x0a, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x56, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x19, 0x48,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x1a, 0x48,
	0x61, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a,
	0x25, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x2a, 0x83, 0x01, 0x0a, 0x0f, 0x49, 0x44, 0x56, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44,
	0x56, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x44, 0x56, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x44, 0x56, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x44, 0x56, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x44, 0x56, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x44, 0x56, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x9a, 0x01, 0x0a,
	0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xe2, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x5f, 0x52, 0x50, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xc6,
	0x01, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x45, 0x52, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x36, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x32,
	0xd8, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22,
	0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x88, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x68, 0x61, 0x73, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x5a, 0x0a, 0x1b, 0x74, 0x72,
	0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x1b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0xaa, 0x02, 0x1b, 0x54, 0x72, 0x69, 0x6e, 0x73,
	0x69, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_connect_v1_connect_proto_rawDescOnce sync.Once
	file_services_connect_v1_connect_proto_rawDescData = file_services_connect_v1_connect_proto_rawDesc
)

func file_services_connect_v1_connect_proto_rawDescGZIP() []byte {
	file_services_connect_v1_connect_proto_rawDescOnce.Do(func() {
		file_services_connect_v1_connect_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_connect_v1_connect_proto_rawDescData)
	})
	return file_services_connect_v1_connect_proto_rawDescData
}

var file_services_connect_v1_connect_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_services_connect_v1_connect_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_services_connect_v1_connect_proto_goTypes = []interface{}{
	(VerificationType)(0),                               // 0: services.connect.v1.VerificationType
	(IDVSessionState)(0),                                // 1: services.connect.v1.IDVSessionState
	(VerificationState)(0),                              // 2: services.connect.v1.VerificationState
	(SessionFailCode)(0),                                // 3: services.connect.v1.SessionFailCode
	(VerificationFailCode)(0),                           // 4: services.connect.v1.VerificationFailCode
	(SessionOrdering)(0),                                // 5: services.connect.v1.SessionOrdering
	(*IDVSession)(nil),                                  // 6: services.connect.v1.IDVSession
	(*Verification)(nil),                                // 7: services.connect.v1.Verification
	(*NormalizedGovernmentIdData)(nil),                  // 8: services.connect.v1.NormalizedGovernmentIdData
	(*DemoRelyingParty)(nil),                            // 9: services.connect.v1.DemoRelyingParty
	(*CreateSessionRequest)(nil),                        // 10: services.connect.v1.CreateSessionRequest
	(*RequestedVerification)(nil),                       // 11: services.connect.v1.RequestedVerification
	(*GovernmentIDOptions)(nil),                         // 12: services.connect.v1.GovernmentIDOptions
	(*GovernmentIDFields)(nil),                          // 13: services.connect.v1.GovernmentIDFields
	(*CreateSessionResponse)(nil),                       // 14: services.connect.v1.CreateSessionResponse
	(*CancelSessionRequest)(nil),                        // 15: services.connect.v1.CancelSessionRequest
	(*CancelSessionResponse)(nil),                       // 16: services.connect.v1.CancelSessionResponse
	(*GetSessionRequest)(nil),                           // 17: services.connect.v1.GetSessionRequest
	(*GetSessionResponse)(nil),                          // 18: services.connect.v1.GetSessionResponse
	(*ListSessionsRequest)(nil),                         // 19: services.connect.v1.ListSessionsRequest
	(*ListSessionsResponse)(nil),                        // 20: services.connect.v1.ListSessionsResponse
	(*HasValidCredentialRequest)(nil),                   // 21: services.connect.v1.HasValidCredentialRequest
	(*HasValidCredentialResponse)(nil),                  // 22: services.connect.v1.HasValidCredentialResponse
	(*CredentialRequestData)(nil),                       // 23: services.connect.v1.CredentialRequestData
	nil,                                                 // 24: services.connect.v1.IDVSession.VerificationsEntry
	nil,                                                 // 25: services.connect.v1.CreateSessionRequest.DebugInformationEntry
	(common.OrderDirection)(0),                          // 26: services.common.v1.OrderDirection
	(*wallet.CreateWalletRequest_ExternalIdentity)(nil), // 27: services.universalwallet.v1.CreateWalletRequest.ExternalIdentity
}
var file_services_connect_v1_connect_proto_depIdxs = []int32{
	1,  // 0: services.connect.v1.IDVSession.state:type_name -> services.connect.v1.IDVSessionState
	24, // 1: services.connect.v1.IDVSession.verifications:type_name -> services.connect.v1.IDVSession.VerificationsEntry
	3,  // 2: services.connect.v1.IDVSession.fail_code:type_name -> services.connect.v1.SessionFailCode
	0,  // 3: services.connect.v1.Verification.type:type_name -> services.connect.v1.VerificationType
	2,  // 4: services.connect.v1.Verification.state:type_name -> services.connect.v1.VerificationState
	4,  // 5: services.connect.v1.Verification.fail_code:type_name -> services.connect.v1.VerificationFailCode
	12, // 6: services.connect.v1.Verification.government_id_options:type_name -> services.connect.v1.GovernmentIDOptions
	8,  // 7: services.connect.v1.Verification.normalized_government_id_data:type_name -> services.connect.v1.NormalizedGovernmentIdData
	11, // 8: services.connect.v1.CreateSessionRequest.verifications:type_name -> services.connect.v1.RequestedVerification
	25, // 9: services.connect.v1.CreateSessionRequest.debug_information:type_name -> services.connect.v1.CreateSessionRequest.DebugInformationEntry
	9,  // 10: services.connect.v1.CreateSessionRequest.demo_rp:type_name -> services.connect.v1.DemoRelyingParty
	0,  // 11: services.connect.v1.RequestedVerification.type:type_name -> services.connect.v1.VerificationType
	12, // 12: services.connect.v1.RequestedVerification.government_id_options:type_name -> services.connect.v1.GovernmentIDOptions
	13, // 13: services.connect.v1.GovernmentIDOptions.fields:type_name -> services.connect.v1.GovernmentIDFields
	6,  // 14: services.connect.v1.CreateSessionResponse.session:type_name -> services.connect.v1.IDVSession
	6,  // 15: services.connect.v1.CancelSessionResponse.session:type_name -> services.connect.v1.IDVSession
	6,  // 16: services.connect.v1.GetSessionResponse.session:type_name -> services.connect.v1.IDVSession
	5,  // 17: services.connect.v1.ListSessionsRequest.order_by:type_name -> services.connect.v1.SessionOrdering
	26, // 18: services.connect.v1.ListSessionsRequest.order_direction:type_name -> services.common.v1.OrderDirection
	6,  // 19: services.connect.v1.ListSessionsResponse.sessions:type_name -> services.connect.v1.IDVSession
	27, // 20: services.connect.v1.HasValidCredentialRequest.identity:type_name -> services.universalwallet.v1.CreateWalletRequest.ExternalIdentity
	23, // 21: services.connect.v1.HasValidCredentialRequest.credential_request_data:type_name -> services.connect.v1.CredentialRequestData
	0,  // 22: services.connect.v1.CredentialRequestData.type:type_name -> services.connect.v1.VerificationType
	7,  // 23: services.connect.v1.IDVSession.VerificationsEntry.value:type_name -> services.connect.v1.Verification
	10, // 24: services.connect.v1.Connect.CreateSession:input_type -> services.connect.v1.CreateSessionRequest
	15, // 25: services.connect.v1.Connect.CancelSession:input_type -> services.connect.v1.CancelSessionRequest
	17, // 26: services.connect.v1.Connect.GetSession:input_type -> services.connect.v1.GetSessionRequest
	19, // 27: services.connect.v1.Connect.ListSessions:input_type -> services.connect.v1.ListSessionsRequest
	21, // 28: services.connect.v1.Connect.HasValidCredential:input_type -> services.connect.v1.HasValidCredentialRequest
	14, // 29: services.connect.v1.Connect.CreateSession:output_type -> services.connect.v1.CreateSessionResponse
	16, // 30: services.connect.v1.Connect.CancelSession:output_type -> services.connect.v1.CancelSessionResponse
	18, // 31: services.connect.v1.Connect.GetSession:output_type -> services.connect.v1.GetSessionResponse
	20, // 32: services.connect.v1.Connect.ListSessions:output_type -> services.connect.v1.ListSessionsResponse
	22, // 33: services.connect.v1.Connect.HasValidCredential:output_type -> services.connect.v1.HasValidCredentialResponse
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_services_connect_v1_connect_proto_init() }
func file_services_connect_v1_connect_proto_init() {
	if File_services_connect_v1_connect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_connect_v1_connect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDVSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizedGovernmentIdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoRelyingParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernmentIDOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernmentIDFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasValidCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasValidCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_connect_v1_connect_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_services_connect_v1_connect_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_services_connect_v1_connect_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_services_connect_v1_connect_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_services_connect_v1_connect_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_services_connect_v1_connect_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RequestedVerification_GovernmentIdOptions)(nil),
	}
	file_services_connect_v1_connect_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_connect_v1_connect_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_connect_v1_connect_proto_goTypes,
		DependencyIndexes: file_services_connect_v1_connect_proto_depIdxs,
		EnumInfos:         file_services_connect_v1_connect_proto_enumTypes,
		MessageInfos:      file_services_connect_v1_connect_proto_msgTypes,
	}.Build()
	File_services_connect_v1_connect_proto = out.File
	file_services_connect_v1_connect_proto_rawDesc = nil
	file_services_connect_v1_connect_proto_goTypes = nil
	file_services_connect_v1_connect_proto_depIdxs = nil
}
