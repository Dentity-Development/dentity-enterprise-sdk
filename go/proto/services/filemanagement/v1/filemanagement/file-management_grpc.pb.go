// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: services/file-management/v1/file-management.proto

package filemanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileManagement_UploadFile_FullMethodName      = "/services.filemanagement.v1.FileManagement/UploadFile"
	FileManagement_GetFile_FullMethodName         = "/services.filemanagement.v1.FileManagement/GetFile"
	FileManagement_DeleteFile_FullMethodName      = "/services.filemanagement.v1.FileManagement/DeleteFile"
	FileManagement_ListFiles_FullMethodName       = "/services.filemanagement.v1.FileManagement/ListFiles"
	FileManagement_GetStorageStats_FullMethodName = "/services.filemanagement.v1.FileManagement/GetStorageStats"
)

// FileManagementClient is the client API for FileManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagementClient interface {
	// Upload a file to Trinsic's CDN
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// Fetch information about a file by its ID
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// Delete a file by its ID
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// List files the calling account has uploaded
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Get statistics about files uploaded by the calling account
	GetStorageStats(ctx context.Context, in *GetStorageStatsRequest, opts ...grpc.CallOption) (*GetStorageStatsResponse, error)
}

type fileManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagementClient(cc grpc.ClientConnInterface) FileManagementClient {
	return &fileManagementClient{cc}
}

func (c *fileManagementClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, FileManagement_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, FileManagement_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileManagement_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, FileManagement_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementClient) GetStorageStats(ctx context.Context, in *GetStorageStatsRequest, opts ...grpc.CallOption) (*GetStorageStatsResponse, error) {
	out := new(GetStorageStatsResponse)
	err := c.cc.Invoke(ctx, FileManagement_GetStorageStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagementServer is the server API for FileManagement service.
// All implementations must embed UnimplementedFileManagementServer
// for forward compatibility
type FileManagementServer interface {
	// Upload a file to Trinsic's CDN
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	// Fetch information about a file by its ID
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// Delete a file by its ID
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// List files the calling account has uploaded
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Get statistics about files uploaded by the calling account
	GetStorageStats(context.Context, *GetStorageStatsRequest) (*GetStorageStatsResponse, error)
	mustEmbedUnimplementedFileManagementServer()
}

// UnimplementedFileManagementServer must be embedded to have forward compatible implementations.
type UnimplementedFileManagementServer struct {
}

func (UnimplementedFileManagementServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileManagementServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileManagementServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileManagementServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileManagementServer) GetStorageStats(context.Context, *GetStorageStatsRequest) (*GetStorageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageStats not implemented")
}
func (UnimplementedFileManagementServer) mustEmbedUnimplementedFileManagementServer() {}

// UnsafeFileManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagementServer will
// result in compilation errors.
type UnsafeFileManagementServer interface {
	mustEmbedUnimplementedFileManagementServer()
}

func RegisterFileManagementServer(s grpc.ServiceRegistrar, srv FileManagementServer) {
	s.RegisterService(&FileManagement_ServiceDesc, srv)
}

func _FileManagement_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagement_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagement_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagement_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagement_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagement_GetStorageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServer).GetStorageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagement_GetStorageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServer).GetStorageStats(ctx, req.(*GetStorageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagement_ServiceDesc is the grpc.ServiceDesc for FileManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.filemanagement.v1.FileManagement",
	HandlerType: (*FileManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FileManagement_UploadFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileManagement_GetFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileManagement_DeleteFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FileManagement_ListFiles_Handler,
		},
		{
			MethodName: "GetStorageStats",
			Handler:    _FileManagement_GetStorageStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/file-management/v1/file-management.proto",
}
