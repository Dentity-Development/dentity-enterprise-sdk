package services

import (
	"context"
	"github.com/trinsic-id/sdk/go/proto/services/provider/v1/provider"
)

// NewAccessManagementService returns an access management service with the base service configured
// using the provided options
func NewAccessManagementService(options *Options) (AccessManagementService, error) {
	base, err := NewServiceBase(options)
	if err != nil {
		return nil, err
	}
	service := &accessManagementBase{
		Service: base,
		client:  provider.NewAccessManagementClient(base.GetChannel()),
	}

	return service, nil
}

// AccessManagementService defines the interface for interacting with credentials
type AccessManagementService interface {
	Service
// BEGIN Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\go\services\access_management_service.go

    // AddRoleAssignment Deprecated: This method is experimental
// Adds a role assignment to an account 
    AddRoleAssignment(userContext context.Context, request *provider.AddRoleAssignmentRequest) (*provider.AddRoleAssignmentResponse, error)
    // RemoveRoleAssignment Deprecated: This method is experimental
// Removes a role assignment from the account 
    RemoveRoleAssignment(userContext context.Context, request *provider.RemoveRoleAssignmentRequest) (*provider.RemoveRoleAssignmentResponse, error)
    // ListRoleAssignments Deprecated: This method is experimental
// List the role assignments for the given account 
    ListRoleAssignments(userContext context.Context, request *provider.ListRoleAssignmentsRequest) (*provider.ListRoleAssignmentsResponse, error)

// END Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
}

type accessManagementBase struct {
	Service
	client provider.AccessManagementClient
}

// BEGIN Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\go\services\access_management_service.go

// AddRoleAssignment Deprecated: This method is experimental
// Adds a role assignment to an account
func (p *accessManagementBase) AddRoleAssignment(userContext context.Context, request *provider.AddRoleAssignmentRequest) (*provider.AddRoleAssignmentResponse, error) {
    md, err := p.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := p.client.AddRoleAssignment(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}
// RemoveRoleAssignment Deprecated: This method is experimental
// Removes a role assignment from the account
func (p *accessManagementBase) RemoveRoleAssignment(userContext context.Context, request *provider.RemoveRoleAssignmentRequest) (*provider.RemoveRoleAssignmentResponse, error) {
    md, err := p.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := p.client.RemoveRoleAssignment(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}
// ListRoleAssignments Deprecated: This method is experimental
// List the role assignments for the given account
func (p *accessManagementBase) ListRoleAssignments(userContext context.Context, request *provider.ListRoleAssignmentsRequest) (*provider.ListRoleAssignmentsResponse, error) {
    md, err := p.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := p.client.ListRoleAssignments(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}
// END Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
