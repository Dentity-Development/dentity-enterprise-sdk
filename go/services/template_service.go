package services

import (
	"context"

	"github.com/trinsic-id/sdk/go/proto/services/verifiablecredentials/templates/v1/template"
)

// NewTemplateService returns a credential template service with the base service configured
// using the provided options
func NewTemplateService(options *Options) (TemplateService, error) {
	base, err := NewServiceBase(options)
	if err != nil {
		return nil, err
	}
	service := &templateBase{
		Service: base,
		client:  template.NewCredentialTemplatesClient(base.GetChannel()),
	}

	return service, nil
}

// TemplateService defines the interface for interacting with credentials templates
type TemplateService interface {
	Service
// BEGIN Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: ..\sdk\go\services\template_service.go

     
    Create(userContext context.Context, request *template.CreateCredentialTemplateRequest) (*template.CreateCredentialTemplateResponse, error)
     
    Get(userContext context.Context, request *template.GetCredentialTemplateRequest) (*template.GetCredentialTemplateResponse, error)
     
    List(userContext context.Context, request *template.ListCredentialTemplatesRequest) (*template.ListCredentialTemplatesResponse, error)
     
    Search(userContext context.Context, request *template.SearchCredentialTemplatesRequest) (*template.SearchCredentialTemplatesResponse, error)
     
    Delete(userContext context.Context, request *template.DeleteCredentialTemplateRequest) (*template.DeleteCredentialTemplateResponse, error)

// END Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
}

type templateBase struct {
	Service
	client template.CredentialTemplatesClient
}

// BEGIN Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: ..\sdk\go\services\template_service.go


func (t *templateBase) Create(userContext context.Context, request *template.CreateCredentialTemplateRequest) (*template.CreateCredentialTemplateResponse, error) {
    // TODO - Handle a flag for the metadata context
	md, err := t.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := t.client.Create(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}

func (t *templateBase) Get(userContext context.Context, request *template.GetCredentialTemplateRequest) (*template.GetCredentialTemplateResponse, error) {
    // TODO - Handle a flag for the metadata context
	md, err := t.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := t.client.Get(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}

func (t *templateBase) List(userContext context.Context, request *template.ListCredentialTemplatesRequest) (*template.ListCredentialTemplatesResponse, error) {
    // TODO - Handle a flag for the metadata context
	md, err := t.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := t.client.List(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}

func (t *templateBase) Search(userContext context.Context, request *template.SearchCredentialTemplatesRequest) (*template.SearchCredentialTemplatesResponse, error) {
    // TODO - Handle a flag for the metadata context
	md, err := t.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := t.client.Search(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}

func (t *templateBase) Delete(userContext context.Context, request *template.DeleteCredentialTemplateRequest) (*template.DeleteCredentialTemplateResponse, error) {
    // TODO - Handle a flag for the metadata context
	md, err := t.GetMetadataContext(userContext, request)
    if err != nil {
        return nil, err
    }
    response, err := t.client.Delete(md, request)
    if err != nil {
		return nil, err
	}
	return response, nil
}
// END Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
