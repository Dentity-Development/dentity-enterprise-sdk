package services

import (
	"context"
	"github.com/trinsic-id/sdk/go/proto/services/provider/v1/provider"
)

// NewProviderService returns a provider service with the base service configured
// using the provided options
func NewProviderService(options *Options) (ProviderService, error) {
	base, err := NewServiceBase(options)
	if err != nil {
		return nil, err
	}
	service := &providerBase{
		Service: base,
		client:  provider.NewProviderClient(base.GetChannel()),
	}

	return service, nil
}

// ProviderService wraps all the functions for interacting with providers (ecosystems)
type ProviderService interface {
	Service
	// CreateEcosystem creates a new ecosystem
	CreateEcosystem(ctx context.Context, request *provider.CreateEcosystemRequest) (*provider.CreateEcosystemResponse, error)
	// BEGIN Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
	// target: D:\trinsic\sdk\go\services\provider_service.go

	// UpdateEcosystem Deprecated: This will be removed May 1, 2023
	// Update an existing ecosystem
	UpdateEcosystem(userContext context.Context, request *provider.UpdateEcosystemRequest) (*provider.UpdateEcosystemResponse, error)
	// EcosystemInfo  Get ecosystem information
	EcosystemInfo(userContext context.Context, request *provider.EcosystemInfoRequest) (*provider.EcosystemInfoResponse, error)
	// GetPublicEcosystemInfo Deprecated: This will be removed May 1, 2023
	// Get public ecosystem information about *any* ecosystem
	GetPublicEcosystemInfo(userContext context.Context, request *provider.GetPublicEcosystemInfoRequest) (*provider.GetPublicEcosystemInfoResponse, error)
	// GetOberonKey  Returns the public key being used to create/verify oberon tokens
	GetOberonKey(userContext context.Context, request *provider.GetOberonKeyRequest) (*provider.GetOberonKeyResponse, error)
	// UpgradeDID  Upgrade a wallet's DID from `did:key` to another method
	UpgradeDID(userContext context.Context, request *provider.UpgradeDidRequest) (*provider.UpgradeDidResponse, error)
	// RetrieveDomainVerificationRecord  Retrieve a random hash TXT that can be used to verify domain ownership
	RetrieveDomainVerificationRecord(userContext context.Context) (*provider.RetrieveDomainVerificationRecordResponse, error)
	// RefreshDomainVerificationStatus  Call to verify domain
	RefreshDomainVerificationStatus(userContext context.Context, request *provider.RefreshDomainVerificationStatusRequest) (*provider.RefreshDomainVerificationStatusResponse, error)
	// SearchWalletConfigurations  Search for issuers/providers/verifiers in the current ecosystem
	SearchWalletConfigurations(userContext context.Context, request *provider.SearchWalletConfigurationsRequest) (*provider.SearchWalletConfigurationResponse, error)

	// END Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
}

type providerBase struct {
	Service
	client provider.ProviderClient
}

func (p *providerBase) CreateEcosystem(ctx context.Context, request *provider.CreateEcosystemRequest) (*provider.CreateEcosystemResponse, error) {
	if request == nil {
		request = &provider.CreateEcosystemRequest{}
	}
	var err error
	var resp *provider.CreateEcosystemResponse
	if len(request.Name) > 0 || (request.Details != nil && len(request.Details.Email) > 0) {
		md, err := p.GetMetadataContext(ctx, request)
		if err != nil {
			return nil, err
		}
		resp, err = p.client.CreateEcosystem(md, request)
	} else {
		resp, err = p.client.CreateEcosystem(ctx, request)
	}
	if err != nil {
		return nil, err
	}

	authToken, err := ProfileToToken(resp.GetProfile())
	if err != nil {
		return nil, err
	}

	p.SetAuthToken(authToken)

	return resp, nil
}

// BEGIN Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: D:\trinsic\sdk\go\services\provider_service.go

// UpdateEcosystem Deprecated: This will be removed May 1, 2023
// Update an existing ecosystem
func (p *providerBase) UpdateEcosystem(userContext context.Context, request *provider.UpdateEcosystemRequest) (*provider.UpdateEcosystemResponse, error) {
	md, err := p.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := p.client.UpdateEcosystem(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// EcosystemInfo  Get ecosystem information
func (p *providerBase) EcosystemInfo(userContext context.Context, request *provider.EcosystemInfoRequest) (*provider.EcosystemInfoResponse, error) {
	md, err := p.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := p.client.EcosystemInfo(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// GetPublicEcosystemInfo Deprecated: This will be removed May 1, 2023
// Get public ecosystem information about *any* ecosystem
func (p *providerBase) GetPublicEcosystemInfo(userContext context.Context, request *provider.GetPublicEcosystemInfoRequest) (*provider.GetPublicEcosystemInfoResponse, error) {
	md, err := p.GetMetadataContext(userContext, nil)
	if err != nil {
		return nil, err
	}
	response, err := p.client.GetPublicEcosystemInfo(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// GetOberonKey  Returns the public key being used to create/verify oberon tokens
func (p *providerBase) GetOberonKey(userContext context.Context, request *provider.GetOberonKeyRequest) (*provider.GetOberonKeyResponse, error) {
	md, err := p.GetMetadataContext(userContext, nil)
	if err != nil {
		return nil, err
	}
	response, err := p.client.GetOberonKey(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// UpgradeDID  Upgrade a wallet's DID from `did:key` to another method
func (p *providerBase) UpgradeDID(userContext context.Context, request *provider.UpgradeDidRequest) (*provider.UpgradeDidResponse, error) {
	md, err := p.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := p.client.UpgradeDID(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// RetrieveDomainVerificationRecord  Retrieve a random hash TXT that can be used to verify domain ownership
func (p *providerBase) RetrieveDomainVerificationRecord(userContext context.Context) (*provider.RetrieveDomainVerificationRecordResponse, error) {
	request := &provider.RetrieveDomainVerificationRecordRequest{}
	md, err := p.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := p.client.RetrieveDomainVerificationRecord(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// RefreshDomainVerificationStatus  Call to verify domain
func (p *providerBase) RefreshDomainVerificationStatus(userContext context.Context, request *provider.RefreshDomainVerificationStatusRequest) (*provider.RefreshDomainVerificationStatusResponse, error) {
	md, err := p.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := p.client.RefreshDomainVerificationStatus(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// SearchWalletConfigurations  Search for issuers/providers/verifiers in the current ecosystem
func (p *providerBase) SearchWalletConfigurations(userContext context.Context, request *provider.SearchWalletConfigurationsRequest) (*provider.SearchWalletConfigurationResponse, error) {
	md, err := p.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := p.client.SearchWalletConfigurations(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// END Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
