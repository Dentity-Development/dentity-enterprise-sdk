package services

import (
	"context"

	"github.com/trinsic-id/sdk/go/proto/services/universalwallet/v1/wallet"
)

// NewWalletService returns a wallet service with the base service configured
// using the provided options
func NewWalletService(options *Options) (WalletService, error) {
	base, err := NewServiceBase(options)
	if err != nil {
		return nil, err
	}
	service := &universalWalletBase{
		Service: base,
		client:  wallet.NewUniversalWalletClient(base.GetChannel()),
	}

	return service, nil
}

// WalletService defines the interface for interacting with wallet
type WalletService interface {
	Service

	// Search searches the wallet using a SQL-like syntax
	SearchWallet(userContext context.Context, request *wallet.SearchRequest) (*wallet.SearchResponse, error)

	// BEGIN Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
	// target: /home/runner/work/sdk/sdk/go/services/wallet_service.go

	// GetItem  Retrieve an item from the wallet with a given item identifier
	GetItem(userContext context.Context, request *wallet.GetItemRequest) (*wallet.GetItemResponse, error)
	// Search  Search the wallet using a SQL syntax
	Search(userContext context.Context, request *wallet.SearchRequest) (*wallet.SearchResponse, error)
	// InsertItem  Insert an item into the wallet
	InsertItem(userContext context.Context, request *wallet.InsertItemRequest) (*wallet.InsertItemResponse, error)
	// UpdateItem  Update an item in the wallet
	UpdateItem(userContext context.Context, request *wallet.UpdateItemRequest) (*wallet.UpdateItemResponse, error)
	// DeleteItem  Delete an item from the wallet permanently
	DeleteItem(userContext context.Context, request *wallet.DeleteItemRequest) (*wallet.DeleteItemResponse, error)

	// END Interface Code generated by protoc-gen-trinsic. DO NOT EDIT.
}

type universalWalletBase struct {
	Service
	client wallet.UniversalWalletClient
}

func (w *universalWalletBase) SearchWallet(userContext context.Context, request *wallet.SearchRequest) (*wallet.SearchResponse, error) {
	if request == nil {
		request = &wallet.SearchRequest{}
	}

	if len(request.Query) == 0 {
		request.Query = "SELECT c.id, c.type, c.data FROM c OFFSET 0 LIMIT 100"
	}

	return w.Search(userContext, request)
}

// BEGIN Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: /home/runner/work/sdk/sdk/go/services/wallet_service.go

// GetItem  Retrieve an item from the wallet with a given item identifier
func (w *universalWalletBase) GetItem(userContext context.Context, request *wallet.GetItemRequest) (*wallet.GetItemResponse, error) {
	md, err := w.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := w.client.GetItem(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// Search  Search the wallet using a SQL syntax
func (w *universalWalletBase) Search(userContext context.Context, request *wallet.SearchRequest) (*wallet.SearchResponse, error) {
	md, err := w.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := w.client.Search(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// InsertItem  Insert an item into the wallet
func (w *universalWalletBase) InsertItem(userContext context.Context, request *wallet.InsertItemRequest) (*wallet.InsertItemResponse, error) {
	md, err := w.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := w.client.InsertItem(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// UpdateItem  Update an item in the wallet
func (w *universalWalletBase) UpdateItem(userContext context.Context, request *wallet.UpdateItemRequest) (*wallet.UpdateItemResponse, error) {
	md, err := w.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := w.client.UpdateItem(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// DeleteItem  Delete an item from the wallet permanently
func (w *universalWalletBase) DeleteItem(userContext context.Context, request *wallet.DeleteItemRequest) (*wallet.DeleteItemResponse, error) {
	md, err := w.GetMetadataContext(userContext, request)
	if err != nil {
		return nil, err
	}
	response, err := w.client.DeleteItem(md, request)
	if err != nil {
		return nil, err
	}
	return response, nil
}

// END Implementation Code generated by protoc-gen-trinsic. DO NOT EDIT.
