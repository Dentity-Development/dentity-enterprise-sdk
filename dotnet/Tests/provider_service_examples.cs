using System;
using System.Threading.Tasks;
using Trinsic;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.Common.V1;
using Trinsic.Services.Provider.V1;

namespace Samples;

public class ProviderServiceSamples
{
    private ProviderService providerService => CreatePS();

// BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dotnet\Tests\provider_service_examples.cs

    public ProviderService CreatePS()
    {
// createProviderService() {
        var trinsic = new TrinsicService(new ServiceOptions()
        {
            AuthToken = "[YOUR-AUTH-TOKEN]"
        });

        var providerService = trinsic.Provider;
// }

        return providerService;
    }

    public async Task CreateEcosystem()
    {
// providerCreateEcosystem() {
        var createEcosystemResponse = await providerService.CreateEcosystemAsync(new());
// }
    }

    [Obsolete("Obsolete")]
    public async Task UpdateEcosystem()
    {
// providerUpdateEcosystem() {
        var updateEcosystemRequest = new UpdateEcosystemRequest()
        {
            Description = "New description for ecosystem",
            Domain = "new.example.com"
        };

        await providerService.UpdateEcosystemAsync(updateEcosystemRequest);
// }
    }

// providerAddWebhook() {
// }

// providerDeleteWebhook() {
// }

    public async Task EcosystemInfo()
    {
// providerEcosystemInfo() {
        var ecosystemInfo = await providerService.EcosystemInfoAsync(new());
// }
    }

// providerGetPublicEcosystemInfo() {
// }

// providerInvite() {
// }

// providerInvitationStatus() {
// }

    public async Task GetOberonKey()
    {
// providerGetOberonKey() {
        var getOberonKeyResponse = await providerService.GetOberonKeyAsync(new());
// }
    }



    public async Task UpgradeDID()
    {
// providerUpgradeDID() {
        var upgradeRequest = new UpgradeDidRequest()
        {
            Email = "jane.doe@example.com",
            Method = SupportedDidMethod.Ion,
            IonOptions = new()
            {
                Network = IonOptions.Types.IonNetwork.TestNet
            }
        };

        var upgradeResponse = await providerService.UpgradeDIDAsync(upgradeRequest);
// }
    }

// providerRetrieveDomainVerificationRecord() {
// }

// providerRefreshDomainVerificationStatus() {
// }


    public async Task SearchWalletConfigurations()
    {
// providerSearchWalletConfigurations() {
        var searchRequest = new SearchWalletConfigurationsRequest()
        {
            QueryFilter = "_.email = 'jane.doe@example.com'",
            ContinuationToken = null
        };

        var searchResponse = await providerService.SearchWalletConfigurationsAsync(searchRequest);
// }
    }

// END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
}