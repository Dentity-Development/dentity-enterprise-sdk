using System.Threading.Tasks;
using Google.Protobuf;
using Trinsic.Services.FileManagement.V1;
using Trinsic;
using Trinsic.Sdk.Options.V1;

#pragma warning disable CS0618

namespace Samples;

public class TrustRegistrySamples
{
    private FileManagementService fileManagementService => CreateFMS();

// BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dotnet\Tests\filemanagement_service_examples.cs
    public FileManagementService CreateFMS()
    {
// createFileManagementService() {
        var trinsic = new TrinsicService(new ServiceOptions()
        {
            AuthToken = "[YOUR-AUTH-TOKEN]"
        });

        var fileManagementService = trinsic.FileManagement;
// }

        return fileManagementService;
    }

    public async Task UploadFile()
    {
// fileManagementUploadFile() {
        var fileBytes = System.IO.File.ReadAllBytes("example.png");
        var uploadRequest = new UploadFileRequest()
        {
            Contents = ByteString.CopyFrom(fileBytes),
            MimeType = "image/png"
        };

        var uploadResponse = await fileManagementService.UploadFileAsync(uploadRequest);
// }
    }

    public async Task GetFile()
    {
// fileManagementGetFile() {
        var getRequest = new GetFileRequest()
        {
            Id = "[FILE-ID]"
        };

        var getResponse = await fileManagementService.GetFileAsync(getRequest);
// }
    }

    public async Task DeleteFile()
    {
// fileManagementDeleteFile() {
        var deleteRequest = new DeleteFileRequest()
        {
            Id = "[FILE-ID]"
        };

        await fileManagementService.DeleteFileAsync(deleteRequest);
// }
    }

    public async Task ListFiles()
    {
// fileManagementListFiles() {
        var listRequest = new ListFilesRequest()
        {
            Query = "SELECT * FROM c ORDER BY c.uploadDate DESC OFFSET 0 LIMIT 100",
            ContinuationToken = null
        };

        var listResponse = await fileManagementService.ListFilesAsync(listRequest);
// }
    }

    public async Task GetStorageStats()
    {
// fileManagementGetStorageStats() {
        var statsRequest = new GetStorageStatsRequest();
        var statsResponse = await fileManagementService.GetStorageStatsAsync(statsRequest);
// }
    }

// END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
}