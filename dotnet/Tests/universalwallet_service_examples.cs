using System.Threading.Tasks;
using Trinsic;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.UniversalWallet.V1;

namespace Samples;

public class UniversalWalletServiceSamples
{
    private WalletService walletService => CreateWS();

// BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dotnet\Tests\universalwallet_service_examples.cs

    public WalletService CreateWS()
    {
// createUniversalWalletService() {
        var trinsic = new TrinsicService(new ServiceOptions()
        {
            AuthToken = "[YOUR-AUTH-TOKEN]"
        });

        var walletService = trinsic.Wallet;
// }

        return walletService;
    }

    public async Task GetItem()
    {
// universalWalletGetItem() {
        var request = new GetItemRequest()
        {
            ItemId = "urn:uuid:7afd0191-9656-3a51-c12f-44ecfbb5a829"
        };

        var response = await walletService.GetItemAsync(request);
// }
    }

    public async Task Search()
    {
// universalWalletSearch() {
        var searchRequest = new SearchRequest()
        {
            Query = "SELECT * FROM c WHERE c.data.credentialSubject.age >= 42",
            ContinuationToken = null
        };

        var searchResponse = await walletService.SearchWalletAsync(searchRequest);
// }
    }

    public async Task InsertItem()
    {
// universalWalletInsertItem() {
        // In a real scenario, `itemJson` would be the output of calling the `IssueFromTemplate()` method
        var itemJson = "{...}";
        var insertRequest = new InsertItemRequest()
        {
            ItemJson = itemJson,
            ItemType = "VerifiableCredential"
        };

        var insertResponse = await walletService.InsertItemAsync(insertRequest);
// }
    }

    public void UpdateItem()
    {
        // Left blank as this endpoint is undocumented and doesn't have much utility
// universalWalletUpdateItem() {
// }
    }

    public async Task DeleteItem()
    {
// universalWalletDeleteItem() {
        var deleteRequest = new DeleteItemRequest()
        {
            ItemId = "urn:uuid:7afd0191-9656-3a51-c12f-44ecfbb5a829"
        };

        await walletService.DeleteItemAsync(deleteRequest);
// }
    }

    public async Task DeleteWallet()
    {
// universalWalletDeleteWallet() {
        var deleteWalletRequest = new DeleteWalletRequest()
        {
            Email = "jane.doe@example.com"
        };

        await walletService.DeleteWalletAsync(deleteWalletRequest);
// }
    }
// END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
}