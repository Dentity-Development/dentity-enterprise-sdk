using System.Threading.Tasks;
using Trinsic;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.VerifiableCredentials.Templates.V1;

namespace Samples;

public class CredentialTemplateServiceSamples
{
    private TemplateService templateService => CreateTS();

// BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dotnet\Tests\credentialtemplates_service_examples.cs

    public TemplateService CreateTS()
    {
// createCredentialTemplatesService() {
        var trinsic = new TrinsicService(new ServiceOptions()
        {
            AuthToken = "[YOUR-AUTH-TOKEN]"
        });

        var templateService = trinsic.Template;
// }

        return templateService;
    }

    public async Task CreateTemplate()
    {
        // credentialTemplatesCreate() {
        var createRequest = new CreateCredentialTemplateRequest()
        {
            Name = "An Example Credential",
            Title = "Example Credential",
            Description = "A credential for Trinsic's SDK samples",
            AllowAdditionalFields = false,
            Fields =
            {
                { "firstName", new() { Title = "First Name", Description = "Given name of holder" } },
                { "lastName", new() { Title = "Last Name", Description = "Surname of holder", Optional = true } },
                { "age", new() { Title = "Age", Description = "Age in years of holder", Type = FieldType.Number } }
            },
            FieldOrdering =
            {
                { "firstName", new() { Order = 0, Section = "Name" } },
                { "lastName", new() { Order = 1, Section = "Name" } },
                { "age", new() { Order = 2, Section = "Miscellanous" } }
            },
            AppleWalletOptions = new()
            {
                PrimaryField = "firstName",
                SecondaryFields = { "lastName" },
                AuxiliaryFields = { "age" }
            }
        };

        var createResponse = await templateService.CreateAsync(createRequest);
        // }

    }

    public async Task UpdateTemplate()
    {
        // credentialTemplatesUpdate() {
        var updateRequest = new UpdateCredentialTemplateRequest() {
            Id = "urn:template:my-ecosystem:an-example-credential",
            Title = "New Title",
            Description = "New Description",
            Fields = {
                { "firstName", new() { Title = "New title for firstName" } },
                { "lastName", new() { Description = "New description for lastName" } }
            },
            FieldOrdering =
            {
                { "age", new() { Order = 0, Section = "Misc" } },
                { "firstName", new() { Order = 1, Section = "Full Name" } },
                { "lastName", new() { Order = 2, Section = "Full Name" } },
            },
            AppleWalletOptions = new()
            {
                PrimaryField = "age",
                SecondaryFields = { "firstName", "lastName" }
            }
        };

        var updatedTemplate = await templateService.UpdateAsync(updateRequest);
        // }
    }

    public async Task Get()
    {
// credentialTemplatesGet() {
        var getRequest = new GetCredentialTemplateRequest()
        {
            Id = "urn:template:my-ecosystem:an-example-credential"
        };

        var getResponse = await templateService.GetAsync(getRequest);
// }
    }

    public async Task List()
    {
// credentialTemplatesList() {
        var listRequest = new ListCredentialTemplatesRequest()
        {
            Query = "SELECT * FROM c WHERE c.title = 'An Example Credential' ORDER BY c.dateCreated DESC",
            ContinuationToken = null
        };

        var listResponse = await templateService.ListAsync(listRequest);
// }
    }

    public async Task Search()
    {
// credentialTemplatesSearch() {
        var searchRequest = new SearchCredentialTemplatesRequest()
        {
            Query = "SELECT c.id AS template_id FROM c WHERE c.title = 'An Example Credential' ORDER BY c.dateCreated DESC",
            ContinuationToken = null
        };

        var searchResponse = await templateService.SearchAsync(searchRequest);
// }
    }

    public async Task Delete()
    {
// credentialTemplatesDelete() {
        var deleteRequest = new DeleteCredentialTemplateRequest()
        {
            Id = "urn:template:my-ecosystem:an-example-credential"
        };

        await templateService.DeleteAsync(deleteRequest);
// }
    }
    
// END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
}