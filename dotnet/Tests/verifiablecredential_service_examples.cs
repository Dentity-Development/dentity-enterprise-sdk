using System;
using System.Text.Json;
using System.Threading.Tasks;
using Google.Protobuf;
using Trinsic;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.VerifiableCredentials.V1;

namespace Samples;

public class VerifiableCredentialServiceSamples
{
    private CredentialService credentialService => CreateCS();

// BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dotnet\Tests\universalwallet_service_examples.cs

    public CredentialService CreateCS()
    {
// createVerifiableCredentialService() {
        var trinsic = new TrinsicService(new ServiceOptions()
        {
            AuthToken = "[YOUR-AUTH-TOKEN]"
        });

        var credentialService = trinsic.Credential;
// }

        return credentialService;
    }

// BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: C:\work\sdk\dotnet\Tests\verifiablecredential_service_examples.cs

    [Obsolete]
    public async Task Issue()
    {
        // This sample left simplistic / basic because:
        // 1) we plan to remove the endpoint
        // 2) a proper sample would have a very large hardcoded JSON payload

        var credentialJson = "{}";
        // verifiableCredentialIssue()
        var issueRequest = new IssueRequest()
        {
            DocumentJson = credentialJson
        };

        var issueResponse = await credentialService.IssueAsync(issueRequest);
        // }
    }

    public async Task IssueFromTemplate()
    {
// verifiableCredentialIssueFromTemplate() {
        var credentialJson = JsonSerializer.Serialize(new
        {
            firstName = "Jane",
            lastName = "Doe",
            age = 42
        });
        var issueRequest = new IssueFromTemplateRequest()
        {
            TemplateId = "urn:template:my-ecosystem:an-example-credential",
            ValuesJson = credentialJson
        };

        var issueResponse = await credentialService.IssueFromTemplateAsync(issueRequest);
// }
    }


    public async Task CheckStatus()
    {
// verifiableCredentialCheckStatus() {
        var checkStatusRequest = new CheckStatusRequest()
        {
            CredentialStatusId = "urn:revocation-registry:my-ecosystem:AD9wKZCr4zVxat1XSawScD#42"
        };

        var checkStatusResponse = await credentialService.CheckStatusAsync(checkStatusRequest);
// }
    }

    public async Task UpdateStatus()
    {
// verifiableCredentialUpdateStatus() {
        var updateStatusRequest = new UpdateStatusRequest()
        {
            CredentialStatusId = "urn:revocation-registry:my-ecosystem:AD9wKZCr4zVxat1XSawScD#42",
            Revoked = true
        };

        await credentialService.UpdateStatusAsync(updateStatusRequest);
// }
    }

    public async Task CreateProof()
    {
// verifiableCredentialCreateProof() {
        // In a production scenario, `nonce` should only be specified if it is a securely-generated random byte string.
        var nonce = ByteString.CopyFromUtf8("a-randomly-generated-nonce");
        var createProofRequest = new CreateProofRequest()
        {
            ItemId = "urn:uuid:7afd0191-9656-3a51-c12f-44ecfbb5a829",
            Nonce = nonce,
            RevealTemplate = new()
            {
                TemplateAttributes = { "firstName", "lastName" } //Only reveal `firstName` and `lastName`, not `age`
            }
        };

        var createProofResponse = await credentialService.CreateProofAsync(createProofRequest);
// }
    }

    public async Task VerifyProof()
    {
// verifiableCredentialVerifyProof() {
        // In a real scenario, `proofJson` would be the output of the `CreateProof` call
        var proofJson = "{...}";
        var verifyProofRequest = new VerifyProofRequest()
        {
            ProofDocumentJson = proofJson
        };

        var verifyProofResponse = await credentialService.VerifyProofAsync(verifyProofRequest);
// }
    }


    public async Task Send()
    {
// verifiableCredentialSend() {
        // In a real scenario, `credentialJson` would be the output of the `IssueFromTemplate` call
        var credentialJson = "{...}";
        var sendRequest = new SendRequest()
        {
            Email = "jane.doe@example.com",
            DocumentJson = credentialJson,
            SendNotification = true
        };

        await credentialService.SendAsync(sendRequest);
// }
    }

// END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
}