using System.Threading.Tasks;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.TrustRegistry.V1;

namespace Trinsic;

public class TrustRegistryService : ServiceBase
{
    public TrustRegistryService(TrinsicOptions options)
        : base(options) {
        Client = new(Channel);
    }

    private TrustRegistry.TrustRegistryClient Client { get; }

    /// <summary>
    /// Search the trust registry
    /// </summary>
    /// <returns></returns>
    public async Task<SearchRegistryResponse> SearchAsync(SearchRegistryRequest request) {
        if (string.IsNullOrWhiteSpace(request.Query))
        {
            request.Query = "SELECT * FROM _ OFFSET 0 LIMIT 100";
        }

        var response = await SearchRegistryAsync(request);
        return response;
    }

    public SearchRegistryResponse Search(SearchRegistryRequest request) {
        if (string.IsNullOrWhiteSpace(request.Query))
        {
            request.Query = "SELECT * FROM _ OFFSET 0 LIMIT 100";
        }

        return SearchRegistry(request);
    }
// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: /home/runner/work/sdk/sdk/dotnet/Trinsic/TrustRegistryService.cs

	/// <summary>
    /// Register an authoritative issuer for a credential schema
    /// </summary>
    
    public RegisterMemberResponse RegisterMember(RegisterMemberRequest request) {
        
        return Client.RegisterMember(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Register an authoritative issuer for a credential schema
    /// </summary>
    
    public async Task<RegisterMemberResponse> RegisterMemberAsync(RegisterMemberRequest request) {
        
        return await Client.RegisterMemberAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Removes an authoritative issuer for a credential schema from the trust registry
    /// </summary>
    
    public UnregisterMemberResponse UnregisterMember(UnregisterMemberRequest request) {
        
        return Client.UnregisterMember(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Removes an authoritative issuer for a credential schema from the trust registry
    /// </summary>
    
    public async Task<UnregisterMemberResponse> UnregisterMemberAsync(UnregisterMemberRequest request) {
        
        return await Client.UnregisterMemberAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Fetch the status of a member for a given credential schema in a trust registry
    /// </summary>
    
    public GetMemberAuthorizationStatusResponse GetMemberAuthorizationStatus(GetMemberAuthorizationStatusRequest request) {
        
        return Client.GetMemberAuthorizationStatus(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Fetch the status of a member for a given credential schema in a trust registry
    /// </summary>
    
    public async Task<GetMemberAuthorizationStatusResponse> GetMemberAuthorizationStatusAsync(GetMemberAuthorizationStatusRequest request) {
        
        return await Client.GetMemberAuthorizationStatusAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Fetch the ecosystem's authorized issuers and the respective templates against which it can issue
    /// </summary>
    
    public ListAuthorizedMembersResponse ListAuthorizedMembers(ListAuthorizedMembersRequest request) {
        
        return Client.ListAuthorizedMembers(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Fetch the ecosystem's authorized issuers and the respective templates against which it can issue
    /// </summary>
    
    public async Task<ListAuthorizedMembersResponse> ListAuthorizedMembersAsync(ListAuthorizedMembersRequest request) {
        
        return await Client.ListAuthorizedMembersAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Get member for a given did in a trust registry
    /// </summary>
    
    public GetMemberResponse GetMember(GetMemberRequest request) {
        
        return Client.GetMember(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Get member for a given did in a trust registry
    /// </summary>
    
    public async Task<GetMemberResponse> GetMemberAsync(GetMemberRequest request) {
        
        return await Client.GetMemberAsync(request, await BuildMetadataAsync(request));
    }

// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}