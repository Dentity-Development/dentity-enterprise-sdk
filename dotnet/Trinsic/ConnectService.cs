using System.Threading.Tasks;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.Connect.V1;

namespace Trinsic;

public class ConnectService : ServiceBase
{
    public ConnectService(TrinsicOptions options)
        : base(options) {
        Client = new(Channel);
    }

    /// <summary>
    /// Gets the underlying grpc client
    /// </summary>
    private Connect.ConnectClient Client { get; }

// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: /home/runner/work/sdk/sdk/dotnet/Trinsic/ConnectService.cs

	/// <summary>
    /// Create an IDVSession
    /// </summary>
    
    public CreateSessionResponse CreateSession(CreateSessionRequest request) {
        
        return Client.CreateSession(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Create an IDVSession
    /// </summary>
    
    public async Task<CreateSessionResponse> CreateSessionAsync(CreateSessionRequest request) {
        
        return await Client.CreateSessionAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Cancel an IDVSession
    /// </summary>
    
    public CancelSessionResponse CancelSession(CancelSessionRequest request) {
        
        return Client.CancelSession(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Cancel an IDVSession
    /// </summary>
    
    public async Task<CancelSessionResponse> CancelSessionAsync(CancelSessionRequest request) {
        
        return await Client.CancelSessionAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Get an IDVSession
    /// </summary>
    
    public GetSessionResponse GetSession(GetSessionRequest request) {
        
        return Client.GetSession(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Get an IDVSession
    /// </summary>
    
    public async Task<GetSessionResponse> GetSessionAsync(GetSessionRequest request) {
        
        return await Client.GetSessionAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// List IDVSessions created by the calling wallet
    /// </summary>
    
    public ListSessionsResponse ListSessions(ListSessionsRequest request) {
        
        return Client.ListSessions(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// List IDVSessions created by the calling wallet
    /// </summary>
    
    public async Task<ListSessionsResponse> ListSessionsAsync(ListSessionsRequest request) {
        
        return await Client.ListSessionsAsync(request, await BuildMetadataAsync(request));
    }

	/// <summary>
    /// Checks if the identity provided in the request has a wallet containing a valid reusable credential
    /// </summary>
    
    public HasValidCredentialResponse HasValidCredential(HasValidCredentialRequest request) {
        
        return Client.HasValidCredential(request, BuildMetadata(request));
    }
	
	/// <summary>
    /// Checks if the identity provided in the request has a wallet containing a valid reusable credential
    /// </summary>
    
    public async Task<HasValidCredentialResponse> HasValidCredentialAsync(HasValidCredentialRequest request) {
        
        return await Client.HasValidCredentialAsync(request, await BuildMetadataAsync(request));
    }

// END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}