using System.Threading.Tasks;
using Google.Protobuf;
using Microsoft.Extensions.Options;
using Trinsic.Sdk.Options.V1;
using Trinsic.Services.Account.V1;

namespace Trinsic;

/// <summary>
/// Account Service
/// </summary>
public class AccountService : ServiceBase
{
    public AccountService(ServiceOptions options)
        : base(options) {
        Client = new(Channel);
    }

    /// <summary>
    /// Gets the underlying grpc client
    /// </summary>
    private Account.AccountClient Client { get; }

    /// <summary>
    /// Return the details about the currently active account
    /// </summary>
    /// <returns></returns>
    public async Task<AccountInfoResponse> GetInfoAsync() {
        AccountInfoRequest request = new();
        var response = await Client.InfoAsync(new(), await BuildMetadataAsync(request));

        return response;
    }

    /// <summary>
    /// Return the details about the currently active account
    /// </summary>
    /// <returns></returns>
    public AccountInfoResponse GetInfo() {
        AccountInfoRequest request = new();
        var response = Client.Info(request, BuildMetadata(request));

        return response;
    }

    // BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
    // target: /home/runner/work/sdk/sdk/dotnet/Trinsic/AccountService.cs

    /// <summary>
    /// Get account information
    /// </summary>

    public AccountInfoResponse Info() {
        var request = new AccountInfoRequest();
        return Client.Info(request, BuildMetadata(request));
    }

    /// <summary>
    /// Get account information
    /// </summary>

    public async Task<AccountInfoResponse> InfoAsync() {
        var request = new AccountInfoRequest();
        return await Client.InfoAsync(request, await BuildMetadataAsync(request));
    }

    // END Code generated by protoc-gen-trinsic. DO NOT EDIT.
}