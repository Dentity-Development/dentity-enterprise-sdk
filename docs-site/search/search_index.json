{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Businesses spend huge amounts of time and money doing manual verification of the information contained within paper and pdf documents. The verification process is slow, security is weak, and prone to fraud (eg fake id cards in bars). These inefficiencies are often felt in highly regulated industries like supply chain, healthcare, banking, and education. Using the latest developments in cryptography and networking standards, We enable developers to shift their verification processes to an entirely digital, interoperable, portable format where high-risk trust decisions can be made almost instantly. This is much faster compared to exchanging and validating information through a paper or html form. It also massively increases the trust in the authenticity of the data getting exchanged. And it requires no centralized authority to operate - it's completely distribute like the internet itself. Thousands of organizations of all sizes - from startups to governments, use Trinsic's software and APIs to instantly verify information about individuals in person and online with technology instead of paper. Trinsic provides an SDK that makes it easy to add these verification capabilities to your existing system without any new infrastructure or setup. The Trinsic Platform The Trinsic SDK has two main modules for now. We've split it up to enable more flexibility for different use cases. - Core, which deals with Messages and Wallets. - Ecosystems, which provides useful objects like Credential Templates, Pass Templates and Registries. Trinsic Core Messages Trinsic Core has two primary message types to utilize. Credentials Credentials are containers that hold information about you. The W3C Verifiable Credential Data Model is a standard that provides an interoperable digital representation of physical licenses, cards, documents, or certificates, and all kinds of abstract data. They are based on the W3C VC Data Model . Passes Passes are generated from credentials or issued directly. They are specific to a scenario and only include the information necessary to fulfill a verifier's request. Wallets A storage system encrypted and controlled by keys located on one or more devices. Storage is provided as a hosted service for convenience But keys are stored on the edge. Trinsic has no ability to view inside wallets. Communication Existing mediums of interopable information exchange are insecure and slow. In person it's paper. online it's the web form or sometimes email. It's all self-attested information. We've developed a secure messaging protocol that works in any context. Trinsic Core enables messages to be sent back and forth with high degree of trust that the contents haven't been tampered or sniffed. It's the power of PGP and (more recently) signal with much greater interoperability and cross platform transport mechanisms. Let's you send a message to someone online, and have them generate a proof of that message and have it be verified offline Selective disclosure, revocation, signing, encryption, verification all come out of the box and are easy to use, and are interoperable. Trinsic Ecosystem Coming soon. While credentials, passes, and wallets are the only thing an individual using your app might need to interact with, there are a few more concepts for the Provider. Templates and Ecosystems. Verifiers and holders want a way to know the issuer is a legitimate entity they trust. Holders want to know that the verifier they're sending a pass to is someone they trust. We introduce the concept of a trust registry. Credential Template Describes a credential using its name and attribute types Pass Template Describes a pass using the attribute types and queries on those attributes Trust Registry Shows a list of authorized issuers and verifiers and the templates they're authorized to use.","title":"Introduction"},{"location":"#introduction","text":"Businesses spend huge amounts of time and money doing manual verification of the information contained within paper and pdf documents. The verification process is slow, security is weak, and prone to fraud (eg fake id cards in bars). These inefficiencies are often felt in highly regulated industries like supply chain, healthcare, banking, and education. Using the latest developments in cryptography and networking standards, We enable developers to shift their verification processes to an entirely digital, interoperable, portable format where high-risk trust decisions can be made almost instantly. This is much faster compared to exchanging and validating information through a paper or html form. It also massively increases the trust in the authenticity of the data getting exchanged. And it requires no centralized authority to operate - it's completely distribute like the internet itself. Thousands of organizations of all sizes - from startups to governments, use Trinsic's software and APIs to instantly verify information about individuals in person and online with technology instead of paper. Trinsic provides an SDK that makes it easy to add these verification capabilities to your existing system without any new infrastructure or setup.","title":"Introduction"},{"location":"#the-trinsic-platform","text":"The Trinsic SDK has two main modules for now. We've split it up to enable more flexibility for different use cases. - Core, which deals with Messages and Wallets. - Ecosystems, which provides useful objects like Credential Templates, Pass Templates and Registries.","title":"The Trinsic Platform"},{"location":"#trinsic-core","text":"","title":"Trinsic Core"},{"location":"#messages","text":"Trinsic Core has two primary message types to utilize. Credentials Credentials are containers that hold information about you. The W3C Verifiable Credential Data Model is a standard that provides an interoperable digital representation of physical licenses, cards, documents, or certificates, and all kinds of abstract data. They are based on the W3C VC Data Model . Passes Passes are generated from credentials or issued directly. They are specific to a scenario and only include the information necessary to fulfill a verifier's request.","title":"Messages"},{"location":"#wallets","text":"A storage system encrypted and controlled by keys located on one or more devices. Storage is provided as a hosted service for convenience But keys are stored on the edge. Trinsic has no ability to view inside wallets.","title":"Wallets"},{"location":"#communication","text":"Existing mediums of interopable information exchange are insecure and slow. In person it's paper. online it's the web form or sometimes email. It's all self-attested information. We've developed a secure messaging protocol that works in any context. Trinsic Core enables messages to be sent back and forth with high degree of trust that the contents haven't been tampered or sniffed. It's the power of PGP and (more recently) signal with much greater interoperability and cross platform transport mechanisms. Let's you send a message to someone online, and have them generate a proof of that message and have it be verified offline Selective disclosure, revocation, signing, encryption, verification all come out of the box and are easy to use, and are interoperable.","title":"Communication"},{"location":"#trinsic-ecosystem","text":"Coming soon. While credentials, passes, and wallets are the only thing an individual using your app might need to interact with, there are a few more concepts for the Provider. Templates and Ecosystems. Verifiers and holders want a way to know the issuer is a legitimate entity they trust. Holders want to know that the verifier they're sending a pass to is someone they trust. We introduce the concept of a trust registry. Credential Template Describes a credential using its name and attribute types Pass Template Describes a pass using the attribute types and queries on those attributes Trust Registry Shows a list of authorized issuers and verifiers and the templates they're authorized to use.","title":"Trinsic Ecosystem"},{"location":"cli/reference/","text":"CLI Configuration All settings regarding the CLI are stored in ~/.trinsic/okapi.toml file. You can edit this file directly to change the desired settings, or use the CLI config subcommand. Display configuration To print the current configuration file in the terminal use: okapi config --show Setting Configuration Variables config subcommand To change the default server the CLI communicates, set the server-address attribute okapi config --server-address https://example.com/ profile subcommand okapi config --profile-default alice Wallet Commands create subcommand This subcommand creates a new wallet and stores the profile with the given name. If the profile name exists, it will be overwritten. okapi wallet create --name alice --description \"Alice's Cloud Wallet\" --default The flag --default is optional. If specified, it will also set the configuration to use this profile as default. The first profile created, will be set as default, regardless of the flag. To see all available flags and options for this subcommand okapi wallet create --help FAQ How is the profile.bin encoded? When I create a wallet with the CLI, where is it stored? What is a did:key? Command Reference didkey generate resolve didcomm pack unpack verify sign config wallet get_provider_configuration create set_profile search insert_item grant_access revoke_access issuer issue create_proof verify_proof authentication acquire_token","title":"CLI Reference"},{"location":"cli/reference/#cli-configuration","text":"All settings regarding the CLI are stored in ~/.trinsic/okapi.toml file. You can edit this file directly to change the desired settings, or use the CLI config subcommand.","title":"CLI Configuration"},{"location":"cli/reference/#display-configuration","text":"To print the current configuration file in the terminal use: okapi config --show","title":"Display configuration"},{"location":"cli/reference/#setting-configuration-variables","text":"","title":"Setting Configuration Variables"},{"location":"cli/reference/#config-subcommand","text":"To change the default server the CLI communicates, set the server-address attribute okapi config --server-address https://example.com/","title":"config subcommand"},{"location":"cli/reference/#profile-subcommand","text":"okapi config --profile-default alice","title":"profile subcommand"},{"location":"cli/reference/#wallet-commands","text":"","title":"Wallet Commands"},{"location":"cli/reference/#create-subcommand","text":"This subcommand creates a new wallet and stores the profile with the given name. If the profile name exists, it will be overwritten. okapi wallet create --name alice --description \"Alice's Cloud Wallet\" --default The flag --default is optional. If specified, it will also set the configuration to use this profile as default. The first profile created, will be set as default, regardless of the flag. To see all available flags and options for this subcommand okapi wallet create --help","title":"create subcommand"},{"location":"cli/reference/#faq","text":"","title":"FAQ"},{"location":"cli/reference/#how-is-the-profilebin-encoded-when-i-create-a-wallet-with-the-cli-where-is-it-stored","text":"","title":"How is the profile.bin encoded? When I create a wallet with the CLI, where is it stored?"},{"location":"cli/reference/#what-is-a-didkey","text":"","title":"What is a did:key?"},{"location":"cli/reference/#command-reference","text":"didkey generate resolve didcomm pack unpack verify sign config wallet get_provider_configuration create set_profile search insert_item grant_access revoke_access issuer issue create_proof verify_proof authentication acquire_token","title":"Command Reference"},{"location":"cli/walkthrough/","text":"Walkthrough Prerequisites 1. Install cli If you're using gitpod, the cli should already have been installed. If not, use cargo install --path . in the cli directory. Alice receives and proves a digital vaccination card Alice's town just received the go ahead to vaccinate everyone. We're going to walk through a scenario where the CDC has created a new digital vaccination card and is using Alice's town as a pilot. CDC publishes template for vaccination alongside authorized issuers handwavy bit CDC independently publishes https://cdc.gov/.well-known/trust-registry that lists the credentials and issuers authorized to issue them Vaccination clinic, Alice, and Airline all create wallets One terminal is provider, creates all wallets trinsic wallet create --description \"Vaccination Clinic\" 3 terms are issuer, holder, verifier respectively. When making a call to the server, be sure to specify which profile is being used: trinsic --profile alice wallet search Issue trinsic issuer issue --document ./covid-vocab/vaccination-certificate-unsigned.jsonld --out ./covid-vocab/vaccination-certificate-signed.jsonld The signed document is sent to the user, via DIDComm, OIDC, email, etc. For this demo, it will be considered out-of-band. The holder stores the document in their wallet. trinsic wallet insert_item --item ./covid-vocab/vaccination-certificate-signed.jsonld Note down the response item_id Create Proof Replace the <item_id> in the command bellow with the output from the insert_item above. trinsic issuer create_proof --document_id <item_id> --out ./covid-vocab/vaccination-certificate-partial-proof.jsonld --reveal_document ./covid-vocab/vaccination-certificate-frame.jsonld The proof is sent to the verifying party via DIDComm, OIDC, email, etc. For this demo, it will be considered out-of-band. Verify Proof trinsic issuer verify_proof --proof_document ./covid-vocab/vaccination-certificate-partial-proof.jsonld Vaccination Clinic issues Alice a credential trinsic --profile clinic issuer issue --document passport --out alice_passport Once the passport has been created, didcomm can be used to pack the message and send it to Alice trinsic didcomm pack --text alice_passport --out ../Alice/passport_packed clinic_key ../Alice/alice_public Alice adds credential to wallet Alice can now unpack the message trinsic didcomm unpack ../VaccinationClinic/clinic_public alice_key passport_packed Alice can insert the credential in her wallet trinsic --profile alice wallet insert_item --item passport --type vaccine_passport Alice finds her credential in her wallet trinsic --profile alice wallet search Alice creates a proof from her credential trinsic --profile alice issuer create_proof --document_id <document id> --reveal_document passport --out proof_document The document id can be found by searching the wallet. Now Alice can send the generated proof over to the verifier using didcomm or any other method Airline verifies Alice's vaccination card Once the verifier receives the proof, they can verify it trinsic --profile airline issuer verify_proof --proof_document alice_proof","title":"Walkthrough"},{"location":"cli/walkthrough/#walkthrough","text":"","title":"Walkthrough"},{"location":"cli/walkthrough/#prerequisites","text":"","title":"Prerequisites"},{"location":"cli/walkthrough/#1-install-cli","text":"If you're using gitpod, the cli should already have been installed. If not, use cargo install --path . in the cli directory.","title":"1. Install cli"},{"location":"cli/walkthrough/#alice-receives-and-proves-a-digital-vaccination-card","text":"Alice's town just received the go ahead to vaccinate everyone. We're going to walk through a scenario where the CDC has created a new digital vaccination card and is using Alice's town as a pilot.","title":"Alice receives and proves a digital vaccination card"},{"location":"cli/walkthrough/#cdc-publishes-template-for-vaccination-alongside-authorized-issuers","text":"handwavy bit CDC independently publishes https://cdc.gov/.well-known/trust-registry that lists the credentials and issuers authorized to issue them","title":"CDC publishes template for vaccination alongside authorized issuers"},{"location":"cli/walkthrough/#vaccination-clinic-alice-and-airline-all-create-wallets","text":"One terminal is provider, creates all wallets trinsic wallet create --description \"Vaccination Clinic\" 3 terms are issuer, holder, verifier respectively. When making a call to the server, be sure to specify which profile is being used: trinsic --profile alice wallet search","title":"Vaccination clinic, Alice, and Airline all create wallets"},{"location":"cli/walkthrough/#issue","text":"trinsic issuer issue --document ./covid-vocab/vaccination-certificate-unsigned.jsonld --out ./covid-vocab/vaccination-certificate-signed.jsonld The signed document is sent to the user, via DIDComm, OIDC, email, etc. For this demo, it will be considered out-of-band. The holder stores the document in their wallet. trinsic wallet insert_item --item ./covid-vocab/vaccination-certificate-signed.jsonld Note down the response item_id","title":"Issue"},{"location":"cli/walkthrough/#create-proof","text":"Replace the <item_id> in the command bellow with the output from the insert_item above. trinsic issuer create_proof --document_id <item_id> --out ./covid-vocab/vaccination-certificate-partial-proof.jsonld --reveal_document ./covid-vocab/vaccination-certificate-frame.jsonld The proof is sent to the verifying party via DIDComm, OIDC, email, etc. For this demo, it will be considered out-of-band.","title":"Create Proof"},{"location":"cli/walkthrough/#verify-proof","text":"trinsic issuer verify_proof --proof_document ./covid-vocab/vaccination-certificate-partial-proof.jsonld","title":"Verify Proof"},{"location":"cli/walkthrough/#vaccination-clinic-issues-alice-a-credential","text":"trinsic --profile clinic issuer issue --document passport --out alice_passport Once the passport has been created, didcomm can be used to pack the message and send it to Alice trinsic didcomm pack --text alice_passport --out ../Alice/passport_packed clinic_key ../Alice/alice_public","title":"Vaccination Clinic issues Alice a credential"},{"location":"cli/walkthrough/#alice-adds-credential-to-wallet","text":"Alice can now unpack the message trinsic didcomm unpack ../VaccinationClinic/clinic_public alice_key passport_packed Alice can insert the credential in her wallet trinsic --profile alice wallet insert_item --item passport --type vaccine_passport","title":"Alice adds credential to wallet"},{"location":"cli/walkthrough/#alice-finds-her-credential-in-her-wallet","text":"trinsic --profile alice wallet search","title":"Alice finds her credential in her wallet"},{"location":"cli/walkthrough/#alice-creates-a-proof-from-her-credential","text":"trinsic --profile alice issuer create_proof --document_id <document id> --reveal_document passport --out proof_document The document id can be found by searching the wallet. Now Alice can send the generated proof over to the verifier using didcomm or any other method","title":"Alice creates a proof from her credential"},{"location":"cli/walkthrough/#airline-verifies-alices-vaccination-card","text":"Once the verifier receives the proof, they can verify it trinsic --profile airline issuer verify_proof --proof_document alice_proof","title":"Airline verifies Alice's vaccination card"}]}